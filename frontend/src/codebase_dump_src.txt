Project structure for '/c/Users/Galaxy/LEVI/projects/apps/crest-app/frontend/src':
===============================================================================
  App.css
  App.tsx
  assets/react.svg
  components/dashboard/DashboardGreetingCard.tsx
  components/dashboard/ProjectCard.tsx
  components/form-builder/Canvas.tsx
  components/form-builder/FormFieldWrapper.tsx
  components/form-builder/Inspector.tsx
  components/form-builder/JsonEditor.tsx
  components/form-builder/Toolbox.tsx
  components/forms/DraftStatusBar.tsx
  components/forms/DynamicFormRenderer.tsx
  components/forms/widgets/NumberWidget.tsx
  components/layout/ContextSwitcher.tsx
  components/layout/NavMenu.tsx
  components/layout/Sidebar.tsx
  components/layout/SidebarLayout.tsx
  components/layout/TopBar.tsx
  components/project/InfoWidget.tsx
  components/ui/Button.tsx
  components/ui/Card.tsx
  components/ui/Checkbox.tsx
  components/ui/InputField.tsx
  components/ui/PageHeader.tsx
  components/ui/Slider.tsx
  components/ui/Stepper.tsx
  components/ui/TextareaField.tsx
  config/formBuilder.config.ts
  data/index.ts
  data/intraoperatoriaOptions.ts
  data/mockData.ts
  data/preAnestesiaOptions.ts
  index.css
  lib/utils.ts
  main.tsx
  pages/CreateProjectPage.tsx
  pages/DashboardPage.tsx
  pages/DataSubmissionPage.tsx
  pages/FormBuilderPage.tsx
  pages/NotFoundPage.tsx
  pages/ProjectDetailsPage.tsx
  pages/SettingsPage.tsx
  stores/authStore.ts
  stores/formBuilderStore.ts
  stores/index.ts
  stores/projectStore.ts
  stores/submissionStore.ts
  types/index.ts
  vite-env.d.ts



###############################################################################
### FILE: App.css
###############################################################################
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



###############################################################################
### FILE: App.tsx
###############################################################################
// src/App.tsx
import { Routes, Route } from 'react-router-dom';

// Layout Components
import TopBar from '@/components/layout/TopBar'; 
import SidebarLayout from '@/components/layout/SidebarLayout';

// Page Components
import DashboardPage from '@/pages/DashboardPage';
import CreateProjectPage from '@/pages/CreateProjectPage';
import ProjectDetailsPage from '@/pages/ProjectDetailsPage';
import DataSubmissionPage from '@/pages/DataSubmissionPage';
import FormBuilderPage from '@/pages/FormBuilderPage';
import SettingsPage from '@/pages/SettingsPage';
import NotFoundPage from '@/pages/NotFoundPage';

function App() {
  return (
    <div className="min-h-screen bg-background">
      <TopBar />
      <main className="pt-[var(--header-height)]">
        <Routes>
          {/* Routes WITHOUT the main sidebar */}
          <Route path="/" element={<DashboardPage />} />
          <Route path="/create-project" element={<CreateProjectPage />} />
          
          {/* Routes WITH the main sidebar (wrapped in the SidebarLayout) */}
          <Route element={<SidebarLayout />}>
            <Route path="/project/:projectId" element={<ProjectDetailsPage />} />
            <Route path="/project/:projectId/submission" element={<DataSubmissionPage />} />
            <Route path="/project/:projectId/builder" element={<FormBuilderPage />} />
            {/* Future project-specific routes can be added here */}
          </Route>

          {/* Standalone Settings Page */}
          <Route path="/settings" element={<SettingsPage />} />
          
          <Route path="*" element={<NotFoundPage />} />
        </Routes>
      </main>
    </div>
  );
}

export default App;


###############################################################################
### FILE: assets/react.svg
###############################################################################
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>


###############################################################################
### FILE: components/dashboard/DashboardGreetingCard.tsx
###############################################################################
// src/components/dashboard/DashboardGreetingCard.tsx
import React from 'react';
import { PiPlusCircleDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import useAuthStore from '@/stores/authStore';

interface DashboardGreetingCardProps {
  onCreateNewProject: () => void;
}
const DashboardGreetingCard: React.FC<DashboardGreetingCardProps> = ({ onCreateNewProject }) => {
  const { user } = useAuthStore();

  return (
    <section className="relative p-8 rounded-xl shadow-lg border bg-card overflow-hidden">
      {/* Animated background glows */}
      <div className="absolute top-0 left-0 w-1/2 h-1/2 bg-gradient-to-br from-brand-blue/30 to-transparent rounded-full filter blur-3xl opacity-50 animate-pulse"></div>
      <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-gradient-to-tl from-brand-purple/30 to-transparent rounded-full filter blur-3xl opacity-50 animation-delay-2000 animate-pulse"></div>
      
      <div className="relative z-10 flex flex-col md:flex-row items-start md:items-center justify-between gap-6">
        <div className="flex-1">
          <h1 className="text-3xl md:text-4xl font-bold text-foreground">
            Welcome back, <span className="text-gradient-primary">{user?.name || 'User'}</span>!
          </h1>
          <p className="mt-2 text-muted-foreground text-lg max-w-xl">
            This is your launchpad. Manage projects, track progress, and drive your research forward.
          </p>
        </div>
        <div className="shrink-0 mt-4 md:mt-0">
          <Button
            size="lg"
            onClick={onCreateNewProject}
            variant="gradient"
            className="animate-pulse-glow"
          >
            <PiPlusCircleDuotone className="w-6 h-6 mr-2" />
            Create New Project
          </Button>
        </div>
      </div>
    </section>
  );
};

export default DashboardGreetingCard;


###############################################################################
### FILE: components/dashboard/ProjectCard.tsx
###############################################################################
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Project } from '@/types';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { PiArrowRight } from 'react-icons/pi';

interface ProjectCardProps {
  project: Project;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ project }) => {
  const navigate = useNavigate();
  return (
    <Card className="flex flex-col h-full transition-shadow hover:shadow-lg">
      <CardHeader>
        <CardTitle>{project.name}</CardTitle>
        <CardDescription className="line-clamp-2">{project.description}</CardDescription>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-sm text-muted-foreground">Members: {project.members.length}</p>
      </CardContent>
      <CardFooter>
        <Button onClick={() => navigate(`/project/${project.id}`)} className="w-full">
          View Project <PiArrowRight className="ml-2" />
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ProjectCard;


###############################################################################
### FILE: components/form-builder/Canvas.tsx
###############################################################################
// src/components/form-builder/Canvas.tsx
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/Card';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { DndContext, closestCenter, DragEndEvent } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import FormFieldWrapper from './FormFieldWrapper';

const Canvas: React.FC = () => {
  const { schema, fieldOrder, setFieldOrder } = useFormBuilderStore();

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      const oldIndex = fieldOrder.indexOf(active.id as string);
      const newIndex = fieldOrder.indexOf(over.id as string);
      const newOrder = [...fieldOrder];
      const [movedItem] = newOrder.splice(oldIndex, 1);
      newOrder.splice(newIndex, 0, movedItem);
      setFieldOrder(newOrder);
    }
  };

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>{schema.title}</CardTitle>
        <CardDescription>{schema.description}</CardDescription>
      </CardHeader>
      <CardContent>
        <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
          <SortableContext items={fieldOrder} strategy={verticalListSortingStrategy}>
            <div className="space-y-4">
              {fieldOrder.length > 0 ? fieldOrder.map(fieldId => (
                <FormFieldWrapper key={fieldId} fieldId={fieldId} />
              )) : (
                <div className="text-center py-16 border-2 border-dashed rounded-lg">
                  <p className="text-muted-foreground">Drag or click fields from the Toolbox to begin.</p>
                </div>
              )}
            </div>
          </SortableContext>
        </DndContext>
      </CardContent>
    </Card>
  );
};

export default Canvas;


###############################################################################
### FILE: components/form-builder/FormFieldWrapper.tsx
###############################################################################
// src/components/form-builder/FormFieldWrapper.tsx
import React from 'react';
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { Button } from '@/components/ui/Button';
import { PiTrash, PiDotsSixVerticalBold } from 'react-icons/pi';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { cn } from '@/lib/utils';

// This is a placeholder for the visual preview of widgets
const FieldPreview: React.FC<{ fieldId: string }> = ({ fieldId }) => {
  const { schema, uiSchema } = useFormBuilderStore();
  const fieldSchema = schema.properties[fieldId];
  const fieldUiSchema = uiSchema[fieldId];

  return (
    <div className="p-2">
      <p className="font-semibold text-sm">{fieldSchema?.title || 'Untitled Field'}</p>
      <p className="text-xs text-muted-foreground">Type: {fieldSchema?.type}</p>
      {fieldUiSchema?.['ui:options']?.enabledInputs && (
         <p className="text-xs text-muted-foreground">Inputs: {fieldUiSchema['ui:options'].enabledInputs.join(', ')}</p>
      )}
    </div>
  );
}

interface FormFieldWrapperProps {
  fieldId: string;
}

const FormFieldWrapper: React.FC<FormFieldWrapperProps> = ({ fieldId }) => {
  const { selectedFieldId, setSelectedFieldId, removeField } = useFormBuilderStore();
  const isSelected = selectedFieldId === fieldId;

  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
  } = useSortable({ id: fieldId });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      onClick={() => setSelectedFieldId(fieldId)}
      className={cn(
        "bg-card border-2 rounded-lg shadow-sm relative group",
        isSelected ? 'border-primary' : 'border-transparent hover:border-dashed hover:border-muted-foreground'
      )}
    >
      <div className="flex items-start">
        <div {...attributes} {...listeners} className="p-3 cursor-grab touch-none text-muted-foreground group-hover:bg-accent rounded-l-md">
            <PiDotsSixVerticalBold />
        </div>
        <div className="flex-grow">
            <FieldPreview fieldId={fieldId} />
        </div>
        <div className="p-1">
            <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); removeField(fieldId); }}>
                <PiTrash />
            </Button>
        </div>
      </div>
    </div>
  );
};

export default FormFieldWrapper;


###############################################################################
### FILE: components/form-builder/Inspector.tsx
###############################################################################
// src/components/form-builder/Inspector.tsx
import React, { useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { useForm } from 'react-hook-form';
import { InputField } from '@/components/ui/InputField';
import { Checkbox as UiCheckbox } from '@/components/ui/Checkbox';

const Inspector: React.FC = () => {
  const { selectedFieldId, schema, uiSchema, updateFieldSchema, updateFieldUiOptions } = useFormBuilderStore();
  
  const { register, watch, reset } = useForm();

  useEffect(() => {
    if (selectedFieldId && schema.properties[selectedFieldId]) {
      const fieldSchema = schema.properties[selectedFieldId];
      const fieldUiOptions = uiSchema[selectedFieldId]?.['ui:options'] || {};
      reset({
        title: fieldSchema.title,
        ...fieldUiOptions
      });
    }
  }, [selectedFieldId, schema, uiSchema, reset]);
  
  useEffect(() => {
    const subscription = watch((value) => {
        if (!selectedFieldId) return;
        const { title, ...options } = value;
        updateFieldSchema(selectedFieldId, { title });
        updateFieldUiOptions(selectedFieldId, options);
    });
    return () => subscription.unsubscribe();
  }, [watch, selectedFieldId, updateFieldSchema, updateFieldUiOptions]);

  if (!selectedFieldId) {
    return (
      <Card className="h-full">
        <CardHeader><CardTitle>Inspector</CardTitle></CardHeader>
        <CardContent><p className="text-sm text-muted-foreground">Select a field on the canvas to see its properties.</p></CardContent>
      </Card>
    );
  }
  
  const selectedType = schema.properties[selectedFieldId]?.type;

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>Inspector</CardTitle>
      </CardHeader>
      <CardContent>
        <form className="space-y-4">
            <InputField id="inspector-title" label="Label" {...register('title')} />
            
            {selectedType === 'number' && (
                <div className="space-y-2 pt-4 border-t">
                    <h4 className="text-sm font-medium">Number Options</h4>
                    <InputField id="inspector-unit" label="Unit" placeholder="e.g., mmHg, kg" {...register('unit')} />
                    <label className="text-sm font-medium">Enabled Inputs</label>
                    <div className="space-y-1">
                        <label className="flex items-center gap-2"><UiCheckbox {...register('enabledInputs')} value="inputBox" /> Standard Input Box</label>
                        <label className="flex items-center gap-2"><UiCheckbox {...register('enabledInputs')} value="slider" /> Slider</label>
                        <label className="flex items-center gap-2"><UiCheckbox {...register('enabledInputs')} value="stepper" /> Stepper Buttons</label>
                    </div>
                </div>
            )}
        </form>
      </CardContent>
    </Card>
  );
};

export default Inspector;


###############################################################################
### FILE: components/form-builder/JsonEditor.tsx
###############################################################################
// src/components/form-builder/JsonEditor.tsx
import React, { useState } from 'react';
import Editor from 'react-simple-code-editor';
import 'prismjs';
import 'prismjs/components/prism-json';
import { highlight, languages } from 'prismjs/components/prism-core';
import 'prismjs/themes/prism-tomorrow.css'; 
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';

interface JsonEditorProps {
  title: string;
  jsonString: string;
  onJsonChange: (value: string) => void;
}

const JsonEditor: React.FC<JsonEditorProps> = ({ title, jsonString, onJsonChange }) => {
  const [error, setError] = useState<string | null>(null);

  const handleChange = (value: string) => {
    onJsonChange(value);
    try {
      JSON.parse(value);
      setError(null);
    } catch (e: any) {
      setError(e.message);
    }
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-grow relative">
        <div className="absolute inset-0 p-6 pt-0">
          <Editor
            value={jsonString}
            onValueChange={handleChange}
            highlight={(code) => highlight(code, languages.json, 'json')}
            padding={10}
            className="font-mono text-sm bg-[#2d2d2d] text-white rounded-md h-full w-full overflow-auto border border-border"
            style={{
              fontFamily: '"Fira code", "Fira Mono", monospace',
              fontSize: 12,
            }}
          />
        </div>
      </CardContent>
      {error && (
        <div className="p-2 text-xs text-destructive bg-destructive/10 border-t">
          <strong>JSON Error:</strong> {error}
        </div>
      )}
    </Card>
  );
};

export default JsonEditor;


###############################################################################
### FILE: components/form-builder/Toolbox.tsx
###############################################################################
// src/components/form-builder/Toolbox.tsx
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { FORM_BUILDER_PRIMITIVES } from '@/config/formBuilder.config';
import { useFormBuilderStore } from '@/stores/formBuilderStore';

const Toolbox: React.FC = () => {
  const addField = useFormBuilderStore(state => state.addField);

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle>Toolbox</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground mb-4">Click or drag fields to add them to the canvas.</p>
        <div className="grid grid-cols-2 gap-2">
          {FORM_BUILDER_PRIMITIVES.map(primitive => (
            <button
              key={primitive.type}
              onClick={() => addField(primitive.type)}
              className="p-2 border rounded-lg flex flex-col items-center justify-center text-center hover:bg-accent hover:border-primary transition-all"
            >
              <primitive.icon className="w-6 h-6 mb-1" />
              <span className="text-xs font-medium">{primitive.label}</span>
            </button>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default Toolbox;


###############################################################################
### FILE: components/forms/DraftStatusBar.tsx
###############################################################################
// src/components/forms/DraftStatusBar.tsx
import React from 'react';
import { useSubmissionStore } from '@/stores/submissionStore';
import { PiCheckCircleDuotone } from 'react-icons/pi';

const DraftStatusBar: React.FC = () => {
  const { lastUpdateTimestamp, isEncounterActive } = useSubmissionStore();

  if (!isEncounterActive || !lastUpdateTimestamp) {
    return null;
  }

  const lastSavedTime = new Date(lastUpdateTimestamp).toLocaleTimeString();

  return (
    <div className="fixed bottom-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-lg border-t border-border">
      <div className="container mx-auto px-4 py-2 flex items-center justify-center text-sm">
        <PiCheckCircleDuotone className="w-5 h-5 mr-2 text-green-500" />
        <span className="text-muted-foreground">Draft automatically saved at {lastSavedTime}</span>
      </div>
    </div>
  );
};

export default DraftStatusBar;


###############################################################################
### FILE: components/forms/DynamicFormRenderer.tsx
###############################################################################
// src/components/forms/DynamicFormRenderer.tsx
import React from 'react';
import { FormSchema, FormUiSchema } from '@/stores/formBuilderStore';
import NumberWidget from './widgets/NumberWidget';
// Other widgets will be imported here

interface DynamicFormRendererProps {
  schema: FormSchema;
  uiSchema: FormUiSchema;
  formData: any;
  onFormDataChange: (updatedData: any) => void;
  fieldOrder?: string[];
}

const widgetRegistry: { [key: string]: React.ComponentType<any> } = {
  NumberWidget,
  // TextWidget, ChoiceWidget, etc.
};

const UnhandledWidget = ({ widgetName, fieldId }: { widgetName: string, fieldId: string }) => (
  <div className="p-2 border-dashed border-destructive bg-destructive/10 text-destructive text-xs rounded-md">
    Unhandled Widget: <strong>{widgetName || 'N/A'}</strong> for field <strong>{fieldId}</strong>
  </div>
);

const DynamicFormRenderer: React.FC<DynamicFormRendererProps> = ({
  schema,
  uiSchema,
  formData,
  onFormDataChange,
  fieldOrder,
}) => {
  const fieldsToRender = fieldOrder || Object.keys(schema.properties);

  const handleFieldChange = (fieldId: string, newValue: any) => {
    onFormDataChange({
      ...formData,
      [fieldId]: newValue,
    });
  };

  return (
    <form className="space-y-6">
      {fieldsToRender.map(fieldId => {
        const fieldSchema = schema.properties[fieldId];
        const fieldUiSchema = uiSchema[fieldId];
        const WidgetComponent = widgetRegistry[fieldUiSchema?.['ui:widget']];

        if (!WidgetComponent) {
          return <UnhandledWidget key={fieldId} fieldId={fieldId} widgetName={fieldUiSchema?.['ui:widget']} />;
        }

        return (
          <div key={fieldId}>
            <WidgetComponent
              label={fieldSchema.title}
              value={formData[fieldId]}
              onChange={(newValue: any) => handleFieldChange(fieldId, newValue)}
              options={fieldUiSchema['ui:options'] || {}}
              schema={fieldSchema} // Pass schema properties like min/max
            />
          </div>
        );
      })}
    </form>
  );
};

export default DynamicFormRenderer;


###############################################################################
### FILE: components/forms/widgets/NumberWidget.tsx
###############################################################################
// src/components/forms/widgets/NumberWidget.tsx
import React from 'react';
import { InputField } from '@/components/ui/InputField';
import { Slider } from '@/components/ui/Slider';
import Stepper from '@/components/ui/Stepper';

interface NumberWidgetProps {
  label: string;
  value: number;
  onChange: (newValue: number) => void;
  options: {
    unit?: string;
    enabledInputs: ('inputBox' | 'slider' | 'stepper')[];
  };
  schema: {
    minimum?: number;
    maximum?: number;
  };
}

const NumberWidget: React.FC<NumberWidgetProps> = ({ label, value, onChange, options, schema }) => {
  const { unit, enabledInputs = ['inputBox'] } = options;
  const { minimum, maximum } = schema;

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.valueAsNumber);
  };

  const handleSliderChange = (values: number[]) => {
    onChange(values[0]);
  };

  return (
    <div className="space-y-3">
      <label className="text-sm font-medium">{label}</label>
      {enabledInputs.includes('inputBox') && (
        <div className="flex items-center gap-2">
          <InputField
            id={`input-${label}`}
            type="number"
            label=""
            value={value || ''}
            onChange={handleInputChange}
            min={minimum}
            max={maximum}
          />
          {unit && <span className="text-sm text-muted-foreground">{unit}</span>}
        </div>
      )}
      {enabledInputs.includes('slider') && (
        <Slider
          value={[value || 0]}
          onValueChange={handleSliderChange}
          min={minimum}
          max={maximum}
          step={1}
        />
      )}
      {enabledInputs.includes('stepper') && (
        <Stepper
          value={value || 0}
          onValueChange={onChange}
          min={minimum}
          max={maximum}
        />
      )}
    </div>
  );
};

export default NumberWidget;


###############################################################################
### FILE: components/layout/ContextSwitcher.tsx
###############################################################################
// src/components/layout/ContextSwitcher.tsx
import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { PiCaretUpDownDuotone, PiGaugeDuotone, PiCheck, PiPlus } from 'react-icons/pi';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/Button';

const ContextSwitcher: React.FC = () => {
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const { availableProjects, activeProjectId, activeProjectDetails, setActiveProject } = useProjectStore();
  const { user } = useAuthStore();
  const switcherRef = useRef<HTMLDivElement>(null);

  const handleSelect = (id: string | null) => {
    setIsOpen(false);
    if (id) {
      setActiveProject(id);
      navigate(`/project/${id}`);
    } else {
      setActiveProject(""); // Clear the active project
      navigate('/');
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (switcherRef.current && !switcherRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const currentContextName = activeProjectDetails?.name || "Global Dashboard";
  const userProjects = user ? availableProjects.filter(p => p.members.some(m => m.userId === user.id)) : [];

  return (
    <div className="relative mb-4" ref={switcherRef}>
      <Button
        variant="outline"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full justify-between"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="truncate">{currentContextName}</span>
        <PiCaretUpDownDuotone className="ml-2 h-4 w-4 shrink-0 opacity-50" />
      </Button>
      {isOpen && (
        <div className="absolute z-10 mt-1 w-full rounded-md border bg-popover text-popover-foreground shadow-lg">
          <ul className="max-h-60 overflow-y-auto p-1" role="listbox">
            {/* Global Dashboard Option */}
            <li
              className={cn("flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent", !activeProjectId && "bg-accent")}
              onClick={() => handleSelect(null)}
              role="option"
              aria-selected={!activeProjectId}
            >
              <PiGaugeDuotone className="mr-2 h-4 w-4" />
              Global Dashboard
              {!activeProjectId && <PiCheck className="ml-auto h-4 w-4" />}
            </li>

            {/* Project Options */}
            <div className="my-1 h-px bg-border" />
            <h4 className="px-2 text-xs font-semibold text-muted-foreground">Projects</h4>
            {userProjects.map((project) => (
              <li
                key={project.id}
                className={cn("flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent", project.id === activeProjectId && "bg-accent")}
                onClick={() => handleSelect(project.id)}
                role="option"
                aria-selected={project.id === activeProjectId}
              >
                {project.name}
                {project.id === activeProjectId && <PiCheck className="ml-auto h-4 w-4" />}
              </li>
            ))}
             <div className="my-1 h-px bg-border" />
             {/* Create New Project - Placeholder Action */}
             <li className="flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm text-muted-foreground outline-none hover:bg-accent">
                <PiPlus className="mr-2 h-4 w-4"/>
                Create Project
             </li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default ContextSwitcher;


###############################################################################
### FILE: components/layout/NavMenu.tsx
###############################################################################
// src/components/layout/NavMenu.tsx
import React from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { IconType } from 'react-icons';
import { cn } from '@/lib/utils';

export interface NavItem {
  id: string;
  label: string;
  path?: string;
  icon?: IconType;
  isHeader?: boolean;
  children?: NavItem[];
  roles?: string[];
}

const NavMenu: React.FC<{ items: NavItem[] }> = ({ items }) => {
  const location = useLocation();

  const isChildActive = (item: NavItem): boolean => {
    if (!item.children) return false;
    return item.children.some(child => 
      child.path === location.pathname || (child.children && isChildActive(child))
    );
  };

  return (
    <nav>
      <ul className="space-y-1">
        {items.map((item) => (
          <li key={item.id}>
            {item.isHeader ? (
              <h3 className={cn("px-3 pt-4 pb-1 text-xs font-semibold uppercase text-muted-foreground/80 tracking-wider", isChildActive(item) && 'text-primary')}>
                {item.label}
              </h3>
            ) : (
              item.path && (
                <NavLink
                  to={item.path}
                  end={item.path === '/'}
                  className={({ isActive }) =>
                    cn(
                      'flex items-center p-2.5 text-sm rounded-lg hover:bg-accent transition-all duration-200 group relative',
                      isActive 
                        ? 'font-semibold text-primary bg-primary/10 dark:shadow-glow-primary-md' 
                        : 'font-medium text-foreground/80 hover:text-foreground'
                    )
                  }
                >
                  {item.icon && <item.icon className="w-5 h-5 mr-3 shrink-0" />}
                  <span className="flex-1">{item.label}</span>
                </NavLink>
              )
            )}
            {item.children && (
              <ul className="pl-4 mt-1 space-y-1 border-l-2 border-border/50 ml-3">
                <NavMenu items={item.children} />
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default NavMenu;


###############################################################################
### FILE: components/layout/Sidebar.tsx
###############################################################################
// src/components/layout/Sidebar.tsx
import React, { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import ContextSwitcher from '@/components/layout/ContextSwitcher';
import NavMenu, { NavItem } from '@/components/layout/NavMenu';
import useAuthStore from '@/stores/authStore';
import { useProjectStore } from '@/stores/projectStore';
import { 
    PiGaugeDuotone, PiGearDuotone, PiHouseDuotone, PiListChecksDuotone, 
    PiSquaresFourDuotone, PiUsersDuotone, PiMagnifyingGlassDuotone, PiBellDuotone 
} from 'react-icons/pi';

const Sidebar: React.FC = () => {
  const { projectId } = useParams();
  const { user, activeProjectRoles, setProjectRoles } = useAuthStore();
  const { activeProjectDetails } = useProjectStore();

  // This effect synchronizes the user's roles for the currently active project into the authStore.
  useEffect(() => {
    if (user && activeProjectDetails) {
      const memberInfo = activeProjectDetails.members.find(m => m.userId === user.id);
      setProjectRoles(memberInfo ? memberInfo.roles : []);
    } else {
      setProjectRoles([]);
    }
  }, [activeProjectDetails, user, setProjectRoles]);


  const getNavItems = (): NavItem[] => {
      // Base navigation structure
      const globalNav: NavItem[] = [
        { id: 'dashboard', path: `/`, label: 'Dashboard', icon: PiGaugeDuotone },
        { id: 'settings', path: '/settings', label: 'Settings', icon: PiGearDuotone },
      ];

      const projectNavStructure: NavItem[] = [
        { id: 'overview', path: `/project/${projectId}`, label: 'Project Overview', icon: PiHouseDuotone },
        {
          id: 'data-collection', label: 'Data Collection', isHeader: true, children: [
            { id: 'submission', path: `/project/${projectId}/submission`, label: 'New Submission', icon: PiListChecksDuotone, roles: ['Researcher', 'DataEntry', 'ProjectLead'] },
            { id: 'search', path: `/project/${projectId}/search`, label: 'Search Patient', icon: PiMagnifyingGlassDuotone, roles: ['Researcher', 'ProjectLead'] },
          ]
        },
        {
          id: 'project-setup', label: 'Project Setup', isHeader: true, children: [
            { id: 'builder', path: `/project/${projectId}/builder`, label: 'Form Builder', icon: PiSquaresFourDuotone, roles: ['ProjectLead', 'FormDesigner'] },
            { id: 'roles', path: `/project/${projectId}/roles`, label: 'Role Editor', icon: PiUsersDuotone, roles: ['ProjectLead'] },
            { id: 'notifications', path: `/project/${projectId}/notifications`, label: 'Notifications', icon: PiBellDuotone, roles: ['ProjectLead'] },
          ]
        },
      ];

      // Recursively filter the navigation items based on the user's roles
      const filterByRole = (items: NavItem[]): NavItem[] => {
        return items.reduce((acc: NavItem[], item) => {
          const hasRole = !item.roles || item.roles.some(role => activeProjectRoles.includes(role));
          
          if (hasRole) {
            const newItem = {...item};
            if (item.children) {
              newItem.children = filterByRole(item.children);
              // Only include headers if they have visible children
              if (newItem.children.length > 0) {
                acc.push(newItem);
              }
            } else {
              acc.push(newItem);
            }
          }
          return acc;
        }, []);
      };
      
      return projectId ? filterByRole(projectNavStructure) : globalNav;
  };

  return (
    <aside className="fixed top-[var(--header-height)] left-0 z-40 w-64 h-screen border-r bg-card/70 backdrop-blur-xl transition-transform -translate-x-full lg:translate-x-0">
      <div className="h-full px-3 py-4 overflow-y-auto scrollbar-hide">
        <ContextSwitcher />
        <NavMenu items={getNavItems()} />
      </div>
    </aside>
  );
};

export default Sidebar;


###############################################################################
### FILE: components/layout/SidebarLayout.tsx
###############################################################################
// src/components/layout/SidebarLayout.tsx
import React from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from '@/components/layout/Sidebar';

const SidebarLayout: React.FC = () => {
  return (
    <div className="relative flex">
      <Sidebar />
      <div className="flex-1 lg:pl-64"> {/* This padding must match the sidebar width */}
        <div className="p-4 sm:p-6 lg:p-8">
          <Outlet />
        </div>
      </div>
    </div>
  );
};

export default SidebarLayout;


###############################################################################
### FILE: components/layout/TopBar.tsx
###############################################################################
// src/components/layout/TopBar.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { PiCompassDuotone, PiBellDuotone, PiSunDuotone, PiMoonDuotone, PiSignOutDuotone, PiCaretDownDuotone, PiGearDuotone } from 'react-icons/pi';
import useAuthStore, { mockLogin } from '@/stores/authStore';
import { Button } from '@/components/ui/Button';

const TopBar: React.FC = () => {
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuthStore();
  const [isDarkMode, setIsDarkMode] = useState(() => document.documentElement.classList.contains('dark'));
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const userMenuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Automatically log in the mock user if not authenticated
    if (!isAuthenticated) {
      mockLogin('userLead123');
    }
  }, [isAuthenticated]);

  const toggleDarkMode = () => {
    setIsDarkMode(prev => {
      const newMode = !prev;
      document.documentElement.classList.toggle('dark', newMode);
      localStorage.setItem('theme', newMode ? 'dark' : 'light');
      return newMode;
    });
  };

  const handleLogout = () => {
    useAuthStore.getState().logout();
    navigate('/');
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {
        setIsUserMenuOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className="fixed top-0 left-0 right-0 z-50 bg-card/80 backdrop-blur-lg border-b" style={{ height: 'var(--header-height)' }}>
      <div className="flex items-center justify-between h-full px-4 sm:px-6 mx-auto">
        <Link to="/" className="flex items-center gap-2 text-xl font-bold text-foreground transition-transform hover:scale-105">
          <PiCompassDuotone className="w-8 h-8 text-primary" />
          <span className="hidden sm:inline text-gradient-primary">CREST</span>
        </Link>

        <div className="flex items-center gap-2 sm:gap-3">
          <Button variant="ghost" size="icon" aria-label="Notifications">
            <PiBellDuotone className="h-5 w-5" />
          </Button>

          <Button variant="ghost" size="icon" onClick={toggleDarkMode} aria-label="Toggle theme">
            {isDarkMode ? <PiSunDuotone className="h-5 w-5" /> : <PiMoonDuotone className="h-5 w-5" />}
          </Button>

          <div className="w-px h-6 bg-border mx-2"></div>

          {user && (
            <div className="relative" ref={userMenuRef}>
              <button
                onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                className="flex items-center gap-2 p-1 rounded-full transition-colors hover:bg-accent"
              >
                <img
                  src={`https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=10b981&color=fff&size=32&font-size=0.40&bold=true&rounded=true`}
                  alt={user.name}
                  className="w-8 h-8"
                />
                <div className="hidden sm:flex items-center gap-1">
                  <span className="text-sm font-medium">{user.name}</span>
                  <PiCaretDownDuotone className={`w-4 h-4 text-muted-foreground transition-transform ${isUserMenuOpen ? 'rotate-180' : ''}`} />
                </div>
              </button>

              {isUserMenuOpen && (
                <div className="absolute right-0 mt-2 w-60 rounded-lg shadow-lg bg-popover text-popover-foreground border z-50 p-2 animate-fade-in">
                   <div className="p-2 border-b">
                      <p className="text-sm font-semibold truncate">{user.name}</p>
                      <p className="text-xs text-muted-foreground truncate">{user.email}</p>
                    </div>
                  <div className="mt-1 space-y-1">
                    <button
                      onClick={() => { setIsUserMenuOpen(false); navigate('/settings'); }}
                      className="w-full text-left flex items-center px-2 py-2 text-sm rounded-md hover:bg-accent"
                    >
                      <PiGearDuotone className="w-4 h-4 mr-2" />
                      Settings
                    </button>
                    <button
                      onClick={handleLogout}
                      className="w-full text-left flex items-center px-2 py-2 text-sm rounded-md text-destructive hover:bg-destructive/10"
                    >
                      <PiSignOutDuotone className="w-4 h-4 mr-2" />
                      Sign out
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default TopBar;


###############################################################################
### FILE: components/project/InfoWidget.tsx
###############################################################################
// src/components/project/InfoWidget.tsx
import React from 'react';
import { IconType } from 'react-icons';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { cn } from '@/lib/utils';

interface InfoWidgetProps {
  title: string;
  icon: IconType;
  children: React.ReactNode;
  className?: string;
}

const InfoWidget: React.FC<InfoWidgetProps> = ({ title, icon: Icon, children, className }) => {
  return (
    <Card className={cn("h-full", className)}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        {children}
      </CardContent>
    </Card>
  );
};

export default InfoWidget;


###############################################################################
### FILE: components/ui/Button.tsx
###############################################################################
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 transform-gpu hover:-translate-y-0.5 active:translate-y-0 active:scale-[0.98] relative overflow-hidden",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg dark:shadow-primary/30",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-lg",
        outline: "border border-input bg-background/50 hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        gradient: "bg-gradient-to-r from-brand-blue via-brand-indigo to-brand-purple text-white shadow-lg dark:shadow-glow-blue hover:shadow-xl transition-shadow",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8 text-base",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      >
        {props.children}
        {variant === 'gradient' && (
          <div className="absolute inset-0 h-full w-full -translate-x-full transform-gpu-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0-translate-x-full-z-0 group-hover:translate-x-0 transition-transform duration-500 ease-in-out">
            <div className="h-full w-full bg-gradient-to-r from-transparent via-white/30 to-transparent"></div>
          </div>
        )}
      </Comp>
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


###############################################################################
### FILE: components/ui/Card.tsx
###############################################################################
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div 
    ref={ref} 
    className={cn(
        "rounded-xl border bg-card/70 text-card-foreground shadow-sm backdrop-blur-sm",
        // Subtle gradient overlay for depth
        "relative after:absolute after:inset-0 after:rounded-xl after:bg-gradient-to-br after:from-primary/5 after:to-transparent after:opacity-20 dark:after:from-primary/10",
        className
        )} 
    {...props} 
  />
));
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6 z-10 relative", className)} {...props} />
));
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(({ className, ...props }, ref) => (
  <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
));
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (
  <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0 z-10 relative", className)} {...props} />
));
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center p-6 pt-0 z-10 relative", className)} {...props} />
));
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


###############################################################################
### FILE: components/ui/Checkbox.tsx
###############################################################################
// src/components/ui/Checkbox.tsx
import * as React from 'react';
import { cn } from '@/lib/utils';

export interface CheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(
  ({ className, ...props }, ref) => {
    return (
      <input
        type="checkbox"
        className={cn(
          'h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Checkbox.displayName = 'Checkbox';

export { Checkbox };


###############################################################################
### FILE: components/ui/InputField.tsx
###############################################################################
// src/components/ui/InputField.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export interface InputFieldProps extends InputProps {
    label: string;
    id: string;
    containerClassName?: string;
}

const InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(
    ({ label, id, required, containerClassName, className, ...props }, ref) => {
        return (
            <div className={cn("grid w-full items-center gap-1.5", containerClassName)}>
                <label htmlFor={id} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    {label}
                    {required && <span className="text-destructive ml-1">*</span>}
                </label>
                <Input id={id} ref={ref} required={required} className={className} {...props} />
            </div>
        )
    }
)
InputField.displayName = "InputField"

export { InputField, Input };


###############################################################################
### FILE: components/ui/PageHeader.tsx
###############################################################################
// src/components/ui/PageHeader.tsx
import React from 'react';
import { IconType } from 'react-icons';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const pageHeaderVariants = cva(
  "relative overflow-hidden bg-card border-b shadow-md mb-6",
  {
    variants: {
      gradient: {
        primary: "[--gradient-from:theme(colors.blue.500)] [--gradient-to:theme(colors.indigo.600)]",
        secondary: "[--gradient-from:theme(colors.emerald.500)] [--gradient-to:theme(colors.cyan.500)]",
        accent: "[--gradient-from:theme(colors.orange.500)] [--gradient-to:theme(colors.pink.500)]",
      }
    },
    defaultVariants: {
      gradient: "primary",
    },
  }
);

const iconWrapperVariants = cva(
  "p-2 rounded-lg bg-background/80 shadow-md",
  {
    variants: {
      gradient: {
        primary: "text-blue-500 dark:text-blue-400",
        secondary: "text-emerald-500 dark:text-emerald-400",
        accent: "text-orange-500 dark:text-orange-400",
      }
    },
    defaultVariants: {
      gradient: "primary",
    },
  }
)

export interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof pageHeaderVariants> {
  title: string;
  subtitle?: string;
  icon?: IconType;
}

const PageHeader = React.forwardRef<HTMLDivElement, PageHeaderProps>(
  ({ className, gradient, title, subtitle, icon: Icon, children, ...props }, ref) => {
    return (
      <div className={cn(pageHeaderVariants({ gradient, className }))} ref={ref} {...props}>
        <div className="absolute inset-0 opacity-10 dark:opacity-[0.07] bg-gradient-to-r from-[--gradient-from] to-[--gradient-to]"></div>
        
        <div className="relative z-10 px-4 sm:px-6 py-6 sm:py-8">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-1">
                {Icon && (
                  <div className={cn(iconWrapperVariants({ gradient }))}>
                    <Icon className="w-6 h-6" />
                  </div>
                )}
                <h1 className="text-2xl sm:text-3xl font-bold text-foreground">
                  {title}
                </h1>
              </div>
              {subtitle && (
                <p className="text-muted-foreground text-lg max-w-2xl pl-12 -mt-1">
                  {subtitle}
                </p>
              )}
            </div>
            
            {children && (
              <div className="flex-shrink-0">
                {children}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
)
PageHeader.displayName = "PageHeader"

export { PageHeader };


###############################################################################
### FILE: components/ui/Slider.tsx
###############################################################################
// src/components/ui/Slider.tsx
import * as React from 'react'
import * as SliderPrimitive from '@radix-ui/react-slider'
import { cn } from '@/lib/utils'

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn('relative flex w-full touch-none select-none items-center', className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


###############################################################################
### FILE: components/ui/Stepper.tsx
###############################################################################
// src/components/ui/Stepper.tsx
import React from 'react';
import { Button } from './Button';
import { PiPlus, PiMinus } from 'react-icons/pi';

interface StepperProps {
  value: number;
  onValueChange: (newValue: number) => void;
  min?: number;
  max?: number;
  step?: number;
}

const Stepper: React.FC<StepperProps> = ({ value, onValueChange, min = 0, max = 100, step = 1 }) => {
  const handleDecrement = () => {
    onValueChange(Math.max(min, value - step));
  };
  const handleIncrement = () => {
    onValueChange(Math.min(max, value + step));
  };

  return (
    <div className="flex items-center">
      <Button variant="outline" size="icon" className="h-9 w-9 rounded-r-none" onClick={handleDecrement} disabled={value <= min}>
        <PiMinus />
      </Button>
      <span className="w-12 border-y text-center text-md font-semibold flex items-center justify-center h-9">{value}</span>
      <Button variant="outline" size="icon" className="h-9 w-9 rounded-l-none" onClick={handleIncrement} disabled={value >= max}>
        <PiPlus />
      </Button>
    </div>
  );
};

export default Stepper;


###############################################################################
### FILE: components/ui/TextareaField.tsx
###############################################################################
// src/components/ui/TextareaField.tsx
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = 'Textarea'

export interface TextareaFieldProps extends TextareaProps {
  label: string;
  id: string;
  containerClassName?: string;
}

const TextareaField = React.forwardRef<HTMLTextAreaElement, TextareaFieldProps>(
  ({ label, id, required, containerClassName, className, ...props }, ref) => {
    return (
      <div className={cn('grid w-full items-center gap-1.5', containerClassName)}>
        <label htmlFor={id} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
          {label}
          {required && <span className="text-destructive ml-1">*</span>}
        </label>
        <Textarea id={id} ref={ref} required={required} className={className} {...props} />
      </div>
    )
  }
)
TextareaField.displayName = "TextareaField"

export { TextareaField, Textarea }


###############################################################################
### FILE: config/formBuilder.config.ts
###############################################################################
// src/config/formBuilder.config.ts
import { PiTextT, PiNumberCircleOne, PiToggleLeft, PiListDashes, PiListNumbers } from 'react-icons/pi';

export type FieldPrimitiveType = 'text' | 'number' | 'boolean' | 'singleChoice' | 'multipleChoice' | 'date';

export interface FieldPrimitive {
  type: FieldPrimitiveType;
  label: string;
  icon: React.ComponentType<any>;
  defaultSchema: any;
  defaultUiSchema: any;
}

export const FORM_BUILDER_PRIMITIVES: FieldPrimitive[] = [
  {
    type: 'text',
    label: 'Text',
    icon: PiTextT,
    defaultSchema: {
      type: 'string',
      title: 'Untitled Text Field',
    },
    defaultUiSchema: {
      'ui:widget': 'TextWidget',
      'ui:options': {
        placeholder: 'Enter text...',
      },
    },
  },
  {
    type: 'number',
    label: 'Number',
    icon: PiNumberCircleOne,
    defaultSchema: {
      type: 'number',
      title: 'Untitled Number Field',
    },
    defaultUiSchema: {
      'ui:widget': 'NumberWidget',
      'ui:options': {
        unit: '',
        enabledInputs: ['inputBox'],
      },
    },
  },
  {
    type: 'boolean',
    label: 'Boolean',
    icon: PiToggleLeft,
    defaultSchema: {
      type: 'boolean',
      title: 'Untitled Boolean Field',
    },
    defaultUiSchema: {
      'ui:widget': 'BooleanWidget',
      'ui:options': {
        displayAs: 'checkbox', // or 'toggle'
        trueLabel: 'Yes',
        falseLabel: 'No',
      },
    },
  },
    {
    type: 'singleChoice',
    label: 'Single Choice',
    icon: PiListNumbers,
    defaultSchema: {
      type: 'string',
      title: 'Untitled Single Choice',
      enum: ['option1', 'option2'],
      enumNames: ['Option 1', 'Option 2'],
    },
    defaultUiSchema: {
      'ui:widget': 'ChoiceWidget',
      'ui:options': {
        displayAs: 'radio', // or 'dropdown'
      },
    },
  },
    {
    type: 'multipleChoice',
    label: 'Multiple Choice',
    icon: PiListDashes,
    defaultSchema: {
      type: 'array',
      title: 'Untitled Multiple Choice',
      items: {
        type: 'string',
        enum: ['option1', 'option2'],
        enumNames: ['Option 1', 'Option 2'],
      },
      uniqueItems: true,
    },
    defaultUiSchema: {
      'ui:widget': 'ChoiceWidget',
      'ui:options': {
        displayAs: 'checkboxGroup',
      },
    },
  },
];


###############################################################################
### FILE: data/index.ts
###############################################################################
export * from './mockData';
export * as preAnestesiaOptions from './preAnestesiaOptions';
export * as intraoperatoriaOptions from './intraoperatoriaOptions';


###############################################################################
### FILE: data/intraoperatoriaOptions.ts
###############################################################################
// src/data/intraoperatoriaOptions.ts
export interface OptionInfo { value: string; label: string; }

export const procedimentoOptions: OptionInfo[] = [
    { value: 'broncoscopia_flexivel', label: 'Broncoscopia flexível' },
    { value: 'broncoscopia_rigida', label: 'Broncoscopia rígida' },
];


###############################################################################
### FILE: data/mockData.ts
###############################################################################
import { Project } from '@/types';

export const mockProjects: Project[] = [
  {
    id: 'proj_crest_001',
    name: 'CREST - Estudo Piloto Alagoas',
    description: 'Coleta de dados para o projeto Respirar em cirurgias pediátricas de via aérea no estado de Alagoas.',
    goals: 'Desenvolver um protocolo ERAS específico para cirurgia de via aérea pediátrica, visando reduzir complicações e tempo de internação.',
    members: [
      { userId: 'userLead123', roles: ['ProjectLead', 'Researcher', 'FormDesigner', 'DataEntry'] },
      { userId: 'user456', roles: ['DataEntry', 'Researcher'] },
    ],
  },
  {
    id: 'proj_eras_002',
    name: 'ERAS Pediátrico - Hospital Central',
    description: 'Implementação e avaliação de protocolos ERAS em cirurgia torácica pediátrica no Hospital Central.',
    goals: 'Avaliar a eficácia do protocolo ERAS em reduzir o tempo de recuperação e complicações em pacientes pediátricos submetidos a cirurgia torácica.',
    members: [
      { userId: 'userLead123', roles: ['Researcher'] },
      { userId: 'anotherLeadUser', roles: ['ProjectLead'] },
    ],
  },
];


###############################################################################
### FILE: data/preAnestesiaOptions.ts
###############################################################################
// src/data/preAnestesiaOptions.ts
import { AutocompleteOption } from '@/types';

export const commonDiagnoses: AutocompleteOption[] = [
  { value: 'laringomalacia', label: 'Laringomalácia', icd10: 'J38.5' },
  { value: 'estenose_subglotica_congenita', label: 'Estenose subglótica congênita', icd10: 'Q31.1' },
];
export const allDiagnosesSample: AutocompleteOption[] = [
  ...commonDiagnoses,
  { value: 'estenose_traqueal_pos_intubacao', label: 'Estenose traqueal pós intubação', icd10: 'J95.5' }, 
];


###############################################################################
### FILE: index.css
###############################################################################
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --header-height: 64px;
    --radius: 0.75rem;

    /* Light Mode Palette */
    --background: 220 20% 98%;
    --foreground: 224 71.4% 4.1%;
    --card: 255 100% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 255 100% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 221.2 83.2% 53.3%;
  }

  .dark {
    /* Dark Mode Palette - Richer, deeper colors */
    --background: 225 25% 6%;
    --foreground: 210 20% 98%;
    --card: 225 25% 9%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 210 20% 98%;
    --secondary: 215 28% 17%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 28% 17%;
    --muted-foreground: 218 11% 65%;
    --accent: 215 28% 17%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 28% 17%;
    --input: 215 28% 17%;
    --ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  /* Sophisticated Static Gradient Mesh Background */
  body::before {
    content: '';
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    width: 100vw; height: 100vh;
    background: 
      radial-gradient(ellipse at 10% 15%, hsl(var(--primary) / 0.08), transparent 50%),
      radial-gradient(ellipse at 80% 20%, hsl(270 90% 55% / 0.08), transparent 50%),
      radial-gradient(ellipse at 20% 80%, hsl(200 90% 55% / 0.08), transparent 50%),
      radial-gradient(ellipse at 90% 85%, hsl(var(--primary) / 0.08), transparent 50%);
    z-index: -1;
    pointer-events: none;
  }
}

/* Utilities for gradient text effects */
@layer utilities {
    .text-gradient-primary {
      @apply bg-gradient-to-r from-brand-blue via-brand-indigo to-brand-purple text-transparent bg-clip-text;
    }
    .text-gradient-cool {
      @apply bg-gradient-to-r from-brand-emerald via-brand-teal to-brand-cyan text-transparent bg-clip-text;
    }
}


###############################################################################
### FILE: lib/utils.ts
###############################################################################
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


###############################################################################
### FILE: main.tsx
###############################################################################
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)


###############################################################################
### FILE: pages/CreateProjectPage.tsx
###############################################################################
// src/pages/CreateProjectPage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { PageHeader } from '@/components/ui/PageHeader';
import { Card, CardContent, CardFooter } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { InputField } from '@/components/ui/InputField';
import { TextareaField } from '@/components/ui/TextareaField';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import { PiPlus, PiArrowLeft } from 'react-icons/pi';

const CreateProjectPage: React.FC = () => {
  const navigate = useNavigate();
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [goals, setGoals] = useState('');
  const [error, setError] = useState('');
  const addProject = useProjectStore(state => state.addProject);
  const setActiveProject = useProjectStore(state => state.setActiveProject);
  const user = useAuthStore(state => state.user);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (!name.trim()) {
      setError('Project name is required.');
      return;
    }
    if (!user) {
      setError('You must be logged in to create a project.');
      return;
    }
    setError('');

    const newProject = {
      id: `proj_${new Date().getTime()}`,
      name,
      description,
      goals,
      members: [{ userId: user.id, roles: ['ProjectLead', 'Researcher'] }],
    };
    
    addProject(newProject);
    setActiveProject(newProject.id);
    navigate(`/project/${newProject.id}`);
  };

  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-4xl mx-auto space-y-6">
      <Button variant="ghost" onClick={() => navigate(-1)} className="self-start">
        <PiArrowLeft className="mr-2" />
        Back
      </Button>
      <PageHeader
        title="Create New Project"
        subtitle="Define the scope and goals of your new research initiative."
        icon={PiPlus}
      />
      <Card>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-6 pt-6">
            <InputField
              id="projectName"
              label="Project Name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="e.g., ERAS Protocol for Pediatric Thoracic Surgery"
              required
            />
            <TextareaField
              id="projectDescription"
              label="Project Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="A brief summary of the project's main purpose and scope."
              rows={4}
            />
            <TextareaField
              id="projectGoals"
              label="Project Goals"
              value={goals}
              onChange={(e) => setGoals(e.target.value)}
              placeholder="List the primary objectives and aims of this research project."
              rows={4}
            />
            {error && <p className="text-sm text-destructive">{error}</p>}
          </CardContent>
          <CardFooter>
            <Button type="submit" className="ml-auto">
              <PiPlus className="mr-2" />
              Create Project
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};

export default CreateProjectPage;


###############################################################################
### FILE: pages/DashboardPage.tsx
###############################################################################
// src/pages/DashboardPage.tsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import ProjectCard from '@/components/dashboard/ProjectCard';
import DashboardGreetingCard from '@/components/dashboard/DashboardGreetingCard';
import { Button } from '@/components/ui/Button';
import { PiUsersDuotone } from 'react-icons/pi';
import { Project } from '@/types';

const DashboardPage: React.FC = () => {
  const { availableProjects, fetchAvailableProjects, isLoading } = useProjectStore();
  const { user, isAuthenticated } = useAuthStore();
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated) {
      fetchAvailableProjects();
    }
  }, [isAuthenticated, fetchAvailableProjects]);
  
  const userProjects = user
    ? availableProjects.filter((p: Project) => p.members.some((m) => m.userId === user.id))
    : [];

  const handleCreateNewProject = () => navigate('/create-project');

  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto space-y-8 animate-fade-in">
      <DashboardGreetingCard onCreateNewProject={handleCreateNewProject} />

      <section>
        <h2 className="text-2xl font-bold text-foreground mb-4">My Projects</h2>
        {isLoading && userProjects.length === 0 && (
            <p className="text-muted-foreground">Loading projects...</p>
        )}
        {!isLoading && userProjects.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {userProjects.map((project: Project) => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
        ) : (
          !isLoading && (
            <div className="text-center py-16 bg-card border-2 border-dashed rounded-xl">
              <PiUsersDuotone className="text-5xl text-muted-foreground mx-auto mb-4" />
              <h3 className="text-xl font-semibold">No Projects Yet</h3>
              <p className="text-muted-foreground mt-2 mb-6">Get started by creating your first research project.</p>
              <Button onClick={handleCreateNewProject} size="lg" variant="gradient">Create a Project</Button>
            </div>
          )
        )}
      </section>
    </div>
  );
};

export default DashboardPage;


###############################################################################
### FILE: pages/DataSubmissionPage.tsx
###############################################################################
// src/pages/DataSubmissionPage.tsx
import React, { useState, useEffect } from 'react'; // FIX: Removed unused 'useCallback'
import { useSubmissionStore, FormDefinition } from '@/stores/submissionStore';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { PageHeader } from '@/components/ui/PageHeader';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/Card';
import { InputField } from '@/components/ui/InputField';
import DraftStatusBar from '@/components/forms/DraftStatusBar';
import DynamicFormRenderer from '@/components/forms/DynamicFormRenderer';
import { PiListChecksDuotone, PiArrowLeft, PiArrowRight, PiPaperPlaneTilt } from 'react-icons/pi';
import { cn } from '@/lib/utils';

// This component will be used for the Stepper UI
const SubmissionStepper: React.FC = () => {
    const { currentFormIndex, formSequence } = useSubmissionStore();
    const steps = [
        { key: 'patient', label: 'Patient Info' },
        ...formSequence.map(f => ({ key: f.key, label: f.name })),
        { key: 'review', label: 'Review & Submit' }
    ];
    const activeIndex = currentFormIndex + 1;

    return (
        <div className="mb-8 p-4 bg-muted/50 rounded-lg">
            <ol className="flex items-center w-full">
                {steps.map((step, index) => {
                    const isCompleted = index < activeIndex;
                    const isCurrent = index === activeIndex;
                    return (
                        <li key={step.key} className={cn(
                            "flex w-full items-center",
                            isCompleted ? 'text-primary' : 'text-muted-foreground',
                            index < steps.length - 1 ? "after:content-[''] after:w-full after:h-0.5 after:border-b after:border-border after:mx-4" : ""
                        )}>
                            <span className={cn(
                                "flex items-center justify-center w-8 h-8 rounded-full text-sm shrink-0",
                                isCurrent ? 'bg-primary text-primary-foreground' : isCompleted ? 'bg-primary/20' : 'bg-muted'
                            )}>
                                {index + 1}
                            </span>
                        </li>
                    );
                })}
            </ol>
        </div>
    );
};


const DataSubmissionPage: React.FC = () => {
    const { 
        patientData, 
        updatePatientData, 
        isEncounterActive, 
        startNewEncounter, 
        allFormsData,
        saveCurrentForm,
        completeAndClearEncounter,
        currentFormIndex,
        setCurrentFormIndex,
        formSequence,
    } = useSubmissionStore();

    const { schema, uiSchema, fieldOrder } = useFormBuilderStore();
    const MOCK_FORM_SEQUENCE: FormDefinition[] = [{ 
        key: 'form_from_builder', 
        name: schema.title, 
        version: '1.0',
        schemaPath: 'builder',
        uiSchemaPath: 'builder',
    }];

    const [currentStepFormData, setCurrentStepFormData] = useState({});

    useEffect(() => {
        if (isEncounterActive && currentFormIndex >= 0) {
            const currentFormKey = formSequence[currentFormIndex]?.key;
            if (currentFormKey) {
                setCurrentStepFormData(allFormsData[currentFormKey] || {});
            }
        }
    }, [currentFormIndex, isEncounterActive, allFormsData, formSequence]);

    const handleStart = () => {
        if (patientData?.initials && patientData?.gender && patientData?.dob && patientData.projectConsent) {
            startNewEncounter(patientData, MOCK_FORM_SEQUENCE);
        } else {
            alert("Please fill all required patient fields and provide consent.");
        }
    };
    
    const handlePatientFieldChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value, type, checked } = e.target;
        updatePatientData({ [id]: type === 'checkbox' ? checked : value });
    };

    const handleNavigate = (direction: 'next' | 'previous') => {
        if (currentFormIndex >= 0 && currentFormIndex < formSequence.length) {
            const currentFormKey = formSequence[currentFormIndex].key;
            saveCurrentForm(currentFormKey, currentStepFormData);
        }
        setCurrentFormIndex(currentFormIndex + (direction === 'next' ? 1 : -1));
    };

    const renderPatientInput = () => (
        <Card>
            <CardHeader><CardTitle>Patient Identification & Consent</CardTitle></CardHeader>
            <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <InputField label="Patient Initials" id="initials" type="text" value={patientData?.initials || ''} onChange={handlePatientFieldChange} required />
                    <InputField label="Gender" id="gender" type="text" value={patientData?.gender || ''} onChange={handlePatientFieldChange} required />
                    <InputField label="Date of Birth" id="dob" type="date" value={patientData?.dob || ''} onChange={handlePatientFieldChange} required />
                </div>
                <div className="flex items-start space-x-2 pt-4 border-t">
                    <input type="checkbox" id="projectConsent" checked={patientData?.projectConsent || false} onChange={handlePatientFieldChange} className="h-4 w-4 mt-1 accent-primary" />
                    <label htmlFor="projectConsent" className="text-sm text-muted-foreground">Confirm project-specific consent has been obtained. <span className="text-destructive">*</span></label>
                </div>
            </CardContent>
            <CardFooter>
                <Button onClick={handleStart} className="ml-auto">Start Data Collection</Button>
            </CardFooter>
        </Card>
    );

    const renderFormStep = () => {
        if (currentFormIndex < 0 || currentFormIndex >= formSequence.length) return null;
        
        const currentFormDef = formSequence[currentFormIndex];
        return (
            <Card>
                <CardHeader><CardTitle>{currentFormDef.name}</CardTitle></CardHeader>
                <CardContent>
                    <DynamicFormRenderer
                        schema={schema}
                        uiSchema={uiSchema}
                        formData={currentStepFormData}
                        onFormDataChange={setCurrentStepFormData}
                        fieldOrder={fieldOrder}
                    />
                </CardContent>
                <CardFooter className="justify-between">
                    <Button variant="outline" onClick={() => handleNavigate('previous')}><PiArrowLeft className="mr-2" /> Previous</Button>
                    <Button onClick={() => handleNavigate('next')}>Next <PiArrowRight className="ml-2" /></Button>
                </CardFooter>
            </Card>
        );
    };

    const renderReviewStep = () => (
        <Card>
            <CardHeader><CardTitle>Review & Submit</CardTitle></CardHeader>
            <CardContent className="space-y-4">
                <div>
                    <h3 className="font-semibold mb-2">Patient Information</h3>
                    <pre className="text-xs bg-muted p-3 rounded-md overflow-x-auto">{JSON.stringify(patientData, null, 2)}</pre>
                </div>
                {formSequence.map(formDef => (
                    <div key={formDef.key}>
                        <h3 className="font-semibold mb-2">{formDef.name}</h3>
                        <pre className="text-xs bg-muted p-3 rounded-md overflow-x-auto">{JSON.stringify(allFormsData[formDef.key] || { message: "No data entered for this form." }, null, 2)}</pre>
                    </div>
                ))}
            </CardContent>
            <CardFooter className="justify-between">
                <Button variant="outline" onClick={() => handleNavigate('previous')}><PiArrowLeft className="mr-2" /> Back to Edit</Button>
                <Button onClick={() => {
                    alert('Submitting all data to the backend (see console).');
                    console.log({ patientData, allFormsData });
                    completeAndClearEncounter();
                }}>
                    <PiPaperPlaneTilt className="mr-2" /> Submit Encounter
                </Button>
            </CardFooter>
        </Card>
    );

    const renderContent = () => {
        if (!isEncounterActive) {
            return renderPatientInput();
        }
        if (currentFormIndex >= 0 && currentFormIndex < formSequence.length) {
            return renderFormStep();
        }
        if (currentFormIndex === formSequence.length) {
            return renderReviewStep();
        }
        return null; // Should not happen
    };

    return (
        <div className="space-y-6">
            <PageHeader
                title="Data Submission"
                subtitle="Collect and submit clinical research data for your active project."
                icon={PiListChecksDuotone}
            />
            {isEncounterActive && <SubmissionStepper />}
            {renderContent()}
            <DraftStatusBar />
        </div>
    );
};

export default DataSubmissionPage;


###############################################################################
### FILE: pages/FormBuilderPage.tsx
###############################################################################
// src/pages/DashboardPage.tsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore'; // <-- FIX: Named import
import useAuthStore, { mockLogin } from '@/stores/authStore';
import ProjectCard from '@/components/dashboard/ProjectCard';
import DashboardGreetingCard from '@/components/dashboard/DashboardGreetingCard';
import { Button } from '@/components/ui/Button';
import { PiUsersDuotone } from 'react-icons/pi';
import { Project } from '@/types'; // <-- FIX: Import Project type

const DashboardPage: React.FC = () => {
  const { availableProjects, fetchAvailableProjects, isLoading } = useProjectStore();
  const { user, isAuthenticated } = useAuthStore();
  const navigate = useNavigate();

  useEffect(() => {
    if (!isAuthenticated) {
      mockLogin('userLead123');
    }
  }, [isAuthenticated]);

  useEffect(() => {
    if (isAuthenticated) {
      fetchAvailableProjects();
    }
  }, [isAuthenticated, fetchAvailableProjects]);
  
  const userProjects = user
    // FIX: Added type annotation for 'p' and 'm'
    ? availableProjects.filter((p: Project) => p.members.some(m => m.userId === user.id))
    : [];

  const handleCreateNewProject = () => navigate('/create-project');

  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto space-y-8">
      <DashboardGreetingCard onCreateNewProject={handleCreateNewProject} />

      <section>
        <h2 className="text-2xl font-bold text-foreground mb-4">My Projects</h2>
        {isLoading && userProjects.length === 0 && (
            <p className="text-muted-foreground">Loading projects...</p>
        )}
        {!isLoading && userProjects.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* FIX: Added type annotation for 'project' */}
            {userProjects.map((project: Project) => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
        ) : (
          !isLoading && (
            <div className="text-center py-12 bg-card border-2 border-dashed rounded-lg">
              <PiUsersDuotone className="text-4xl text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold">No Projects Yet</h3>
              <p className="text-muted-foreground mt-1 mb-4">Get started by creating your first research project.</p>
              <Button onClick={handleCreateNewProject}>Create a Project</Button>
            </div>
          )
        )}
      </section>
    </div>
  );
};

export default DashboardPage;


###############################################################################
### FILE: pages/NotFoundPage.tsx
###############################################################################
// src/pages/NotFoundPage.tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/Button';

const NotFoundPage: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-center h-[calc(100vh-var(--header-height))] text-center p-4">
      <h1 className="text-6xl font-bold text-primary">404</h1>
      <h2 className="text-2xl font-semibold mt-4 mb-2 text-foreground">Page Not Found</h2>
      <p className="text-muted-foreground mb-6">Sorry, the page you are looking for does not exist.</p>
      <Button asChild>
        <Link to="/">Go to Homepage</Link>
      </Button>
    </div>
  );
};

export default NotFoundPage;


###############################################################################
### FILE: pages/ProjectDetailsPage.tsx
###############################################################################
// src/pages/ProjectDetailsPage.tsx
import React, { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore'; // <-- FIX: Named import
import InfoWidget from '@/components/project/InfoWidget';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiUsersDuotone, PiFlagDuotone, PiHourglassSimpleDuotone, PiChartBarDuotone, PiFileTextDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { ProjectMember } from '@/types'; // <-- FIX: Import ProjectMember type

const ProjectDetailsPage: React.FC = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  const { setActiveProject, activeProjectDetails, isLoading } = useProjectStore();

  useEffect(() => {
    if (projectId && (!activeProjectDetails || activeProjectDetails.id !== projectId)) {
      setActiveProject(projectId);
    }
  }, [projectId, activeProjectDetails, setActiveProject]);
  
  if (isLoading && !activeProjectDetails) {
    return <div className="text-center"><p className="text-muted-foreground">Loading project details...</p></div>;
  }
  
  if (!activeProjectDetails) {
    return (
      <div className="text-center">
        <h1 className="text-xl font-semibold text-destructive">Project Not Found</h1>
        <p className="text-muted-foreground mt-2">Could not load details for project ID '{projectId}'.</p>
        <Button variant="outline" onClick={() => navigate('/')} className="mt-6">Back to Dashboard</Button>
      </div>
    );
  }

  const { name, description, members, goals } = activeProjectDetails;

  return (
    <div className="space-y-6">
      <PageHeader
        title={name}
        subtitle={description}
        icon={PiFileTextDuotone}
        gradient="secondary"
      />
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <InfoWidget title="Data Status" icon={PiChartBarDuotone}>
          <div className="text-2xl font-bold">1,234</div>
          <p className="text-xs text-muted-foreground">Total Submissions (Mock)</p>
        </InfoWidget>
        <InfoWidget title="Team Members" icon={PiUsersDuotone}>
           <div className="text-2xl font-bold">{members.length}</div>
           <p className="text-xs text-muted-foreground">Active Collaborators</p>
        </InfoWidget>
        <InfoWidget title="Project Phase" icon={PiHourglassSimpleDuotone}>
            <div className="text-2xl font-bold">Data Collection</div>
           <p className="text-xs text-muted-foreground">Current Status (Mock)</p>
        </InfoWidget>
         <InfoWidget title="Goals" icon={PiFlagDuotone}>
            <div className="text-2xl font-bold">3</div>
           <p className="text-xs text-muted-foreground">Primary Objectives (Mock)</p>
        </InfoWidget>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2">
           <InfoWidget title="Project Goals" icon={PiFlagDuotone}>
             <p className="text-sm text-foreground whitespace-pre-wrap">{goals || 'No goals specified for this project.'}</p>
           </InfoWidget>
        </div>
        <div className="lg:col-span-1">
          <InfoWidget title="Team Members" icon={PiUsersDuotone}>
            <div className="space-y-3">
              {/* FIX: Added type annotation for 'member' */}
              {members.map((member: ProjectMember) => (
                <div key={member.userId} className="flex items-center">
                  <img src={`https://ui-avatars.com/api/?name=${encodeURIComponent(member.userId)}&background=random&size=32&color=fff&font-size=0.40&bold=true`} alt={member.userId} className="w-8 h-8 rounded-full mr-3"/>
                  <div>
                    <p className="text-sm font-medium">{member.userId}</p>
                    <p className="text-xs text-muted-foreground">{member.roles.join(', ')}</p>
                  </div>
                </div>
              ))}
            </div>
          </InfoWidget>
        </div>
      </div>
    </div>
  );
};

export default ProjectDetailsPage;


###############################################################################
### FILE: pages/SettingsPage.tsx
###############################################################################
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';

const SettingsPage: React.FC = () => {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Settings</h1>
        <p className="text-muted-foreground mt-1">Manage your account and preferences.</p>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Profile</CardTitle>
        </CardHeader>
        <CardContent>
          <p>User profile settings will be here.</p>
        </CardContent>
      </Card>
    </div>
  );
};

export default SettingsPage;


###############################################################################
### FILE: stores/authStore.ts
###############################################################################
import { create } from 'zustand';
import { User } from '@/types';
import { useProjectStore } from '@/stores/projectStore';

interface AuthState {
  isAuthenticated: boolean;
  user: User | null;
  activeProjectRoles: string[];
  login: (userData: User) => void;
  logout: () => void;
  setProjectRoles: (roles: string[]) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  isAuthenticated: false,
  user: null,
  activeProjectRoles: [],
  login: (userData) => set({ isAuthenticated: true, user: userData, activeProjectRoles: [] }),
  logout: () => {
    set({ isAuthenticated: false, user: null, activeProjectRoles: [] });
    useProjectStore.getState().clearActiveProject();
  },
  setProjectRoles: (roles) => set({ activeProjectRoles: roles }),
}));

// Mock actions for development
export const mockLogin = (userId: string) => {
  const user: User = {
    id: userId,
    name: userId === 'userLead123' ? 'Dr. User Lead' : 'Mock User',
    email: userId === 'userLead123' ? 'dr.lead@example.com' : 'mock.user@example.com',
  };
  useAuthStore.getState().login(user);
};

export const mockLogout = () => useAuthStore.getState().logout();

export default useAuthStore;


###############################################################################
### FILE: stores/formBuilderStore.ts
###############################################################################
// src/stores/formBuilderStore.ts
import { create } from 'zustand';
import { produce } from 'immer';
import { FieldPrimitiveType, FORM_BUILDER_PRIMITIVES } from '@/config/formBuilder.config';

export interface FormSchema {
  title: string;
  description: string;
  type: 'object';
  properties: { [key: string]: any };
  required?: string[];
}

export interface FormUiSchema {
  [key: string]: {
    'ui:widget': string;
    'ui:options'?: { [key:string]: any };
    [key: string]: any;
  };
}

interface FormBuilderState {
  schema: FormSchema;
  uiSchema: FormUiSchema;
  selectedFieldId: string | null;
  fieldOrder: string[];
}

interface FormBuilderActions {
  setForm: (form: { schema: FormSchema; uiSchema: FormUiSchema }) => void;
  setMetadata: (data: { title?: string; description?: string }) => void;
  addField: (primitiveType: FieldPrimitiveType) => void;
  removeField: (fieldId: string) => void;
  updateFieldSchema: (fieldId: string, newSchemaProps: any) => void;
  updateFieldUiOptions: (fieldId: string, newUiOptions: any) => void;
  setSelectedFieldId: (fieldId: string | null) => void;
  setFieldOrder: (newOrder: string[]) => void;
  // New actions for raw editing
  setRawSchema: (schemaString: string) => void;
  setRawUiSchema: (uiSchemaString: string) => void;
}

const initialSchema: FormSchema = {
  title: 'Untitled Form',
  description: 'This is a new form created with the CREST Form Builder.',
  type: 'object',
  properties: {},
};

const initialUiSchema: FormUiSchema = {};

export const useFormBuilderStore = create<FormBuilderState & FormBuilderActions>((set) => ({
  schema: initialSchema,
  uiSchema: initialUiSchema,
  selectedFieldId: null,
  fieldOrder: [],

  setForm: (form) => set({
    schema: form.schema,
    uiSchema: form.uiSchema,
    fieldOrder: Object.keys(form.schema.properties),
    selectedFieldId: null,
  }),

  setMetadata: ({ title, description }) => set(produce((state: FormBuilderState) => {
    if (title !== undefined) state.schema.title = title;
    if (description !== undefined) state.schema.description = description;
  })),

  addField: (primitiveType) => {
    const primitive = FORM_BUILDER_PRIMITIVES.find(p => p.type === primitiveType);
    if (!primitive) return;
    const newFieldId = `${primitiveType}_${Date.now()}`;
    set(produce((state: FormBuilderState) => {
      state.schema.properties[newFieldId] = primitive.defaultSchema;
      state.uiSchema[newFieldId] = primitive.defaultUiSchema;
      state.fieldOrder.push(newFieldId);
      state.selectedFieldId = newFieldId;
    }));
  },

  removeField: (fieldId) => set(produce((state: FormBuilderState) => {
    delete state.schema.properties[fieldId];
    delete state.uiSchema[fieldId];
    state.fieldOrder = state.fieldOrder.filter(id => id !== fieldId);
    if (state.selectedFieldId === fieldId) {
      state.selectedFieldId = null;
    }
  })),

  updateFieldSchema: (fieldId, newSchemaProps) => set(produce((state: FormBuilderState) => {
    if (state.schema.properties[fieldId]) {
      Object.assign(state.schema.properties[fieldId], newSchemaProps);
    }
  })),

  updateFieldUiOptions: (fieldId, newUiOptions) => set(produce((state: FormBuilderState) => {
    if (state.uiSchema[fieldId]?.['ui:options']) {
      Object.assign(state.uiSchema[fieldId]['ui:options'], newUiOptions);
    }
  })),
  
  setSelectedFieldId: (fieldId) => set({ selectedFieldId: fieldId }),
  
  setFieldOrder: (newOrder) => set({ fieldOrder: newOrder }),

  setRawSchema: (schemaString) => {
    try {
      const parsedSchema = JSON.parse(schemaString);
      set(produce((state: FormBuilderState) => {
        state.schema = parsedSchema;
        // Resync field order
        state.fieldOrder = Object.keys(parsedSchema.properties || {});
      }));
    } catch (e) {
      console.error("Invalid Schema JSON:", e);
    }
  },

  setRawUiSchema: (uiSchemaString) => {
    try {
      const parsedUiSchema = JSON.parse(uiSchemaString);
      set({ uiSchema: parsedUiSchema });
    } catch (e) {
      console.error("Invalid UI Schema JSON:", e);
    }
  },
}));


###############################################################################
### FILE: stores/index.ts
###############################################################################
export interface User {
    id: string;
    name: string;
    email: string;
  }
  
  export interface ProjectMember {
    userId: string;
    roles: string[];
  }
  
  export interface Project {
    id: string;
    name: string;
    description: string;
    goals?: string;
    members: ProjectMember[];
  }
  
  // Types for Dynamic Forms
  export interface AutocompleteOption {
    value: string;
    label: string;
    [key: string]: any;
  }
  
  export interface SelectedItem {
    value: string;
    label: string;
    [key: string]: any;
  }


###############################################################################
### FILE: stores/projectStore.ts
###############################################################################
// src/stores/projectStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { Project } from '@/types';
import { mockProjects } from '@/data/mockData';

interface ProjectState {
  availableProjects: Project[];
  activeProjectId: string | null;
  activeProjectDetails: Project | null;
  isLoading: boolean;
  error: string | null;
}

interface ProjectActions {
  fetchAvailableProjects: () => Promise<void>;
  setActiveProject: (projectId: string) => void;
  clearActiveProject: () => void;
  addProject: (newProject: Project) => void;
}

export const useProjectStore = create<ProjectState & ProjectActions>()(
  persist(
    (set, get) => ({
      // Initial state
      availableProjects: [],
      activeProjectId: null,
      activeProjectDetails: null,
      isLoading: false,
      error: null,

      // Actions
      fetchAvailableProjects: async () => {
        set({ isLoading: true, error: null });
        try {
          // Simulate API call
          await new Promise(resolve => setTimeout(resolve, 300)); 
          set({ availableProjects: mockProjects, isLoading: false });
        } catch (err) {
          const errorMessage = err instanceof Error ? err.message : 'Failed to fetch projects';
          set({ error: errorMessage, isLoading: false });
          console.error("Error fetching projects:", errorMessage);
        }
      },
      setActiveProject: (projectId) => {
        const project = get().availableProjects.find(p => p.id === projectId);
        if (project) {
          set({ activeProjectId: projectId, activeProjectDetails: project, error: null });
        } else {
          set({ error: `Project with ID ${projectId} not found.`, activeProjectId: null, activeProjectDetails: null });
        }
      },
      clearActiveProject: () => {
        set({ activeProjectId: null, activeProjectDetails: null });
      },
      addProject: (newProject) => {
        set(state => ({
          availableProjects: [...state.availableProjects, newProject]
        }));
      },
    }),
    {
      name: 'crest-project-storage', 
      storage: createJSONStorage(() => localStorage), 
      partialize: (state) => ({ activeProjectId: state.activeProjectId }), // Only persist activeProjectId
    }
  )
);


###############################################################################
### FILE: stores/submissionStore.ts
###############################################################################
// src/stores/submissionStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

export interface PatientInputData {
  initials: string;
  gender: string;
  dob: string;
  projectConsent: boolean;
}

export interface FormDefinition {
  key: string; 
  name: string;
  version: string;
  schemaPath: string;
  uiSchemaPath: string;
}

interface SubmissionState {
  isEncounterActive: boolean;
  patientData: PatientInputData | null;
  formSequence: FormDefinition[];
  currentFormIndex: number; // -1: patient input, 0 to n-1: forms, n: review
  allFormsData: { [formKey: string]: any };
  lastUpdateTimestamp: number | null;
}

interface SubmissionActions {
  startNewEncounter: (patientData: PatientInputData, sequence: FormDefinition[]) => void;
  saveCurrentForm: (formKey: string, data: any) => void;
  setCurrentFormIndex: (index: number) => void;
  updatePatientData: (patientData: Partial<PatientInputData>) => void;
  completeAndClearEncounter: () => void;
}

const initialPatientState: PatientInputData = {
    initials: '',
    gender: '',
    dob: '',
    projectConsent: false,
}

const initialState: SubmissionState = {
  isEncounterActive: false,
  patientData: initialPatientState,
  formSequence: [],
  currentFormIndex: -1,
  allFormsData: {},
  lastUpdateTimestamp: null,
};

export const useSubmissionStore = create<SubmissionState & SubmissionActions>()(
  persist(
    (set, get) => ({
      ...initialState,
      startNewEncounter: (patientData, sequence) => {
        set({
          isEncounterActive: true,
          patientData,
          formSequence: sequence,
          currentFormIndex: 0,
          allFormsData: {},
          lastUpdateTimestamp: Date.now(),
        });
      },
      saveCurrentForm: (formKey, data) => {
        set(state => ({
          allFormsData: { ...state.allFormsData, [formKey]: data },
          lastUpdateTimestamp: Date.now(),
        }));
      },
      setCurrentFormIndex: (index) => {
        const sequenceLength = get().formSequence.length;
        if (index >= -1 && index <= sequenceLength) {
          set({ currentFormIndex: index, lastUpdateTimestamp: Date.now() });
        }
      },
      updatePatientData: (updatedPatientData) => {
        set(state => ({
            patientData: { ...state.patientData!, ...updatedPatientData },
            lastUpdateTimestamp: Date.now(), // This was the only necessary change.
        }));
      },
      completeAndClearEncounter: () => {
        set({ ...initialState, patientData: initialPatientState });
      },
    }),
    {
      name: 'crest-submission-storage',
      storage: createJSONStorage(() => localStorage),
    }
  )
);


###############################################################################
### FILE: types/index.ts
###############################################################################
// src/types/index.ts
export interface User {
  id: string;
  name: string;
  email: string;
}

export interface ProjectMember {
  userId: string;
  roles: string[];
}

export interface Project {
  id: string;
  name: string;
  description: string;
  goals?: string; // <-- FIX: Added optional goals property
  members: ProjectMember[];
}

// Types for Dynamic Forms
export interface AutocompleteOption {
  value: string;
  label: string;
  [key: string]: any;
}

export interface SelectedItem {
  value: string;
  label: string;
  [key: string]: any;
}


###############################################################################
### FILE: vite-env.d.ts
###############################################################################
/// <reference types="vite/client" />



