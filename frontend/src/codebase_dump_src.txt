Project structure for '/c/Users/Galaxy/LEVI/projects/apps/crest-app/frontend/src':
===============================================================================
  App.css
  App.tsx
  assets/react.svg
  components/dashboard/DashboardGreetingCard.tsx
  components/dashboard/ProjectCard.tsx
  components/form-builder/Canvas.tsx
  components/form-builder/FormFieldWrapper.tsx
  components/form-builder/Inspector.tsx
  components/form-builder/JsonEditor.tsx
  components/form-builder/previews/AutocompletePreview.tsx
  components/form-builder/previews/QuickSelectButtons.tsx
  components/form-builder/previews/SelectedItemTags.tsx
  components/form-builder/previews/ToggledInputPreview.tsx
  components/form-builder/Toolbox.tsx
  components/form-builder-v2/CanvasV2.tsx
  components/form-builder-v2/InspectorV2.tsx
  components/form-builder-v2/ToolboxV2.tsx
  components/forms/DraftStatusBar.tsx
  components/forms/DynamicFormRenderer.tsx
  components/forms/PatientRegistrationModal.tsx
  components/forms/widgets/NumberWidget.tsx
  components/layout/ContextSwitcher.tsx
  components/layout/NavMenu.tsx
  components/layout/Sidebar.tsx
  components/layout/SidebarLayout.tsx
  components/layout/TopBar.tsx
  components/project/InfoWidget.tsx
  components/ui/Button.tsx
  components/ui/Card.tsx
  components/ui/Checkbox.tsx
  components/ui/Combobox.tsx
  components/ui/Command.tsx
  components/ui/Dialog.tsx
  components/ui/Input.tsx
  components/ui/InputField.tsx
  components/ui/Label.tsx
  components/ui/MultiAutocompleteInput.tsx
  components/ui/PageHeader.tsx
  components/ui/Popover.tsx
  components/ui/RadioGroup.tsx
  components/ui/Select.tsx
  components/ui/Slider.tsx
  components/ui/Stepper.tsx
  components/ui/Switch.tsx
  components/ui/Textarea.tsx
  components/ui/TextareaField.tsx
  config/formBuilder.config.ts
  data/index.ts
  data/intraoperatoriaOptions.ts
  data/mockData.ts
  data/mockForms.ts
  data/preAnestesiaOptions.ts
  index.css
  lib/utils.ts
  main.tsx
  pages/CreateProjectPage.tsx
  pages/DashboardPage.tsx
  pages/DataSubmissionPage.tsx
  pages/FormsLibraryPage.tsx
  pages/NotFoundPage.tsx
  pages/project/DataSubmissionsHubPage.tsx
  pages/project/EncounterPage.tsx
  pages/project/MembersAndRolesPage.tsx
  pages/project/ProjectFormBuilderPage.tsx
  pages/project/ProjectFormBuilderPageV2.tsx
  pages/project/ProjectOverviewPage.tsx
  pages/ProjectDetailsPage.tsx
  pages/ProjectsListPage.tsx
  pages/SettingsPage.tsx
  stores/authStore.ts
  stores/formBuilderStore.ts
  stores/formBuilderStore.v2.ts
  stores/projectStore.ts
  stores/submissionStore.ts
  stores/uiStore.ts
  types/index.ts
  vite-env.d.ts



###############################################################################
### FILE: App.css
###############################################################################
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



###############################################################################
### FILE: App.tsx
###############################################################################
// src/App.tsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';

// Layout Components
import TopBar from '@/components/layout/TopBar';
import SidebarLayout from '@/components/layout/SidebarLayout';

// Top-Level Pages
import DashboardPage from '@/pages/DashboardPage';
import ProjectsListPage from '@/pages/ProjectsListPage';      
import FormsLibraryPage from '@/pages/FormsLibraryPage';
import SettingsPage from '@/pages/SettingsPage';
import CreateProjectPage from '@/pages/CreateProjectPage';
import NotFoundPage from '@/pages/NotFoundPage';

// Project Workspace Pages
import ProjectOverviewPage from '@/pages/project/ProjectOverviewPage';
import DataSubmissionsHubPage from '@/pages/project/DataSubmissionsHubPage';
import ProjectFormBuilderPage from '@/pages/project/ProjectFormBuilderPage';
import ProjectFormBuilderPageV2 from '@/pages/project/ProjectFormBuilderPageV2';
import MembersAndRolesPage from '@/pages/project/MembersAndRolesPage';
import EncounterPage from '@/pages/project/EncounterPage';

function App() {
  return (
    <div className="min-h-screen bg-background">
      <TopBar />
      <main className="pt-[var(--header-height)]">
        <Routes>
          {/* --- Global Routes (No Project Sidebar) --- */}
          <Route path="/" element={<DashboardPage />} />
          <Route path="/projects" element={<ProjectsListPage />} />
          <Route path="/forms" element={<FormsLibraryPage />} />
          <Route path="/settings" element={<SettingsPage />} />
          <Route path="/create-project" element={<CreateProjectPage />} />

          {/* --- Project Workspace (With Project Sidebar) --- */}
          <Route element={<SidebarLayout />}>
            <Route path="/project/:projectId/overview" element={<ProjectOverviewPage />} />
            <Route path="/project/:projectId/submissions" element={<DataSubmissionsHubPage />} />
            {/* + ADD ROUTE FOR A NEW ENCOUNTER */}
            <Route path="/project/:projectId/submissions/new" element={<EncounterPage />} />
            {/* + ADD ROUTE FOR AN EXISTING ENCOUNTER */}
            <Route path="/project/:projectId/submissions/:encounterId" element={<EncounterPage />} />
            <Route path="/project/:projectId/builder" element={<ProjectFormBuilderPage />} />
            <Route path="/project/:projectId/builder-v2" element={<ProjectFormBuilderPageV2 />} />
            <Route path="/project/:projectId/members" element={<MembersAndRolesPage />} />
            <Route path="/project/:projectId" element={<ProjectOverviewPage />} />
          </Route>

          {/* --- Catch-all Not Found Route --- */}
          <Route path="*" element={<NotFoundPage />} />
        </Routes>
      </main>
    </div>
  );
}

export default App;


###############################################################################
### FILE: assets/react.svg
###############################################################################
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>


###############################################################################
### FILE: components/dashboard/DashboardGreetingCard.tsx
###############################################################################
// src/components/dashboard/DashboardGreetingCard.tsx
import React from 'react';
import { PiPlusCircleDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import useAuthStore from '@/stores/authStore';

interface DashboardGreetingCardProps {
  onCreateNewProject: () => void;
}
const DashboardGreetingCard: React.FC<DashboardGreetingCardProps> = ({ onCreateNewProject }) => {
  const { user } = useAuthStore();

  return (
    <section className="relative p-8 rounded-xl shadow-lg border bg-card overflow-hidden">
      {/* Animated background glows */}
      <div className="absolute top-0 left-0 w-1/2 h-1/2 bg-gradient-to-br from-brand-blue/30 to-transparent rounded-full filter blur-3xl opacity-50 animate-pulse"></div>
      <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-gradient-to-tl from-brand-purple/30 to-transparent rounded-full filter blur-3xl opacity-50 animation-delay-2000 animate-pulse"></div>
      
      <div className="relative z-10 flex flex-col md:flex-row items-start md:items-center justify-between gap-6">
        <div className="flex-1">
          <h1 className="text-3xl md:text-4xl font-bold text-foreground">
            Welcome back, <span className="text-gradient-primary">{user?.name || 'User'}</span>!
          </h1>
          <p className="mt-2 text-muted-foreground text-lg max-w-xl">
            This is your launchpad. Manage projects, track progress, and drive your research forward.
          </p>
        </div>
        <div className="shrink-0 mt-4 md:mt-0">
          <Button
            size="lg"
            onClick={onCreateNewProject}
            variant="gradient"
            className="animate-pulse-glow"
          >
            <PiPlusCircleDuotone className="w-6 h-6 mr-2" />
            Create New Project
          </Button>
        </div>
      </div>
    </section>
  );
};

export default DashboardGreetingCard;


###############################################################################
### FILE: components/dashboard/ProjectCard.tsx
###############################################################################
// src/components/dashboard/ProjectCard.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Project } from '@/types';
import { useProjectStore } from '@/stores/projectStore';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { PiArrowRight, PiUsersDuotone } from 'react-icons/pi';
import { cn } from '@/lib/utils';

interface ProjectCardProps {
  project: Project;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ project }) => {
  const navigate = useNavigate();
  const setActiveProject = useProjectStore(state => state.setActiveProject);

  const handleProjectClick = () => {
    setActiveProject(project.id);
    navigate(`/project/${project.id}/overview`);
  };

  return (
    <Card className="flex flex-col h-full transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
      <CardHeader>
        <CardTitle>{project.name}</CardTitle>
        <CardDescription className="line-clamp-3 min-h-[60px]">{project.description}</CardDescription>
      </CardHeader>
      
      {/* This content area is now a flexible spacer that will grow */}
      <CardContent className="flex-grow" />

      {/* 
        THE FIX: 
        1. mt-auto pushes this entire footer to the bottom of the card.
        2. flex, items-center, and justify-between align the members count and the button.
      */}
      <CardFooter className="mt-auto flex items-center justify-between">
        <p className="text-sm text-muted-foreground flex items-center">
            <PiUsersDuotone className="mr-2"/>
            {project.members.length} Members
        </p>
        <Button onClick={handleProjectClick} variant="secondary" className="group">
          View Project
          <PiArrowRight className="ml-2 transition-transform group-hover:translate-x-1" />
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ProjectCard;


###############################################################################
### FILE: components/form-builder-v2/CanvasV2.tsx
###############################################################################
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { useFormBuilderStoreV2, Field } from '@/stores/formBuilderStore.v2';
import { PiTrash, PiCopy, PiPlus, PiDotsSixVerticalBold, PiCaretDown, PiCaretRight } from 'react-icons/pi';
import { cn } from '@/lib/utils';
import { InputField } from '@/components/ui/InputField';
import { Checkbox } from '@/components/ui/Checkbox';
import { RadioGroup, RadioGroupItem } from '@/components/ui/RadioGroup';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/Select';
import { Slider } from '@/components/ui/Slider';
import Stepper from '@/components/ui/Stepper';
import { DndContext, closestCenter, DragEndEvent, PointerSensor, KeyboardSensor, useSensor, useSensors, useDroppable } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy, useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { Switch } from '@/components/ui/Switch';
import { Combobox } from '@/components/ui/Combobox';
import { Input } from '@/components/ui/Input';
import { AnimatePresence, motion } from 'framer-motion';
import { MultiAutocompleteInput } from '../ui/MultiAutocompleteInput';

// Allow custom CSS properties
interface CSSPropertiesWithVars extends React.CSSProperties {
  [key: `--${string}`]: string | number;
}

const BUTTON_COLOR_MAP: { [key: string]: { selected: string; unselected: string } } = {
  primary: { selected: 'bg-primary text-primary-foreground hover:bg-primary/90', unselected: 'border-primary text-primary hover:bg-primary/10' },
  secondary: { selected: 'bg-slate-500 text-white hover:bg-slate-600', unselected: 'border-slate-500 text-slate-600 hover:bg-slate-500/10' },
  accent: { selected: 'bg-amber-500 text-white hover:bg-amber-600', unselected: 'border-amber-500 text-amber-600 hover:bg-amber-500/10' },
  success: { selected: 'bg-emerald-500 text-white hover:bg-emerald-600', unselected: 'border-emerald-500 text-emerald-600 hover:bg-emerald-500/10' },
  warning: { selected: 'bg-orange-500 text-white hover:bg-orange-600', unselected: 'border-orange-500 text-orange-600 hover:bg-orange-500/10' },
  danger: { selected: 'bg-red-500 text-white hover:bg-red-600', unselected: 'border-red-500 text-red-600 hover:bg-red-500/10' },
  blue: { selected: 'bg-blue-500 text-white hover:bg-blue-600', unselected: 'border-blue-500 text-blue-600 hover:bg-blue-500/10' },
  indigo: { selected: 'bg-indigo-500 text-white hover:bg-indigo-600', unselected: 'border-indigo-500 text-indigo-600 hover:bg-indigo-500/10' },
  purple: { selected: 'bg-purple-500 text-white hover:bg-purple-600', unselected: 'border-purple-500 text-purple-600 hover:bg-purple-500/10' },
  pink: { selected: 'bg-pink-500 text-white hover:bg-pink-600', unselected: 'border-pink-500 text-pink-600 hover:bg-pink-500/10' },
  teal: { selected: 'bg-teal-500 text-white hover:bg-teal-600', unselected: 'border-teal-500 text-teal-600 hover:bg-teal-500/10' },
  cyan: { selected: 'bg-cyan-500 text-white hover:bg-cyan-600', unselected: 'border-cyan-500 text-cyan-600 hover:bg-cyan-500/10' },
};

type FontSize = 'sm' | 'base' | 'lg';

// Field preview component that shows how the field will look
const FieldPreview: React.FC<{ field: Field; fontSize?: FontSize }> = ({ field, fontSize = 'base' }) => {
  const { updateFieldDefaultValue } = useFormBuilderStoreV2();

  const handleValueChange = (value: any) => {
    updateFieldDefaultValue(field.id, value);
  };

  const labelClasses = {
    sm: 'text-xs',
    base: 'text-sm',
    lg: 'text-base'
  }[fontSize];

  const descriptionClasses = {
    sm: 'text-[11px]',
    base: 'text-xs',
    lg: 'text-sm'
  }[fontSize];

  const RequiredBadge = () => field.required ? (
    <div className={cn("font-semibold uppercase bg-destructive/10 text-destructive rounded-full px-2 py-0.5", 
      { 'text-[9px]': fontSize === 'sm', 'text-[10px]': fontSize === 'base', 'text-xs': fontSize === 'lg'}
    )}>
      Required
    </div>
  ) : null;

  const getChoiceGroupLayoutClasses = () => {
    const layout = field.options.layout || { style: 'auto' };
    if (layout.style === 'columns' && layout.columns) {
      return `grid grid-cols-${layout.columns} gap-x-6 gap-y-2 pt-1`;
    }
    // Default to 'auto'
    return "flex flex-wrap gap-x-6 gap-y-2 pt-1";
  };

  const getFieldPreview = () => {
    const isStructuredDefault = field.defaultValue && typeof field.defaultValue === 'object' && 'value' in field.defaultValue;

    const value = isStructuredDefault ? field.defaultValue.value : field.defaultValue;
    const isToggled = isStructuredDefault ? (field.defaultValue.toggled || false) : false;

    const onRendererValueChange = (newValue: any) => {
      if (isStructuredDefault) {
        handleValueChange({ ...field.defaultValue, value: newValue });
      } else {
        handleValueChange(newValue);
      }
    };

    const tempField = { ...field, defaultValue: value };

    if (field.options.togglable) {
      const handleToggle = (toggled: boolean) => {
        handleValueChange({ ...(isStructuredDefault ? field.defaultValue : { value }), toggled });
      };
      
      const hasValue = value !== null && value !== undefined && value !== '' && (!Array.isArray(value) || value.length > 0);

      const renderCollapsedValue = () => {
        if (!hasValue) return null;
        let displayValue = '';
        switch(field.type) {
            case 'number':
                displayValue = `${value}${field.options.unit || ''}`;
                break;
            case 'single-choice':
                displayValue = field.options.choices?.find(c => c.value === value)?.label || String(value);
                break;
            case 'multiple-choice':
                const labels = (value as string[]).map(v => field.options.choices?.find(c => c.value === v)?.label || v);
                displayValue = labels.join(', ');
                break;
            default:
                displayValue = String(value);
        }
        return <span className="text-muted-foreground ml-2 truncate">: {displayValue}</span>
      }

      return (
        <div className="space-y-1.5">
          <div className="flex items-center space-x-3">
             <Switch
              id={`toggle-${field.id}`}
              checked={isToggled}
              onCheckedChange={handleToggle}
            />
            <label htmlFor={`toggle-${field.id}`} className={cn("font-medium flex-1", labelClasses, "cursor-pointer truncate")}>
              {field.label}
            </label>
          </div>
          <AnimatePresence>
            {isToggled && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.2 }}
                className="overflow-hidden pl-10"
              >
                <div className="pt-2 pb-1 space-y-2">
                   <div className="flex justify-between items-start">
                      {field.description && <p className={cn("text-muted-foreground max-w-prose", descriptionClasses)}>{field.description}</p>}
                      <RequiredBadge />
                   </div>
                  <FieldRenderer field={tempField} fontSize={fontSize} onValueChange={onRendererValueChange} showLabel={false} />
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      );
    }
    
    return <FieldRenderer field={field} fontSize={fontSize} onValueChange={handleValueChange} showLabel={true} />
  };

  return <div className="p-3">{getFieldPreview()}</div>;
};

// This new component contains the original rendering logic from getFieldPreview
const FieldRenderer: React.FC<{ 
  field: Field, 
  fontSize: FontSize, 
  onValueChange: (value: any) => void,
  showLabel: boolean
}> = ({ field, fontSize, onValueChange: handleValueChange, showLabel }) => {
    const labelClasses = { sm: 'text-xs', base: 'text-sm', lg: 'text-base' }[fontSize];
    const descriptionClasses = { sm: 'text-[11px]', base: 'text-xs', lg: 'text-sm' }[fontSize];
    const RequiredBadge = () => field.required ? (
      <div className={cn("font-semibold uppercase bg-destructive/10 text-destructive rounded-full px-2 py-0.5", { 'text-[9px]': fontSize === 'sm', 'text-[10px]': fontSize === 'base', 'text-xs': fontSize === 'lg'})}>Required</div>
    ) : null;
    const getChoiceGroupLayoutClasses = () => {
      const layout = field.options.layout || { style: 'auto' };
      if (layout.style === 'columns' && layout.columns) {
        return `grid grid-cols-${layout.columns} gap-x-6 gap-y-2 pt-1`;
      }
      return "flex flex-wrap gap-x-6 gap-y-2 pt-1";
    };

    const getButtonColorClasses = (fieldColor: string, isSelected: boolean): string => {
      const color = fieldColor || 'primary';
      if (color.startsWith('#')) {
        return isSelected
          ? 'bg-[var(--field-color)] text-white hover:opacity-90 border-transparent'
          : 'border-[var(--field-color)] text-[var(--field-color)] hover:bg-[var(--field-color-light)]';
      }
      const styles = BUTTON_COLOR_MAP[color] || BUTTON_COLOR_MAP.primary;
      return isSelected ? styles.selected : styles.unselected;
    };

    const handleOtherInputChange = (otherValue: string) => {
        if (field.type === 'single-choice') {
            handleValueChange(otherValue);
        } else if (field.type === 'multiple-choice') {
            const currentSelected = new Set(Array.isArray(field.defaultValue) ? field.defaultValue : []);
            handleValueChange({
                selected: Array.from(currentSelected),
                otherValue: otherValue,
            });
        }
    };
    
    const handleOtherSelection = (isSelected: boolean) => {
        if (field.type === 'single-choice') {
            if (isSelected) {
                // Special value to indicate "Other" is selected, but text is empty
                handleValueChange('__OTHER_EMPTY__'); 
            }
        } else if (field.type === 'multiple-choice') {
            const currentSelected = new Set(Array.isArray(field.defaultValue?.selected) ? field.defaultValue.selected : []);
            if (isSelected) {
                currentSelected.add('__OTHER__');
            } else {
                currentSelected.delete('__OTHER__');
            }
            handleValueChange({
                selected: Array.from(currentSelected),
                otherValue: field.defaultValue?.otherValue || '',
            });
        }
    }

  switch (field.type) {
    case 'text':
      if (field.options.variant === 'autocomplete') {
        return (
          <fieldset>
            {showLabel && (
              <>
                <div className="flex items-center justify-between mb-1">
                  <legend className={cn("font-medium truncate", labelClasses)}>
                    {field.label}
                  </legend>
                  <RequiredBadge />
                </div>
                {field.description && <p className={cn("text-muted-foreground mb-2", descriptionClasses)}>{field.description}</p>}
              </>
            )}
            <MultiAutocompleteInput
              options={field.options.choices || []}
              value={field.defaultValue || { selected: [], custom: [] }}
              onChange={handleValueChange}
              placeholder={field.options.placeholder}
              color={field.styling.color}
            />
          </fieldset>
        );
      }
      // Default to plain text input
      return (
        <div className="space-y-1.5">
          {showLabel && (
            <>
              <div className="flex items-center justify-between">
                <label className={cn("font-medium", labelClasses)}>{field.label}</label>
                <RequiredBadge />
              </div>
              {field.description && <p className={cn("text-muted-foreground -mt-1", descriptionClasses)}>{field.description}</p>}
            </>
          )}
          <Input 
            type="text" 
            value={field.defaultValue || ''} 
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleValueChange(e.target.value)} 
            placeholder={field.options.placeholder || ''}
          />
        </div>
      );
    case 'date':
      return (
        <div className="space-y-1.5">
          {showLabel && (
            <>
              <div className="flex items-center justify-between">
                <label className={cn("font-medium", labelClasses)}>{field.label}</label>
                <RequiredBadge />
              </div>
              {field.description && <p className={cn("text-muted-foreground -mt-1", descriptionClasses)}>{field.description}</p>}
            </>
          )}
          <Input type="date" value={field.defaultValue || ''} onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleValueChange(e.target.value)} />
        </div>
      );
    case 'number':
      const enabledInputs = field.options.enabledInputs || ['input'];
      const value = field.defaultValue || 0;
      const minRule = field.validation?.find(r => r.type === 'min');
      const maxRule = field.validation?.find(r => r.type === 'max');
      const min = minRule ? Number(minRule.value) : undefined;
      const max = maxRule ? Number(maxRule.value) : undefined;

      return (
        <div className="space-y-1.5">
          {showLabel && (
            <>
              <div className="flex items-center justify-between">
                <label className={cn("font-medium", labelClasses)}>{field.label}</label>
                <RequiredBadge />
              </div>
              {field.description && <p className={cn("text-muted-foreground -mt-1", descriptionClasses)}>{field.description}</p>}
            </>
          )}
          
          <div className="space-y-3 pt-2">
            <div className="flex flex-col sm:flex-row sm:items-center gap-4">
              {enabledInputs.includes('input') && (
                <div className="relative w-full sm:w-40">
                  <Input
                    type="number"
                    value={value}
                    onChange={(e) => handleValueChange(e.target.valueAsNumber)}
                    min={min}
                    max={max}
                    className={cn(field.options.unit ? "pr-12" : "")}
                  />
                  {field.options.unit && (
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <span className="text-muted-foreground sm:text-sm">{field.options.unit}</span>
                    </div>
                  )}
                </div>
              )}
              {enabledInputs.includes('stepper') && (
                <Stepper
                  value={value}
                  onValueChange={handleValueChange}
                  min={min}
                  max={max}
                />
              )}
            </div>
            {enabledInputs.includes('slider') && (
              <Slider
                value={[value]}
                onValueChange={(vals) => handleValueChange(vals[0])}
                min={min}
                max={max}
                step={1}
              />
            )}
          </div>
        </div>
      );
    case 'boolean':
      if (field.options.displayAs === 'switch') {
        return (
          <div className="flex items-start space-x-3 p-2">
            <Switch
              id={`preview-${field.id}`}
              checked={field.defaultValue || false}
              onCheckedChange={(checked: boolean) => handleValueChange(checked)}
              className="mt-1"
            />
            <div className="grid gap-1.5">
              {showLabel && (
                <>
                  <div className="flex items-center justify-between">
                    <label htmlFor={`preview-${field.id}`} className={cn("font-medium leading-none", labelClasses)}>
                      {field.label}
                    </label>
                    <RequiredBadge />
                  </div>
                  {field.description && <p className={cn("text-muted-foreground", descriptionClasses)}>{field.description}</p>}
                </>
              )}
            </div>
          </div>
        );
      }
      return (
        <div className="flex items-start space-x-3 p-2">
          <Checkbox
            id={`preview-${field.id}`}
            checked={field.defaultValue || false}
            onChange={(e) => handleValueChange(e.target.checked)}
            className="mt-1"
          />
          <div className="grid gap-1.5">
            {showLabel && (
              <>
                <div className="flex items-center justify-between">
                  <label htmlFor={`preview-${field.id}`} className={cn("font-medium leading-none", labelClasses)}>
                    {field.label}
                  </label>
                  <RequiredBadge />
                </div>
                {field.description && <p className={cn("text-muted-foreground", descriptionClasses)}>{field.description}</p>}
              </>
            )}
          </div>
        </div>
      );
    case 'single-choice': {
      const singleChoices = field.options.choices || [];
      const fallbackLabel = field.options.textFallbackLabel || 'Other';

      // This is a new, more complex value structure
      const defaultValue = field.defaultValue || { selected: [], custom: [] };
      
      const isPredefinedValue = typeof defaultValue === 'string' && singleChoices.some(c => c.value === defaultValue);
      
      // Adapt the value for the MultiAutocompleteInput
      const otherValues = {
        selected: isPredefinedValue ? [defaultValue] : [],
        custom: typeof defaultValue === 'string' && !isPredefinedValue ? [defaultValue] : []
      };

      const renderFallbackInput = () => (
        field.options.textFallback && (
          <div className="mt-2 space-y-2">
            <label className={cn("text-sm font-medium", labelClasses)}>{fallbackLabel}</label>
            <MultiAutocompleteInput
              options={[]} // No predefined "other" options, only custom
              value={otherValues}
              onChange={(newVal) => {
                // For single choice, we only care about the last custom value entered
                const customValue = newVal.custom.length > 0 ? newVal.custom[newVal.custom.length - 1] : null;
                handleValueChange(customValue);
              }}
              placeholder="Type to add custom value..."
              color={field.styling.color}
            />
          </div>
        )
      );

      if (field.options.displayAs === 'radio') {
        return (
          <fieldset>
            {showLabel && (
              <>
                <div className="flex items-center justify-between mb-1">
                  <legend className={cn("font-medium truncate", labelClasses)}>
                    {field.label}
                  </legend>
                  <RequiredBadge />
                </div>
                {field.description && <p className={cn("text-muted-foreground mb-2", descriptionClasses)}>{field.description}</p>}
              </>
            )}
            <RadioGroup
              value={isPredefinedValue ? field.defaultValue : ''}
              onValueChange={(value: string) => handleValueChange(value)}
              className={getChoiceGroupLayoutClasses()}
            >
              {singleChoices.map((choice) => (
                <div key={choice.value} className="flex items-center space-x-2">
                  <RadioGroupItem value={choice.value} id={`${field.id}-${choice.value}`} />
                  <label htmlFor={`${field.id}-${choice.value}`} className={cn("truncate", labelClasses)}>{choice.label}</label>
                </div>
              ))}
            </RadioGroup>
            {renderFallbackInput()}
          </fieldset>
        );
      } else { // Dropdown or Button Group
        if (field.options.displayAs === 'button-group') {
          return (
             <fieldset>
              {showLabel && (
                <>
                  <div className="flex items-center justify-between mb-1">
                    <legend className={cn("font-medium truncate", labelClasses)}>
                      {field.label}
                    </legend>
                    <RequiredBadge />
                  </div>
                  {field.description && <p className={cn("text-muted-foreground mb-2", descriptionClasses)}>{field.description}</p>}
                </>
              )}
              <div className={getChoiceGroupLayoutClasses()}>
                {singleChoices.map(choice => (
                  <Button
                    key={choice.value}
                    variant={choice.value === field.defaultValue ? 'default' : 'outline'}
                    onClick={() => handleValueChange(choice.value)}
                    className={getButtonColorClasses(field.styling.color, choice.value === field.defaultValue)}
                  >
                    {choice.label}
                  </Button>
                ))}
              </div>
              {renderFallbackInput()}
            </fieldset>
          )
        }
        // Default to Dropdown
        return (
          <div>
            {showLabel && (
              <>
                <div className="flex items-center justify-between mb-1">
                  <label htmlFor={`preview-${field.id}`} className={cn("font-medium", labelClasses)}>
                    {field.label}
                  </label>
                  <RequiredBadge />
                </div>
                {field.description && <p className={cn("text-muted-foreground -mt-1", descriptionClasses)}>{field.description}</p>}
              </>
            )}
            <Select 
              onValueChange={handleValueChange} 
              value={isPredefinedValue ? field.defaultValue : ''}
            >
                <SelectTrigger id={`preview-${field.id}`}>
                    <SelectValue placeholder="Select an option..." />
                </SelectTrigger>
                <SelectContent>
                    {singleChoices.map(choice => (
                        <SelectItem key={choice.value} value={choice.value}>
                            {choice.label}
                        </SelectItem>
                    ))}
                </SelectContent>
            </Select>
            {renderFallbackInput()}
          </div>
        )
      }
    }
    case 'multiple-choice': {
      const multiChoices = field.options.choices || [];
      
      const defaultValue = (field.defaultValue || {}) as { selected?: string[], custom?: string[] };
      const selectedValues = new Set(defaultValue.selected || []);
      const customValues = defaultValue.custom || [];
      const fallbackLabelMulti = field.options.textFallbackLabel || 'Other';

      const handleMultiChange = (newSelected: Set<string>, newCustom?: string[]) => {
        handleValueChange({
            selected: Array.from(newSelected),
            custom: newCustom !== undefined ? newCustom : customValues,
        });
      };
      
      const renderFallbackInput = () => (
        field.options.textFallback && (
          <div className="mt-2 space-y-2">
            <label className={cn("text-sm font-medium", labelClasses)}>{fallbackLabelMulti}</label>
            <MultiAutocompleteInput
              options={[]} // No predefined "other" options
              value={{ selected: [], custom: customValues }}
              onChange={(newVal) => handleMultiChange(selectedValues, newVal.custom)}
              placeholder="Type to add custom values..."
              color={field.styling.color}
            />
          </div>
        )
      );

      return (
        <fieldset>
          {showLabel && (
            <>
              <div className="flex items-center justify-between mb-1">
                <legend className={cn("font-medium truncate", labelClasses)}>
                  {field.label}
                </legend>
                <RequiredBadge />
              </div>
              {field.description && <p className={cn("text-muted-foreground mb-2", descriptionClasses)}>{field.description}</p>}
            </>
          )}
          
          {field.options.displayAs === 'button-group' && (
            <div className={getChoiceGroupLayoutClasses()}>
              {multiChoices.map(choice => {
                const isSelected = selectedValues.has(choice.value);
                return (
                  <Button
                    key={choice.value}
                    variant={isSelected ? 'default' : 'outline'}
                    onClick={() => {
                      const newSelected = new Set(selectedValues);
                      if (isSelected) {
                        newSelected.delete(choice.value);
                      } else {
                        newSelected.add(choice.value);
                      }
                      handleMultiChange(newSelected);
                    }}
                    className={getButtonColorClasses(field.styling.color, isSelected)}
                  >
                    {choice.label}
                  </Button>
                )
              })}
            </div>
          )}

          {field.options.displayAs !== 'button-group' && (
            <div className={getChoiceGroupLayoutClasses()}>
              {multiChoices.map((choice) => (
                <div key={choice.value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`${field.id}-${choice.value}`}
                    checked={selectedValues.has(choice.value)}
                    onChange={(e) => {
                      const newSelected = new Set(selectedValues);
                      if (e.target.checked) {
                        newSelected.add(choice.value);
                      } else {
                        newSelected.delete(choice.value);
                      }
                      handleMultiChange(newSelected);
                    }}
                  />
                  <label htmlFor={`${field.id}-${choice.value}`} className={cn("truncate", labelClasses)}>{choice.label}</label>
                </div>
              ))}
            </div>
          )}
          {renderFallbackInput()}
        </fieldset>
      );
    }
    default:
      return (
        <div className="p-2 border-dashed border-destructive bg-destructive/10 text-destructive text-xs rounded-md">
          Unhandled Field Type: <strong>{field.type}</strong>
        </div>
      );
  }
};

// Individual field component with selection and editing
const FieldComponent: React.FC<{ fieldId: string; sectionId: string; fontSize?: FontSize }> = ({ fieldId, sectionId, fontSize }) => {
  const { getField, selectField, selectedFieldId, removeField, duplicateField } = useFormBuilderStoreV2();
  const field = getField(fieldId);

  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ 
    id: fieldId, 
    data: { 
      type: 'field',
      fieldId,
      sectionId 
    } 
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  if (!field) return null;

  const isSelected = selectedFieldId === fieldId;

  const customColor = field.styling.color?.startsWith('#') ? field.styling.color : null;
  
  const fieldStyle: CSSPropertiesWithVars = {
    ...style
  };

  if (customColor) {
    fieldStyle['--field-color'] = customColor;
    fieldStyle['--field-color-light'] = `${customColor}1a`; // For background
  }

  // Define width classes based on field styling
  const widthClass = {
    compact: 'flex-[1_1_200px] max-w-xs',
    normal: 'flex-[2_1_320px] max-w-md',
    wide: 'flex-[3_1_450px] max-w-lg',
  }[field.styling.width || 'normal'];

  return (
    <div
      ref={setNodeRef}
      style={fieldStyle}
      onClick={(e) => {
        e.stopPropagation();
        selectField(fieldId);
      }}
      className={cn(
        "bg-card border-2 rounded-lg shadow-sm relative group transition-all flex flex-col",
        widthClass, // Apply responsive width class
        isSelected ? 'border-primary shadow-lg' : 'border-transparent hover:border-slate-400 dark:hover:border-slate-600',
        customColor 
          ? 'border-[var(--field-color)] bg-[var(--field-color-light)]'
          : {
            'border-primary/50 bg-primary/5': field.styling.color === 'primary',
            'border-slate-500/50 bg-slate-500/5': field.styling.color === 'secondary',
            'border-amber-500/50 bg-amber-500/5': field.styling.color === 'accent',
            'border-emerald-500/50 bg-emerald-500/5': field.styling.color === 'success',
            'border-orange-500/50 bg-orange-500/5': field.styling.color === 'warning',
            'border-red-500/50 bg-red-500/5': field.styling.color === 'danger'
          },
        isDragging && 'shadow-2xl scale-105'
      )}
    >
      <div className="flex items-start flex-grow">
        {/* Drag handle */}
        <div 
          {...attributes} 
          {...listeners}
          className={cn(
            "p-2 sm:p-3 cursor-grab touch-none self-stretch flex items-center rounded-l-md transition-colors",
            isSelected ? 'bg-primary/20' : 'group-hover:bg-accent'
          )}
        >
          <PiDotsSixVerticalBold className="w-4 h-4" />
        </div>
        
        {/* Field content */}
        <div className="flex-grow min-w-0">
          <FieldPreview field={field} fontSize={fontSize} />
        </div>
        
        {/* Action buttons - always rendered, visibility controlled by opacity */}
        <div className={cn(
            "p-1 self-start flex flex-col gap-0.5 transition-opacity duration-200",
            isSelected ? "opacity-100" : "opacity-0 group-hover:opacity-100 focus-within:opacity-100"
        )}>
          <Button
            variant="ghost"
            size="icon"
            onClick={(e) => {
              e.stopPropagation();
              duplicateField(fieldId);
            }}
            className="h-7 w-7"
          >
            <PiCopy className="w-4 h-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            onClick={(e) => {
              e.stopPropagation();
              removeField(fieldId);
            }}
            className="h-7 w-7 text-destructive/80 hover:text-destructive hover:bg-destructive/10"
          >
            <PiTrash className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};

// Section component that can contain fields and be dragged
const SectionComponent: React.FC<{ sectionId: string }> = ({ sectionId }) => {
  const { getSection, addField, selectField, selectedFieldId, removeField, toggleSectionCollapse } = useFormBuilderStoreV2();
  const section = getSection(sectionId);

  const {
    attributes,
    listeners,
    setNodeRef: sortableRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ 
    id: sectionId, 
    data: { 
      type: 'section',
      sectionId 
    } 
  });

  const { setNodeRef: droppableRef, isOver } = useDroppable({ 
    id: sectionId,
    data: {
      type: 'section',
      sectionId
    }
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  if (!section) return null;

  const isSelected = selectedFieldId === sectionId;
  const isCollapsed = section.collapsed; // Do not automatically collapse when dragging

  const customColor = section.styling.color?.startsWith('#') ? section.styling.color : null;
  
  const sectionStyle: CSSPropertiesWithVars = {
    ...style
  };
  
  if (customColor) {
    sectionStyle['--section-color'] = customColor;
    sectionStyle['--section-color-light'] = `${customColor}1a`; // For background
  }

  // Apply section colors properly
  const getSectionColorClasses = (color: string) => {
    if (color.startsWith('#')) {
      return 'border-[var(--section-color)] bg-[var(--section-color-light)]';
    }
    switch (color) {
      case 'primary':
        return 'border-primary/50 bg-primary/5';
      case 'secondary':
        return 'border-slate-500/50 bg-slate-500/5';
      case 'accent':
        return 'border-amber-500/50 bg-amber-500/5';
      case 'success':
        return 'border-emerald-500/50 bg-emerald-500/5';
      case 'warning':
        return 'border-orange-500/50 bg-orange-500/5';
      case 'danger':
        return 'border-red-500/50 bg-red-500/5';
      default:
        return 'border-slate-500/50 bg-slate-500/5';
    }
  };

  const setCombinedRef = (node: HTMLElement | null) => {
    sortableRef(node);
    droppableRef(node);
  };

  return (
    <div
      ref={setCombinedRef}
      style={sectionStyle}
      onClick={(e) => {
        e.stopPropagation();
        selectField(sectionId);
      }}
      className={cn(
        "bg-card border-2 rounded-lg shadow-sm relative transition-all cursor-pointer",
        isSelected ? 'border-primary shadow-lg ring-2 ring-primary/20' : 'border-border hover:border-primary/50',
        getSectionColorClasses(section.styling.color),
        isDragging && 'shadow-2xl scale-105'
      )}
    >
      {/* Section header */}
      <div className="flex items-center justify-between p-3 sm:p-4 border-b">
        <div className="flex items-center gap-2 sm:gap-3 min-w-0 flex-1">
          <div 
            {...attributes} 
            {...listeners}
            className={cn(
              "p-1 sm:p-2 cursor-grab active:cursor-grabbing touch-none flex items-center rounded transition-colors flex-shrink-0",
              isSelected ? 'bg-primary/20' : 'hover:bg-accent'
            )}
          >
            <PiDotsSixVerticalBold className="w-4 h-4" />
          </div>
          
          {/* Collapse/Expand button */}
          <Button
            variant="ghost"
            size="sm"
            onClick={(e) => {
              e.stopPropagation();
              toggleSectionCollapse(sectionId);
            }}
            className="p-1 h-auto"
          >
            {isCollapsed ? (
              <PiCaretRight className="w-4 h-4" />
            ) : (
              <PiCaretDown className="w-4 h-4" />
            )}
          </Button>
          
          <h3 className="font-semibold text-base sm:text-lg truncate">{section.title}</h3>
          <span className="text-xs text-muted-foreground">
            ({section.fields.length} field{section.fields.length !== 1 ? 's' : ''})
          </span>
        </div>
        
        <div className="flex items-center gap-1 sm:gap-2 flex-shrink-0">
          <Button
            size="sm"
            variant="outline"
            onClick={(e) => {
              e.stopPropagation();
              addField('text', sectionId);
            }}
            className="text-xs sm:text-sm"
          >
            <PiPlus className="w-3 h-3 sm:mr-1" />
            <span className="hidden sm:inline">Add Field</span>
          </Button>
          {isSelected && (
            <Button
              variant="ghost"
              size="sm"
              onClick={(e) => {
                e.stopPropagation();
                removeField(sectionId);
              }}
            >
              <PiTrash className="w-4 h-4" />
            </Button>
          )}
        </div>
      </div>
      
      {/* Section content - only show when not collapsed */}
      {!isCollapsed && (
        <div 
          className={cn(
            "p-3 sm:p-4 transition-colors",
            isOver && "bg-primary/10"
          )}
        >
          <SortableContext items={section.fields} strategy={verticalListSortingStrategy}>
            <div className="flex flex-wrap gap-3 sm:gap-4">
              {section.fields.length > 0 ? (
                section.fields.map(fieldId => (
                  <FieldComponent key={fieldId} fieldId={fieldId} sectionId={sectionId} fontSize={section.styling.fontSize} />
                ))
              ) : (
                <div className="col-span-full text-center py-6 sm:py-8 text-muted-foreground border-2 border-dashed rounded-lg">
                  <p className="text-sm">Drop fields here or click "Add Field"</p>
                </div>
              )}
            </div>
          </SortableContext>
        </div>
      )}
      
      {/* Collapsed state indicator */}
      {isCollapsed && !isDragging && (
        <div className="p-3 sm:p-4 text-center text-muted-foreground">
          <p className="text-sm">Section collapsed - click to expand</p>
        </div>
      )}
    </div>
  );
};

const CanvasV2: React.FC = () => {
  const { currentForm, addSection, selectField, moveField, moveSections } = useFormBuilderStoreV2();

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8, // Require 8px of movement before activating
      },
    }),
    useSensor(KeyboardSensor)
  );

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (!over || !currentForm || active.id === over.id) {
        return;
    }

    const activeId = active.id as string;
    const overId = over.id as string;
    
    const activeData = active.data.current;
    const overData = over.data.current;

    // Reordering sections
    if (activeData?.type === 'section') {
        const oldIndex = currentForm.layout.sections.findIndex(s => s.id === activeId);
        
        // Find the target section, even if we are hovering over a field within it
        const overSection = currentForm.layout.sections.find(s => s.id === overId || s.fields.includes(overId));
        if (!overSection) return;
        const newIndex = currentForm.layout.sections.findIndex(s => s.id === overSection.id);

        if (oldIndex !== -1 && newIndex !== -1) {
            moveSections(oldIndex, newIndex);
        }
        return;
    }
    
    // Reordering fields
    if (activeData?.type === 'field') {
        const activeSectionId = activeData.sectionId;
        let overSectionId = overData?.sectionId;
        let overIndex = -1;

        if (overData?.type === 'section') {
            // Dropping a field onto a section container
            overSectionId = overData.sectionId;
            const overSection = currentForm.layout.sections.find(s => s.id === overSectionId);
            overIndex = overSection?.fields.length ?? 0;
        } else if (overData?.type === 'field') {
            // Dropping a field onto another field
            overSectionId = overData.sectionId;
            const overSection = currentForm.layout.sections.find(s => s.id === overSectionId);
            overIndex = overSection?.fields.indexOf(overId) ?? 0;
        }

        if (activeSectionId && overSectionId && overIndex > -1 && (activeSectionId !== overSectionId || overIndex !== active.data.current?.index)) {
             moveField(activeId, overSectionId, overIndex);
        }
    }
  };

  if (!currentForm) {
    return (
      <Card className="h-full flex flex-col">
        <CardHeader>
          <CardTitle className="text-lg sm:text-xl">Form Canvas</CardTitle>
          <CardDescription className="hidden sm:block">No form loaded</CardDescription>
        </CardHeader>
        <CardContent className="flex-grow flex items-center justify-center">
          <div className="text-center">
            <p className="text-muted-foreground mb-4 text-sm sm:text-base">
              <span className="hidden sm:inline">Create a new form or load an existing one to start building</span>
              <span className="sm:hidden">Create or load a form</span>
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <DndContext 
      sensors={sensors} 
      collisionDetection={closestCenter} 
      onDragEnd={handleDragEnd}
    >
      <Card className="h-full flex flex-col">
        <CardHeader className="flex-shrink-0 p-4 sm:p-6">
          <div className="flex items-center justify-between gap-4">
            <div className="min-w-0 flex-1">
              <CardTitle className="text-lg sm:text-xl truncate">{currentForm.name}</CardTitle>
              <CardDescription className="hidden sm:block truncate">{currentForm.description}</CardDescription>
            </div>
            <Button onClick={addSection} variant="outline" size="sm" className="flex-shrink-0">
              <PiPlus className="w-4 h-4 sm:mr-2" />
              <span className="hidden sm:inline">Add Section</span>
            </Button>
          </div>
        </CardHeader>
        
        <CardContent 
          className="flex-grow overflow-auto p-4 sm:p-6"
          onClick={() => selectField(null)} // Deselect when clicking empty space
        >
          <SortableContext items={currentForm.layout.sections.map(s => s.id)} strategy={verticalListSortingStrategy}>
            <div className="space-y-4 sm:space-y-6">
              {currentForm.layout.sections.length > 0 ? (
                currentForm.layout.sections.map(section => (
                  <SectionComponent key={section.id} sectionId={section.id} />
                ))
              ) : (
                <div className="text-center py-8 sm:py-12 border-2 border-dashed rounded-lg">
                  <p className="text-muted-foreground mb-4 text-sm sm:text-base">
                    <span className="hidden sm:inline">Your form is empty</span>
                    <span className="sm:hidden">Form is empty</span>
                  </p>
                  <Button onClick={addSection} size="sm">
                    <PiPlus className="w-4 h-4 mr-2" />
                    <span className="hidden sm:inline">Add Your First Section</span>
                    <span className="sm:hidden">Add Section</span>
                  </Button>
                </div>
              )}
            </div>
          </SortableContext>
        </CardContent>
      </Card>
    </DndContext>
  );
};

export default CanvasV2; 


###############################################################################
### FILE: components/form-builder-v2/InspectorV2.tsx
###############################################################################
import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { InputField } from '@/components/ui/InputField';
import { TextareaField } from '@/components/ui/TextareaField';
import { Checkbox } from '@/components/ui/Checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select';
import { useFormBuilderStoreV2, Field } from '@/stores/formBuilderStore.v2';
import { PiTrash, PiPlus, PiPaintBrushBroadDuotone } from 'react-icons/pi';
import { cn } from '@/lib/utils';
import { Switch } from '@/components/ui/Switch';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Label } from '@/components/ui/Label';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/Popover';
import { HexColorPicker } from 'react-colorful';

// Expanded color palette configuration
const COLOR_PALETTE = [
  { name: 'primary', label: 'Primary', className: 'bg-primary hover:bg-primary/80', borderClass: 'border-primary' },
  { name: 'secondary', label: 'Secondary', className: 'bg-slate-500 hover:bg-slate-600', borderClass: 'border-slate-500' },
  { name: 'accent', label: 'Accent', className: 'bg-amber-500 hover:bg-amber-600', borderClass: 'border-amber-500' },
  { name: 'success', label: 'Success', className: 'bg-emerald-500 hover:bg-emerald-600', borderClass: 'border-emerald-500' },
  { name: 'warning', label: 'Warning', className: 'bg-orange-500 hover:bg-orange-600', borderClass: 'border-orange-500' },
  { name: 'danger', label: 'Danger', className: 'bg-red-500 hover:bg-red-600', borderClass: 'border-red-500' },
  // Adding more colors
  { name: 'blue', label: 'Blue', className: 'bg-blue-500 hover:bg-blue-600', borderClass: 'border-blue-500' },
  { name: 'indigo', label: 'Indigo', className: 'bg-indigo-500 hover:bg-indigo-600', borderClass: 'border-indigo-500' },
  { name: 'purple', label: 'Purple', className: 'bg-purple-500 hover:bg-purple-600', borderClass: 'border-purple-500' },
  { name: 'pink', label: 'Pink', className: 'bg-pink-500 hover:bg-pink-600', borderClass: 'border-pink-500' },
  { name: 'teal', label: 'Teal', className: 'bg-teal-500 hover:bg-teal-600', borderClass: 'border-teal-500' },
  { name: 'cyan', label: 'Cyan', className: 'bg-cyan-500 hover:bg-cyan-600', borderClass: 'border-cyan-500' },
];

const ColorPalette: React.FC<{
  selectedColor: string;
  onColorChange: (color: string) => void;
}> = ({ selectedColor, onColorChange }) => {
  const isCustomColor = selectedColor && !COLOR_PALETTE.some(p => p.name === selectedColor);

  return (
    <div className="space-y-3">
      <div className="grid grid-cols-6 gap-px bg-border rounded-md overflow-hidden border">
        {COLOR_PALETTE.map((color) => (
          <button
            key={color.name}
            type="button"
            onClick={() => onColorChange(color.name)}
            className={cn(
              "w-full aspect-square transition-all",
              color.className,
              selectedColor === color.name
                ? `ring-2 ring-offset-1 ring-offset-background ring-primary`
                : 'hover:scale-110'
            )}
            title={color.label}
          />
        ))}
      </div>

      <Popover>
        <PopoverTrigger asChild>
          <Button variant="outline" className="w-full justify-start text-sm">
             <div className="flex items-center gap-2">
                <div
                  className="w-5 h-5 rounded border"
                  style={{ backgroundColor: isCustomColor ? selectedColor : 'hsl(var(--muted))' }}
                />
                <span className={cn(!isCustomColor && "text-muted-foreground")}>
                  {isCustomColor ? selectedColor.toUpperCase() : 'Custom...'}
                </span>
             </div>
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0 border-none">
            <HexColorPicker
              color={isCustomColor ? selectedColor : '#aabbcc'}
              onChange={onColorChange}
            />
        </PopoverContent>
      </Popover>
    </div>
  );
};

const ChoiceEditor: React.FC<{ 
  choices: { value: string; label: string; color?: string }[], 
  onChange: (choices: { value: string; label: string; color?: string }[]) => void 
}> = ({ choices, onChange }) => {

  const generateValue = (label: string) => {
    return label
      .toLowerCase()
      .replace(/\s+/g, '_')
      .replace(/[^\w-]/g, '') || `option_${Math.random().toString(36).substr(2, 5)}`;
  };

  const addChoice = () => {
    const newLabel = `Option ${choices.length + 1}`;
    const newValue = generateValue(newLabel);
    onChange([...choices, { value: newValue, label: newLabel }]);
  };

  const updateChoiceLabel = (index: number, newLabel: string) => {
    const newChoices = choices.map((choice, i) => {
      if (i === index) {
        // Also update the value when the label changes, to keep them in sync
        return { ...choice, label: newLabel, value: generateValue(newLabel) };
      }
      return choice;
    });
    onChange(newChoices);
  };

  const updateChoiceColor = (index: number, color: string) => {
    const newChoices = choices.map((choice, i) => {
      if (i === index) {
        return { ...choice, color };
      }
      return choice;
    });
    onChange(newChoices);
  };

  const removeChoice = (index: number) => {
    onChange(choices.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <label className="text-sm font-medium">
          <span className="hidden sm:inline">Choices</span>
          <span className="sm:hidden">Options</span>
        </label>
        <Button size="sm" variant="outline" onClick={addChoice}>
          <PiPlus className="w-3 h-3 sm:mr-1" />
          <span className="hidden sm:inline">Add Choice</span>
        </Button>
      </div>
      
      <div className="space-y-2">
        {choices.map((choice, index) => (
          <div key={index} className="flex items-center gap-2 p-1 border rounded">
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  size="icon"
                  className={cn("h-8 w-8 flex-shrink-0", choice.color && `bg-${choice.color}-500/80 hover:bg-${choice.color}-500`)}
                >
                  <PiPaintBrushBroadDuotone />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <div className="p-2">
                  <ColorPalette selectedColor={choice.color || ''} onColorChange={(color) => updateChoiceColor(index, color)} />
                </div>
              </PopoverContent>
            </Popover>
            <Input
              id={`choice-label-${index}`}
              placeholder="Choice Label"
              value={choice.label}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateChoiceLabel(index, e.target.value)}
              className="flex-1 text-xs min-w-0 h-8"
            />
            <Button
              size="icon"
              variant="ghost"
              onClick={() => removeChoice(index)}
              className="flex-shrink-0 h-8 w-8"
            >
              <PiTrash className="w-4 h-4" />
            </Button>
          </div>
        ))}
      </div>
      
      {choices.length === 0 && (
        <p className="text-xs text-muted-foreground text-center py-4">
          <span className="hidden sm:inline">No choices added yet</span>
          <span className="sm:hidden">No options</span>
        </p>
      )}
    </div>
  );
};

const InspectorV2: React.FC = () => {
  const { selectedFieldId, getField, updateField, removeField, getSection, updateSection } = useFormBuilderStoreV2();
  const [localField, setLocalField] = useState<Field | null>(null);

  const selectedField = selectedFieldId ? getField(selectedFieldId) : null;
  const selectedSection = selectedFieldId ? getSection(selectedFieldId) : null;

  // Update local state when selection changes
  useEffect(() => {
    if (selectedField) {
      setLocalField({ ...selectedField });
    } else {
      setLocalField(null);
    }
  }, [selectedField]);

  const updateLocalField = (updates: Partial<Field>) => {
    if (localField && selectedFieldId) {
      const newField = { ...localField, ...updates };
      setLocalField(newField);
      updateField(selectedFieldId, newField);
    }
  };

  const updateLocalOptions = (optionUpdates: any) => {
    if (localField && selectedFieldId) {
      const newField = {
        ...localField,
        options: { ...localField.options, ...optionUpdates }
      };
      setLocalField(newField);
      updateField(selectedFieldId, newField);
    }
  };

  const updateLocalStyling = (stylingUpdates: any) => {
    if (localField && selectedFieldId) {
       const newField = {
        ...localField,
        styling: { ...localField.styling, ...stylingUpdates }
      };
      setLocalField(newField);
      updateField(selectedFieldId, newField);
    }
  };

  const handleSectionColorChange = (color: string) => {
    if (selectedSection && selectedFieldId) {
      updateSection(selectedFieldId, {
        styling: { ...selectedSection.styling, color }
      });
    }
  };

  // Handle choice updates
  const handleChoicesChange = (choices: { value: string; label: string; color?: string }[]) => {
    updateLocalOptions({ choices });
  };

  if (!selectedFieldId) {
    return (
      <Card className="h-full flex flex-col">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className="text-lg sm:text-xl">
            <span className="hidden sm:inline">Inspector</span>
            <span className="sm:hidden">Edit</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-grow flex items-center justify-center p-4">
          <div className="text-center">
            <p className="text-muted-foreground text-sm">
              <span className="hidden sm:inline">Select a field or section to edit its properties</span>
              <span className="sm:hidden">Select item to edit</span>
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Section inspector
  if (selectedSection && !selectedField) {
    return (
      <Card className="h-full flex flex-col">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className="text-lg sm:text-xl">
            <span className="hidden sm:inline">Section Properties</span>
            <span className="sm:hidden">Section</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4 p-4 sm:p-6">
          <InputField
            id="section-title"
            label="Section Title"
            value={selectedSection.title}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateSection(selectedFieldId, { title: e.target.value })}
          />
          
          {/* Section styling */}
          <div className="pt-4 border-t space-y-4">
            <h4 className="font-medium">
              <span className="hidden sm:inline">Styling</span>
              <span className="sm:hidden">Style</span>
            </h4>
            
            <div>
              <label className="text-sm font-medium mb-3 block">Color</label>
              <ColorPalette
                selectedColor={selectedSection.styling.color}
                onColorChange={handleSectionColorChange}
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-3 block">Font Size</label>
              <div className="flex justify-stretch gap-2">
                <Button
                  size="sm"
                  variant={selectedSection.styling.fontSize === 'sm' ? 'default' : 'outline'}
                  onClick={() => updateSection(selectedFieldId, { styling: { ...selectedSection.styling, fontSize: 'sm' } })}
                  className="flex-1"
                >
                  Small
                </Button>
                <Button
                  size="sm"
                  variant={(selectedSection.styling.fontSize === 'base' || !selectedSection.styling.fontSize) ? 'default' : 'outline'}
                  onClick={() => updateSection(selectedFieldId, { styling: { ...selectedSection.styling, fontSize: 'base' } })}
                  className="flex-1"
                >
                  Normal
                </Button>
                <Button
                  size="sm"
                  variant={selectedSection.styling.fontSize === 'lg' ? 'default' : 'outline'}
                  onClick={() => updateSection(selectedFieldId, { styling: { ...selectedSection.styling, fontSize: 'lg' } })}
                  className="flex-1"
                >
                  Large
                </Button>
              </div>
            </div>
          </div>

          <div className="pt-4 border-t">
            <Button
              variant="destructive"
              onClick={() => removeField(selectedFieldId)}
              className="w-full"
              size="sm"
            >
              <PiTrash className="w-4 h-4 mr-2" />
              <span className="hidden sm:inline">Delete Section</span>
              <span className="sm:hidden">Delete</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Field inspector
  if (!localField) return null;

  const updateValidationRule = (ruleType: 'min' | 'max', value: number | undefined) => {
    if (!localField) return;
    const otherRules = localField.validation?.filter(r => r.type !== ruleType) || [];
    let newRules = [...otherRules];
    if (value !== undefined && !isNaN(value)) {
      const message = ruleType === 'min' 
        ? `Value must be at least ${value}` 
        : `Value must be no more than ${value}`;
      newRules.push({ type: ruleType, value, message });
    }
    updateLocalField({ validation: newRules });
  };
  
  const handleLayoutChange = (style: 'auto' | 'columns', columns?: number) => {
    updateLocalOptions({ layout: { style, columns } });
  };

  const layout = localField.options.layout || { style: 'auto' };

  // Determine which column options are enabled based on field width
  const isCompact = localField.styling.width === 'compact';
  const isNormal = localField.styling.width === 'normal' || !localField.styling.width;

  const showChoiceLayout = (localField.type === 'single-choice' && localField.options.displayAs !== 'dropdown') || localField.type === 'multiple-choice';

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="p-4 sm:p-6">
        <CardTitle className="text-lg sm:text-xl">
          <span className="hidden sm:inline">Field Properties</span>
          <span className="sm:hidden">Field</span>
        </CardTitle>
        <p className="text-sm text-muted-foreground capitalize">
          <span className="hidden sm:inline">{localField.type.replace('-', ' ')} Field</span>
          <span className="sm:hidden">{localField.type.replace('-', ' ')}</span>
        </p>
      </CardHeader>
      
      <CardContent className="flex-grow overflow-auto space-y-4 p-4 sm:p-6">
        {/* Basic Properties */}
        <div className="space-y-4">
          <div>
            <Label htmlFor="field-label">Label</Label>
            <Input
              id="field-label"
              value={localField.label}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateLocalField({ label: e.target.value })}
            />
          </div>
          <div>
            <Label htmlFor="field-description">Description</Label>
            <Textarea
              id="field-description"
              value={localField.description}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateLocalField({ description: e.target.value })}
            />
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox
              id="field-required"
              checked={localField.required}
              onChange={(e) => updateLocalField({ required: e.target.checked })}
            />
            <label htmlFor="field-required" className="text-sm font-medium">
              Required field
            </label>
          </div>
          <div className="flex items-center justify-between rounded-lg border p-3 shadow-sm">
            <div className="space-y-0.5">
              <label htmlFor="field-togglable" className="text-sm font-medium">Togglable Input</label>
              <p className="text-xs text-muted-foreground">Make this field collapsible.</p>
            </div>
            <Switch
              id="field-togglable"
              checked={localField.options.togglable}
              onCheckedChange={(checked) => updateLocalOptions({ togglable: checked })}
            />
          </div>
        </div>

        {/* Type-specific options */}
        <div className="pt-4 border-t space-y-4">
          <h4 className="font-medium">
            <span className="hidden sm:inline">Field Options</span>
            <span className="sm:hidden">Options</span>
          </h4>
          
          {localField.type === 'text' && (
            <div className="space-y-4">
              <div>
                <Label>Variant</Label>
                <Select
                    value={localField.options.variant || 'text'}
                    onValueChange={(value: 'text' | 'autocomplete') => updateLocalOptions({ variant: value, defaultValue: value === 'autocomplete' ? { selected: [], custom: []} : '' })}
                >
                    <SelectTrigger className="mt-1">
                        <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="text">Plain Text</SelectItem>
                        <SelectItem value="autocomplete">Autocomplete (Tags)</SelectItem>
                    </SelectContent>
                </Select>
              </div>

              <InputField
                id="text-placeholder"
                label="Placeholder Text"
                value={localField.options.placeholder || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateLocalOptions({ placeholder: e.target.value })}
              />

              {localField.options.variant === 'autocomplete' && (
                 <ChoiceEditor
                    choices={localField.options.choices || []}
                    onChange={handleChoicesChange}
                  />
              )}
            </div>
          )}

          {localField.type === 'number' && (
            <div className="space-y-3">
              <InputField
                id="number-unit"
                label="Unit"
                value={localField.options.unit || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateLocalOptions({ unit: e.target.value })}
                placeholder="e.g., kg, mmHg, %"
              />
              <div className="grid grid-cols-2 gap-2">
                 <InputField
                    id="number-min"
                    label="Min Value"
                    type="number"
                    placeholder="None"
                    value={localField.validation?.find(r => r.type === 'min')?.value ?? ''}
                    onChange={(e) => updateValidationRule('min', e.target.valueAsNumber)}
                  />
                  <InputField
                    id="number-max"
                    label="Max Value"
                    type="number"
                    placeholder="None"
                    value={localField.validation?.find(r => r.type === 'max')?.value ?? ''}
                    onChange={(e) => updateValidationRule('max', e.target.valueAsNumber)}
                  />
              </div>
              
              <div>
                <label className="text-sm font-medium">
                  <span className="hidden sm:inline">Input Types</span>
                  <span className="sm:hidden">Types</span>
                </label>
                <div className="mt-2 space-y-2">
                  {['input', 'slider', 'stepper'].map((inputType) => (
                    <div key={inputType} className="flex items-center space-x-2">
                      <Checkbox
                        id={`input-${inputType}`}
                        checked={localField.options.enabledInputs?.includes(inputType) || false}
                        onChange={(e) => {
                          const current = localField.options.enabledInputs || ['input'];
                          const updated = e.target.checked
                            ? [...current, inputType]
                            : current.filter(t => t !== inputType);
                          updateLocalOptions({ enabledInputs: updated });
                        }}
                      />
                      <label htmlFor={`input-${inputType}`} className="text-sm capitalize">
                        {inputType}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {localField.type === 'boolean' && (
            <div className="flex items-center justify-between rounded-lg border p-3 shadow-sm">
              <div className="space-y-0.5">
                <label htmlFor="display-as-switch" className="text-sm font-medium">Toggle Switch</label>
                <p className="text-xs text-muted-foreground">Display as a switch instead of a checkbox.</p>
              </div>
              <Switch
                id="display-as-switch"
                checked={localField.options.displayAs === 'switch'}
                onCheckedChange={(checked) => updateLocalOptions({ displayAs: checked ? 'switch' : 'checkbox' })}
              />
            </div>
          )}

          {(localField.type === 'single-choice' || localField.type === 'multiple-choice') && (
            <div className="space-y-4">
              <ChoiceEditor
                choices={localField.options.choices || []}
                onChange={handleChoicesChange}
              />
              
              <div>
                <label className="text-sm font-medium">
                  <span className="hidden sm:inline">Display As</span>
                  <span className="sm:hidden">Display</span>
                </label>
                <Select
                  value={localField.options.displayAs || (localField.type === 'single-choice' ? 'radio' : 'checkboxGroup')}
                  onValueChange={(value: string) => updateLocalOptions({ displayAs: value })}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {localField.type === 'single-choice' ? (
                      <>
                        <SelectItem value="radio">Radio Buttons</SelectItem>
                        <SelectItem value="dropdown">Dropdown</SelectItem>
                        <SelectItem value="button-group">Button Group</SelectItem>
                      </>
                    ) : (
                      <>
                        <SelectItem value="checkboxGroup">Checkboxes</SelectItem>
                        <SelectItem value="button-group">Button Group</SelectItem>
                      </>
                    )}
                  </SelectContent>
                </Select>
              </div>

              <div className="pt-4 border-t space-y-3">
                <div className="flex items-center justify-between rounded-lg border p-3 shadow-sm">
                  <div className="space-y-0.5">
                    <label htmlFor="text-fallback" className="text-sm font-medium">Text Fallback</label>
                    <p className="text-xs text-muted-foreground">Allow a free-text "Other" option.</p>
                  </div>
                  <Switch
                    id="text-fallback"
                    checked={localField.options.textFallback}
                    onCheckedChange={(checked) => updateLocalOptions({ textFallback: checked })}
                  />
                </div>
                {localField.options.textFallback && (
                  <InputField
                    id="text-fallback-label"
                    label="Fallback Label"
                    placeholder="e.g., Other, Specify"
                    value={localField.options.textFallbackLabel || ''}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateLocalOptions({ textFallbackLabel: e.target.value })}
                  />
                )}
              </div>

              {showChoiceLayout && (
                <div className="pt-2 border-t">
                  <label className="text-sm font-medium">Choice Layout</label>
                  <div className="mt-2 flex justify-stretch gap-2">
                    <Button
                      size="sm"
                      variant={layout.style === 'auto' ? 'default' : 'outline'}
                      onClick={() => handleLayoutChange('auto')}
                      className="flex-1"
                    >
                      Auto
                    </Button>
                    <Button
                      size="sm"
                      disabled={isCompact}
                      variant={layout.style === 'columns' && layout.columns === 2 ? 'default' : 'outline'}
                      onClick={() => handleLayoutChange('columns', 2)}
                      className="flex-1"
                    >
                      2 Col
                    </Button>
                    <Button
                      size="sm"
                      disabled={isCompact || isNormal}
                      variant={layout.style === 'columns' && layout.columns === 3 ? 'default' : 'outline'}
                      onClick={() => handleLayoutChange('columns', 3)}
                      className="flex-1"
                    >
                      3 Col
                    </Button>
                    <Button
                      size="sm"
                      disabled
                      variant={layout.style === 'columns' && layout.columns === 4 ? 'default' : 'outline'}
                      onClick={() => handleLayoutChange('columns', 4)}
                      className="flex-1"
                    >
                      4 Col
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Styling */}
        <div className="pt-4 border-t space-y-4">
          <h4 className="font-medium">
            <span className="hidden sm:inline">Styling</span>
            <span className="sm:hidden">Style</span>
          </h4>
          
          <div>
            <label className="text-sm font-medium mb-3 block">Color</label>
            <ColorPalette
              selectedColor={localField.styling.color}
              onColorChange={(color) => updateLocalStyling({ color })}
            />
          </div>

          <div>
            <label className="text-sm font-medium mb-3 block">Width</label>
            <div className="flex justify-stretch gap-2">
              <Button
                size="sm"
                variant={localField.styling.width === 'compact' ? 'default' : 'outline'}
                onClick={() => updateLocalStyling({ width: 'compact' })}
                className="flex-1"
              >
                Compact
              </Button>
              <Button
                size="sm"
                variant={localField.styling.width === 'normal' || !localField.styling.width ? 'default' : 'outline'}
                onClick={() => updateLocalStyling({ width: 'normal' })}
                className="flex-1"
              >
                Normal
              </Button>
              <Button
                size="sm"
                variant={localField.styling.width === 'wide' ? 'default' : 'outline'}
                onClick={() => updateLocalStyling({ width: 'wide' })}
                className="flex-1"
              >
                Wide
              </Button>
            </div>
          </div>
        </div>

        {/* Actions */}
        <div className="pt-4 border-t">
          <Button
            variant="destructive"
            onClick={() => removeField(selectedFieldId)}
            className="w-full"
            size="sm"
          >
            <PiTrash className="w-4 h-4 mr-2" />
            <span className="hidden sm:inline">Delete Field</span>
            <span className="sm:hidden">Delete</span>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default InspectorV2; 


###############################################################################
### FILE: components/form-builder-v2/ToolboxV2.tsx
###############################################################################
import React from 'react';
import { Button } from '@/components/ui/Button';
import { useFormBuilderStoreV2, FieldType } from '@/stores/formBuilderStore.v2';
import { 
  PiTextT, 
  PiNumberCircleOne, 
  PiToggleLeft, 
  PiListNumbers, 
  PiListDashes, 
  PiCalendarDuotone,
  PiSparkleDuotone
} from 'react-icons/pi';

interface FieldTypeButton {
  type: FieldType;
  label: string;
  shortLabel?: string; // For mobile
  icon: React.ComponentType<any>;
  description: string;
}

const fieldTypes: FieldTypeButton[] = [
  {
    type: 'text',
    label: 'Text',
    shortLabel: 'Text',
    icon: PiTextT,
    description: 'Single line text input'
  },
  {
    type: 'number',
    label: 'Number',
    shortLabel: 'Num',
    icon: PiNumberCircleOne,
    description: 'Numeric input with units'
  },
  {
    type: 'boolean',
    label: 'Boolean',
    shortLabel: 'Bool',
    icon: PiToggleLeft,
    description: 'Yes/No checkbox'
  },
  {
    type: 'single-choice',
    label: 'Single Choice',
    shortLabel: 'Single',
    icon: PiListNumbers,
    description: 'Radio buttons or dropdown'
  },
  {
    type: 'multiple-choice',
    label: 'Multiple Choice',
    shortLabel: 'Multi',
    icon: PiListDashes,
    description: 'Checkboxes for multiple selection'
  },
  {
    type: 'date',
    label: 'Date',
    shortLabel: 'Date',
    icon: PiCalendarDuotone,
    description: 'Date picker input'
  },
  /*
  {
    type: 'autocomplete-multiple',
    label: 'Autocomplete (Multi)',
    shortLabel: 'Auto (M)',
    icon: PiSparkleDuotone,
    description: 'Select from a list or add custom tags'
  }
  */
];

const ToolboxV2: React.FC = () => {
  const { addField, currentForm } = useFormBuilderStoreV2();

  const handleAddField = (type: FieldType) => {
    if (currentForm) {
      addField(type);
    }
  };

  return (
    <div className="p-3 bg-card/60 backdrop-blur-xl border-b rounded-b-lg shadow-md">
        <div className="flex items-center justify-center gap-2">
          {fieldTypes.map((fieldType) => (
            <Button
              key={fieldType.type}
              variant="ghost"
              onClick={() => handleAddField(fieldType.type)}
              disabled={!currentForm}
              className="h-auto p-3 flex flex-col items-center justify-center text-center hover:bg-primary/10 transition-all active:scale-95 aspect-square w-20"
            >
              <fieldType.icon className="w-6 h-6 mb-1 text-primary" />
              <div className="font-medium text-[11px] leading-tight">
                {fieldType.label}
              </div>
            </Button>
          ))}
        </div>
    </div>
  );
};

export default ToolboxV2; 


###############################################################################
### FILE: components/form-builder/Canvas.tsx
###############################################################################
// src/components/form-builder/Canvas.tsx
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/Card';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { DndContext, closestCenter, DragEndEvent, PointerSensor, KeyboardSensor, useSensor, useSensors } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';
import FormFieldWrapper from './FormFieldWrapper';
import { useDroppable } from '@dnd-kit/core';
import { cn } from '@/lib/utils';

const Canvas: React.FC = () => {
  const { schema, uiSchema, setOrder, moveField } = useFormBuilderStore();
  const rootOrder = uiSchema['ui:root']?.['ui:order'] || [];

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor)
  );
  
  const { setNodeRef, isOver } = useDroppable({ id: '__root__' });

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    
    if (!over) return;
    
    const activeId = active.id as string;
    const overId = over.id as string;

    if (activeId === overId) return;

    const activeParentId = active.data.current?.parentId || null;
    const overParentId = over.data.current?.isSection ? overId : over.data.current?.parentId || null;
    
    const activeContainer = activeParentId === null ? rootOrder : uiSchema[activeParentId]?.['ui:order'];
    const overContainer = overParentId === null ? rootOrder : uiSchema[overParentId]?.['ui:order'];

    if (!activeContainer || !overContainer) return;

    if (activeParentId === overParentId) {
      // Scenario 1: Reordering within the same container
      const oldIndex = activeContainer.indexOf(activeId);
      const newIndex = overContainer.indexOf(overId);
      if (oldIndex !== -1 && newIndex !== -1) {
        const newOrder = arrayMove(activeContainer, oldIndex, newIndex);
        setOrder(newOrder, activeParentId);
      }
    } else {
      // Scenario 2: Moving to a different container
      const overIndex = over.data.current?.isSection 
          ? overContainer.length // Drop at the end of a section
          : overContainer.indexOf(overId); // Drop at the item's position

      if(overIndex !== -1) {
        moveField(activeId, activeParentId, overParentId, overIndex);
      }
    }
  };

  return (
    <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
        <Card className="h-full flex flex-col">
            <CardHeader className="flex-shrink-0">
                <CardTitle className="text-lg lg:text-xl">{schema.title}</CardTitle>
                <CardDescription className="text-sm">{schema.description}</CardDescription>
            </CardHeader>
            <CardContent ref={setNodeRef} className={cn("flex-grow min-h-0 overflow-auto", isOver && "outline-dashed outline-2 outline-primary outline-offset-[-4px] rounded-lg")}>
                <SortableContext items={rootOrder} strategy={verticalListSortingStrategy}>
                    <div className="space-y-3 lg:space-y-4 p-1">
                    {rootOrder.length > 0 ? rootOrder.map(fieldId => (
                        <FormFieldWrapper key={fieldId} fieldId={fieldId} parentId={null} />
                    )) : (
                        <div className="text-center py-12 lg:py-16 border-2 border-dashed rounded-lg">
                        <p className="text-muted-foreground text-sm lg:text-base">
                            Drag or click fields from the Toolbox to begin.
                        </p>
                        <p className="text-muted-foreground text-xs lg:text-sm mt-2">
                            On mobile, use the Tools tab to add fields.
                        </p>
                        </div>
                    )}
                    </div>
                </SortableContext>
            </CardContent>
        </Card>
    </DndContext>
  );
};

export default Canvas;


###############################################################################
### FILE: components/form-builder/FormFieldWrapper.tsx
###############################################################################
// src/components/form-builder/FormFieldWrapper.tsx
import React from 'react';
import { useSortable, SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { useDroppable } from '@dnd-kit/core';
import { CSS } from '@dnd-kit/utilities';
import { Button } from '@/components/ui/Button';
import { PiTrash, PiDotsSixVerticalBold, PiColumnsDuotone } from 'react-icons/pi';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { cn } from '@/lib/utils';
import { InputField } from '../ui/InputField';
import { Checkbox } from '../ui/Checkbox';
import { RadioGroup, RadioGroupItem } from '../ui/RadioGroup';
import { Select, SelectTrigger, SelectValue } from '@/components/ui/Select';
import ToggledInputPreview from './previews/ToggledInputPreview';
import AutocompletePreview from './previews/AutocompletePreview';
import { FIELD_COLORS } from '@/config/formBuilder.config';
import { shallow } from 'zustand/shallow';

const FieldPreview: React.FC<{ fieldId: string }> = ({ fieldId }) => {
  const { fieldSchema, uiSchema: fieldUiSchema } = useFormBuilderStore(
    React.useCallback(
      (state) => {
        const { parentSchema } = state.findFieldParent(state, fieldId);
        return {
          fieldSchema: parentSchema?.properties?.[fieldId] ?? null,
          uiSchema: state.uiSchema[fieldId] ?? null,
        };
      },
      [fieldId]
    ),
    shallow
  );

  const options = fieldUiSchema?.['ui:options'] || {};
  const widget = fieldUiSchema?.['ui:widget'];

  if (!fieldSchema) return null;

  // Handle toggled inputs (like drugs) separately
  if (options.toggled) {
      return <ToggledInputPreview fieldId={fieldId} fieldSchema={fieldSchema} />
  }

  const renderPreview = () => {
    switch(widget) {
      case 'SectionWidget':
          return (
            <div className="flex items-center text-muted-foreground p-3">
                <PiColumnsDuotone className="w-5 h-5 mr-2"/>
                <p className="text-sm font-semibold">{fieldSchema.title}</p>
            </div>
          )
      case 'NumberWidget':
        return (
            <div className="space-y-2 pointer-events-none opacity-70">
                <InputField id={fieldId} label={fieldSchema.title} value="123" disabled addon={options.unit} />
                <div className="flex items-center gap-4 pl-1">
                    {options.enabledInputs?.includes('slider') && <div className="text-xs text-muted-foreground flex items-center gap-1">﹝Sldr﹞</div>}
                    {options.enabledInputs?.includes('stepper') && <div className="text-xs text-muted-foreground flex items-center gap-1">﹝Stpr﹞</div>}
                </div>
            </div>
        )
      case 'BooleanWidget':
        return <div className="flex items-center space-x-2 p-2 opacity-70"><Checkbox id={fieldId} disabled readOnly defaultChecked /><label htmlFor={fieldId} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">{fieldSchema.title}</label></div>
      case 'ChoiceWidget':
        const choiceSource = fieldSchema.type === 'array' ? fieldSchema.items : fieldSchema;
        const choices = (choiceSource.enum || []).map((val: string, i: number) => ({ value: val, label: choiceSource.enumNames?.[i] || val }));
        
        if (options.displayAs === 'autocompleteTags') {
            return <AutocompletePreview fieldSchema={fieldSchema} uiOptions={options} />
        }
        
        if (options.displayAs === 'radio') {
          return (
            <fieldset disabled className="pointer-events-none space-y-2 opacity-70">
              <legend className="text-sm font-medium">{fieldSchema.title}</legend>
              <RadioGroup>
                {(choices.length > 0 ? choices : [{value: 'opt1', label: 'Option 1'}]).map((c: { value: string; label: string }) => <div key={c.value} className="flex items-center space-x-2"><RadioGroupItem value={c.value} id={`${fieldId}-${c.value}`}/><label htmlFor={`${fieldId}-${c.value}`}>{c.label}</label></div>)}
              </RadioGroup>
            </fieldset>
          );
        }

        if (options.displayAs === 'checkboxGroup') {
            return (
                <fieldset disabled className="pointer-events-none space-y-2 opacity-70">
                  <legend className="text-sm font-medium">{fieldSchema.title}</legend>
                  {(choices.length > 0 ? choices : [{value: 'opt1', label: 'Option 1'}]).map((c: { value: string; label: string }) => <div key={c.value} className="flex items-center space-x-2"><Checkbox id={`${fieldId}-${c.value}`} readOnly defaultChecked={c.value === 'opt1'} /><label htmlFor={`${fieldId}-${c.value}`}>{c.label}</label></div>)}
                </fieldset>
            )
        }
        
        // Fallback for dropdown
  return (
            <div className="space-y-1.5 pointer-events-none opacity-70">
                <label className="text-sm font-medium">{fieldSchema.title}</label>
                <Select disabled>
                    <SelectTrigger>
                        <SelectValue placeholder={choices[0]?.label || 'Select...'} />
                    </SelectTrigger>
                </Select>
    </div>
  );
      default: // TextWidget and others
        return <InputField id={fieldId} label={fieldSchema.title} placeholder={options.placeholder} disabled className="pointer-events-none opacity-70" />;
    }
  };

  return <div className="p-3">{renderPreview()}</div>;
}

interface FormFieldWrapperProps {
  fieldId: string;
  parentId: string | null;
}

const FormFieldWrapper: React.FC<FormFieldWrapperProps> = ({ fieldId, parentId }) => {
  const { schema, uiSchema, selectedFieldId, setSelectedFieldId, removeField, findFieldParent } = useFormBuilderStore();
  const { parentSchema } = findFieldParent(useFormBuilderStore.getState(), fieldId);
  const fieldSchema = parentSchema?.properties?.[fieldId];
  const fieldUiSchema = uiSchema[fieldId];
  const colorName = fieldUiSchema?.['ui:options']?.color || 'secondary';
  const color = FIELD_COLORS.find(c => c.name === colorName) || FIELD_COLORS[1];

  const isSelected = selectedFieldId === fieldId;
  const isSection = fieldSchema?.type === 'object';
  const childIds = (isSection && fieldUiSchema?.['ui:order']) || [];

  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: fieldId, data: { parentId, isSection } });
  
  const { setNodeRef: droppableSetNodeRef, isOver } = useDroppable({ id: fieldId, data: { isSection: true } });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  const sectionGridClass = isSection ? `grid-cols-${uiSchema[fieldId]?.['ui:options']?.columns || 1}` : '';

  return (
    <div
      ref={setNodeRef}
      style={style}
      onClick={(e) => { e.stopPropagation(); setSelectedFieldId(fieldId); }}
      className={cn(
        "bg-card border-2 rounded-lg shadow-sm relative group transition-all cursor-pointer",
        isSelected ? 'border-primary shadow-lg' : 'border-transparent',
        !isSection && 'hover:border-dashed hover:border-slate-400 dark:hover:border-slate-600',
        color.className,
        isSection && isOver && 'ring-2 ring-primary ring-offset-2'
      )}
    >
      <div className="flex items-start">
        <div {...attributes} {...listeners} className={cn("p-3 cursor-grab touch-none self-stretch flex items-center rounded-l-md transition-colors", isSelected ? 'bg-primary/20' : 'group-hover:bg-accent')}>
            <PiDotsSixVerticalBold />
        </div>
        <div className="flex-grow min-w-0">
            <FieldPreview fieldId={fieldId} />
        </div>
        <div className="p-1 self-start">
            <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); removeField(fieldId); }}>
                <PiTrash />
            </Button>
        </div>
      </div>

      {isSection && (
        <div ref={droppableSetNodeRef} className={cn("min-h-[80px] p-4 rounded-b-lg bg-background/50", isOver && "bg-primary/10")}>
           <SortableContext items={childIds} strategy={verticalListSortingStrategy}>
              <div className={cn("space-y-4 grid", sectionGridClass)}>
                  {childIds.length > 0 ? childIds.map(childId => (
                      <FormFieldWrapper key={childId} fieldId={childId} parentId={fieldId} />
                  )) : (
                      <div className="text-center py-6 text-muted-foreground text-sm border-2 border-dashed rounded-lg">
                          <p>Drop a field here</p>
                      </div>
                  )}
              </div>
           </SortableContext>
        </div>
      )}
    </div>
  );
};

export default FormFieldWrapper;


###############################################################################
### FILE: components/form-builder/Inspector.tsx
###############################################################################
// src/components/form-builder/Inspector.tsx
import React, { useEffect, useCallback, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { useForm, useFieldArray } from 'react-hook-form';
import { InputField } from '@/components/ui/InputField';
import { TextareaField } from '@/components/ui/TextareaField';
import { Checkbox as UiCheckbox } from '@/components/ui/Checkbox';
import { Button } from '@/components/ui/Button';
import { PiTrash } from 'react-icons/pi';
import { RadioGroup, RadioGroupItem } from '@/components/ui/RadioGroup';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select';
import { FIELD_COLORS } from '@/config/formBuilder.config';
import { cn } from '@/lib/utils';

interface Choice {
    value: string;
    label: string;
}

interface InspectorFormValues {
    // Common
    title: string;
    description: string;
    
    // Section
    columns: number;

    // Text
    placeholder: string;

    // Number
    unit: string;
    enabledInputs: ('inputBox' | 'slider' | 'stepper')[];
    
    // Choice
    displayAs: 'radio' | 'dropdown' | 'checkboxGroup';
    choices: Choice[];

    // Style
    color: string;
}

const Inspector: React.FC = () => {
    const { selectedFieldId, schema, uiSchema, updateFieldSchema, updateFieldUiOptions, findFieldParent } = useFormBuilderStore();
    
    const { register, control, watch, reset, setValue } = useForm<InspectorFormValues>({
        defaultValues: {
            title: '',
            description: '',
            columns: 1,
            placeholder: '',
            unit: '',
            enabledInputs: ['inputBox'],
            displayAs: 'radio',
            choices: [],
            color: 'primary',
        }
    });

    const { fields, append, remove } = useFieldArray({
        control,
        name: "choices"
    });

    const isUpdatingFromStore = useRef(false);

  useEffect(() => {
        if (selectedFieldId) {
            isUpdatingFromStore.current = true;
            
            const state = useFormBuilderStore.getState();
            const { parentSchema } = findFieldParent(state, selectedFieldId);
            const fieldSchema = parentSchema?.properties?.[selectedFieldId];
            const fieldUiSchema = state.uiSchema[selectedFieldId];

            if (fieldSchema && fieldUiSchema) {
                const fieldUiOptions = fieldUiSchema['ui:options'] || {};
                const type = fieldSchema.type;
                
                let choices: Choice[] = [];
                if (type === 'string' && fieldSchema.enum) { // singleChoice
                    choices = (fieldSchema.enum || []).map((value: string, index: number) => ({
                        value,
                        label: fieldSchema.enumNames?.[index] || value
                    }));
                } else if (type === 'array' && fieldSchema.items?.enum) { // multipleChoice
                    choices = (fieldSchema.items.enum || []).map((value: string, index: number) => ({
                        value,
                        label: fieldSchema.items.enumNames?.[index] || value
                    }));
                }
                
      reset({
                    title: fieldSchema.title || '',
                    description: fieldSchema.description || '',
                    columns: fieldUiOptions.columns || 1,
                    placeholder: fieldUiOptions.placeholder || '',
                    unit: fieldUiOptions.unit || '',
                    enabledInputs: fieldUiOptions.enabledInputs || ['inputBox'],
                    displayAs: fieldUiOptions.displayAs || 'radio',
                    choices: choices,
                    color: fieldUiOptions.color || 'primary',
                });
            }
            
            setTimeout(() => isUpdatingFromStore.current = false, 0);
        }
    }, [selectedFieldId, schema, uiSchema, reset, findFieldParent]);
    
    const updateStore = useCallback((data: InspectorFormValues) => {
        if (isUpdatingFromStore.current || !selectedFieldId) return;

        const state = useFormBuilderStore.getState();
        const { parentSchema } = findFieldParent(state, selectedFieldId);
        const fieldSchema = parentSchema?.properties?.[selectedFieldId];
        if (!fieldSchema) return;

        const type = fieldSchema.type;

        // Update Schema
        const schemaChanges: any = {};
        if (fieldSchema.title !== data.title) schemaChanges.title = data.title;
        if (fieldSchema.description !== data.description) schemaChanges.description = data.description;

        if (type === 'string' && fieldSchema.enum) { // singleChoice
            const newEnum = data.choices.map((c: Choice) => c.value);
            const newEnumNames = data.choices.map((c: Choice) => c.label);
            schemaChanges.enum = newEnum;
            schemaChanges.enumNames = newEnumNames;
        } else if (type === 'array') { // multipleChoice
            const newEnum = data.choices.map((c: Choice) => c.value);
            const newEnumNames = data.choices.map((c: Choice) => c.label);
            schemaChanges.items = { ...fieldSchema.items, enum: newEnum, enumNames: newEnumNames };
        }
        if (Object.keys(schemaChanges).length > 0) {
            updateFieldSchema(selectedFieldId, schemaChanges);
        }

        // Update UI Schema Options
        const uiOptionsChanges: any = {};
        const currentUiOptions = state.uiSchema[selectedFieldId]?.['ui:options'] || {};
        if (fieldSchema.type === 'object' && currentUiOptions.columns !== data.columns) uiOptionsChanges.columns = data.columns;
        if (currentUiOptions.placeholder !== data.placeholder) uiOptionsChanges.placeholder = data.placeholder;
        if (currentUiOptions.unit !== data.unit) uiOptionsChanges.unit = data.unit;
        if (JSON.stringify(currentUiOptions.enabledInputs) !== JSON.stringify(data.enabledInputs)) uiOptionsChanges.enabledInputs = data.enabledInputs;
        if (currentUiOptions.displayAs !== data.displayAs) uiOptionsChanges.displayAs = data.displayAs;
        if (currentUiOptions.color !== data.color) uiOptionsChanges.color = data.color;

        if (Object.keys(uiOptionsChanges).length > 0) {
            updateFieldUiOptions(selectedFieldId, uiOptionsChanges);
        }

    }, [selectedFieldId, updateFieldSchema, updateFieldUiOptions, findFieldParent]);
  
  useEffect(() => {
        const subscription = watch(updateStore as (value: unknown) => void);
    return () => subscription.unsubscribe();
    }, [watch, updateStore]);

  if (!selectedFieldId) {
    return (
            <Card className="h-full flex flex-col">
                <CardHeader className="flex-shrink-0"><CardTitle className="text-lg lg:text-xl">Inspector</CardTitle></CardHeader>
                <CardContent className="flex-grow flex items-center justify-center"><div className="text-center"><p className="text-sm lg:text-base text-muted-foreground">Select a field on the canvas to see its properties.</p><p className="text-xs lg:text-sm text-muted-foreground mt-2">On mobile, tap a field in the Canvas tab first.</p></div></CardContent>
      </Card>
    );
  }
  
    const { parentSchema: currentParentSchema } = findFieldParent(useFormBuilderStore.getState(), selectedFieldId);
    const selectedFieldSchema = currentParentSchema?.properties?.[selectedFieldId];
    const selectedType = selectedFieldSchema?.type === 'array' ? 'multipleChoice' : selectedFieldSchema?.type;
    const isChoice = (selectedType === 'string' && selectedFieldSchema?.enum) || selectedType === 'multipleChoice';

    const renderChoiceEditor = () => (
        <div className="space-y-3 pt-4 border-t">
            <h4 className="text-sm lg:text-base font-medium">Options</h4>
            <div className="space-y-2">
                {fields.map((field, index) => (
                    <div key={field.id} className="flex items-center gap-2 p-2 bg-muted/50 rounded-md">
                        <div className="flex-grow grid grid-cols-2 gap-2">
                            <InputField id={`choices.${index}.value`} containerClassName="gap-0" label="Value" {...register(`choices.${index}.value`)} placeholder="e.g., option_1" className="text-xs h-8" />
                            <InputField id={`choices.${index}.label`} containerClassName="gap-0" label="Label" {...register(`choices.${index}.label`)} placeholder="e.g., Option 1" className="text-xs h-8" />
                        </div>
                        <Button variant="ghost" size="icon" className="h-8 w-8 shrink-0" onClick={() => remove(index)}><PiTrash /></Button>
                    </div>
                ))}
            </div>
            <Button variant="outline" size="sm" onClick={() => append({ value: '', label: '' })}>Add Option</Button>
            
            <div className="space-y-2 pt-2 border-t">
                <label className="text-sm lg:text-base font-medium">Display Style</label>
                <RadioGroup onValueChange={(val: string) => reset({...watch(), displayAs: val as InspectorFormValues['displayAs']})} value={watch('displayAs')}>
                    <label className="flex items-center gap-2 text-sm lg:text-base">
                        <RadioGroupItem value={selectedType === 'multipleChoice' ? 'checkboxGroup' : 'radio'} id={`style-${selectedType}`} />
                        {selectedType === 'multipleChoice' ? 'Checkboxes' : 'Radio Buttons'}
                    </label>
                    <label className="flex items-center gap-2 text-sm lg:text-base">
                        <RadioGroupItem value="dropdown" id="style-dropdown" /> Dropdown Menu
                    </label>
                </RadioGroup>
            </div>
        </div>
    );

  return (
        <Card className="h-full flex flex-col">
            <CardHeader className="flex-shrink-0"><CardTitle className="text-lg lg:text-xl">Inspector</CardTitle></CardHeader>
            <CardContent className="flex-grow overflow-auto p-4"><form className="space-y-4">
                <InputField id="inspector-title" label="Label / Title" {...register('title')} className="text-sm lg:text-base"/>
                <TextareaField id="inspector-description" label="Description / Help Text" {...register('description')} rows={3} />
                
                <div className="space-y-3 pt-4 border-t">
                    <h4 className="text-sm lg:text-base font-medium">Styling</h4>
                    <div>
                        <label className="text-sm font-medium">Color</label>
                        <div className="flex flex-wrap gap-2 mt-2">
                            {FIELD_COLORS.map(color => (
                                <button
                                    key={color.name}
                                    type="button"
                                    onClick={() => setValue('color', color.name)}
                                    className={cn("w-8 h-8 rounded-full border-2", color.className.replace('text-','bg-').replace('/5','/40'), watch('color') === color.name ? 'ring-2 ring-offset-2 ring-primary' : 'border-transparent')}
                                    aria-label={`Set color to ${color.name}`}
                                />
                            ))}
                        </div>
                    </div>
                </div>

                {selectedType === 'object' && (
                    <div className="space-y-3 pt-4 border-t">
                        <h4 className="text-sm lg:text-base font-medium">Section Options</h4>
                         <div>
                            <label htmlFor="columns" className="text-sm font-medium">Layout Columns</label>
                            <Select onValueChange={(value: string) => setValue('columns', parseInt(value, 10))} value={String(watch('columns'))}>
                                <SelectTrigger id="columns" className="w-full mt-1.5">
                                    <SelectValue placeholder="Select number of columns" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="1">1 Column</SelectItem>
                                    <SelectItem value="2">2 Columns</SelectItem>
                                    <SelectItem value="3">3 Columns</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                    </div>
                )}

                {selectedType === 'string' && !selectedFieldSchema?.enum && (
                    <div className="space-y-3 pt-4 border-t">
                        <h4 className="text-sm lg:text-base font-medium">Text Options</h4>
                        <InputField id="inspector-placeholder" label="Placeholder" {...register('placeholder')} />
                    </div>
                )}

                {selectedType === 'number' && (
                    <div className="space-y-3 pt-4 border-t">
                        <h4 className="text-sm lg:text-base font-medium">Number Options</h4>
                        <InputField id="inspector-unit" label="Unit" placeholder="e.g., mmHg, kg" {...register('unit')} className="text-sm lg:text-base"/>
                        <div className="space-y-2">
                            <label className="text-sm lg:text-base font-medium">Enabled Inputs</label>
                            <div className="space-y-2">
                                <label className="flex items-center gap-2 text-sm lg:text-base"><UiCheckbox {...register('enabledInputs')} value="inputBox" /> Standard Input Box</label>
                                <label className="flex items-center gap-2 text-sm lg:text-base"><UiCheckbox {...register('enabledInputs')} value="slider" /> Slider</label>
                                <label className="flex items-center gap-2 text-sm lg:text-base"><UiCheckbox {...register('enabledInputs')} value="stepper" /> Stepper Buttons</label>
                            </div>
                    </div>
                </div>
            )}

                {isChoice && renderChoiceEditor()}
            </form></CardContent>
    </Card>
  );
};

export default Inspector;


###############################################################################
### FILE: components/form-builder/JsonEditor.tsx
###############################################################################
// src/components/form-builder/JsonEditor.tsx
import React, { useState, useEffect } from 'react';
import Editor from 'react-simple-code-editor';
// @ts-ignore
import { highlight, languages } from 'prismjs/components/prism-core';
import 'prismjs/components/prism-json';
import 'prismjs/themes/prism-tomorrow.css';
import { cn } from '@/lib/utils';
import { Button } from '../ui/Button';
import { PiCheck, PiCopy } from 'react-icons/pi';

interface JsonEditorProps {
  jsonString: string;
  onJsonChange: (value: string) => void;
  readOnly?: boolean;
  showError?: boolean;
}

const JsonEditor: React.FC<JsonEditorProps> = ({ 
  jsonString, 
  onJsonChange, 
  readOnly = false,
  showError = true 
}) => {
  const [error, setError] = useState<string | null>(null);
  const [copied, setCopied] = useState(false);

  const handleChange = (value: string) => {
    onJsonChange(value);
    try {
      JSON.parse(value);
      setError(null);
    } catch (e: any) {
      setError(e.message);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(jsonString);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className="relative h-full w-full bg-gray-900 rounded-md border border-border">
      <Button
        variant="ghost"
        size="icon"
        onClick={handleCopy}
        className="absolute top-2 right-2 z-10 h-7 w-7 text-gray-400 hover:text-white hover:bg-white/10"
      >
        {copied ? <PiCheck className="text-emerald-400" /> : <PiCopy className="w-4 h-4" />}
      </Button>
      <div className="h-full w-full overflow-auto">
        <Editor
          value={jsonString}
          onValueChange={readOnly ? () => {} : handleChange}
          highlight={(code) => highlight(code, languages.json, 'json')}
          padding={10}
          className="font-mono text-xs text-white min-h-full"
          style={{
            fontFamily: '"Fira Code", "Fira Mono", monospace',
            fontSize: 12,
          }}
          readOnly={readOnly}
        />
      </div>
      {showError && error && (
        <div className="absolute bottom-0 left-0 right-0 p-2 text-xs text-destructive bg-destructive/20 border-t border-destructive/30">
          <strong>JSON Error:</strong> {error}
        </div>
      )}
    </div>
  );
};

export default JsonEditor;


###############################################################################
### FILE: components/form-builder/Toolbox.tsx
###############################################################################
// src/components/form-builder/Toolbox.tsx
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { FORM_BUILDER_PRIMITIVES } from '@/config/formBuilder.config';
import { useFormBuilderStore } from '@/stores/formBuilderStore';

const Toolbox: React.FC = () => {
  const addField = useFormBuilderStore(state => state.addField);

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="flex-shrink-0">
        <CardTitle className="text-lg lg:text-xl">Toolbox</CardTitle>
      </CardHeader>
      <CardContent className="flex-grow">
        <p className="text-xs lg:text-sm text-muted-foreground mb-4">
          Tap fields to add them to the canvas.
        </p>
        <div className="grid grid-cols-2 lg:grid-cols-2 gap-3">
          {FORM_BUILDER_PRIMITIVES.map(primitive => (
            <button
              key={primitive.type}
              onClick={() => addField(primitive.type, null)}
              className="p-3 lg:p-4 border rounded-lg flex flex-col items-center justify-center text-center hover:bg-accent hover:border-primary transition-all active:scale-95 min-h-[80px] lg:min-h-[100px]"
            >
              <primitive.icon className="w-6 h-6 lg:w-8 lg:h-8 mb-2" />
              <span className="text-xs lg:text-sm font-medium leading-tight">{primitive.label}</span>
            </button>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default Toolbox;


###############################################################################
### FILE: components/form-builder/previews/AutocompletePreview.tsx
###############################################################################
import React from 'react';
import QuickSelectButtons from './QuickSelectButtons';
import SelectedItemTags from './SelectedItemTags';
import { InputField } from '@/components/ui/InputField';

interface AutocompletePreviewProps {
    fieldSchema: any;
    uiOptions: any;
}

const AutocompletePreview: React.FC<AutocompletePreviewProps> = ({ fieldSchema, uiOptions }) => {
    const allOptions = (fieldSchema.items.enum || []).map((val: string, i: number) => ({
        value: val,
        label: fieldSchema.items.enumNames?.[i] || val,
    }));
    
    const quickOptions = allOptions.filter((opt: { value: string }) => 
        (uiOptions.quickOptions || []).includes(opt.value)
    );
    
    // Show the first quick option as selected for a realistic preview
    const selectedItems = quickOptions.length > 0 ? [quickOptions[0]] : [];
    
    return (
        <div className="space-y-3 pointer-events-none opacity-70">
            <h3 className="text-sm font-medium">{fieldSchema.title}</h3>
            <div className='p-3 border rounded-md space-y-3 bg-background/50'>
                {quickOptions.length > 0 && (
                    <div>
                        <label className='block text-xs font-medium text-muted-foreground mb-1'>Comuns:</label>
                        <QuickSelectButtons options={quickOptions} selectedValues={selectedItems.map(i => i.value)} />
                    </div>
                )}
                <InputField
                    id={`preview-ac-${fieldSchema.title}`}
                    label="Buscar Outro:"
                    containerClassName='gap-1'
                    className='h-8'
                    placeholder="Digite para buscar..."
                    disabled
                />
                <div>
                    <label className='block text-xs font-medium text-muted-foreground mb-1'>Selecionados:</label>
                    <SelectedItemTags items={selectedItems} noItemsText="-" />
                </div>
            </div>
        </div>
    );
};

export default AutocompletePreview; 


###############################################################################
### FILE: components/form-builder/previews/QuickSelectButtons.tsx
###############################################################################
import React from 'react';
import { Button } from '@/components/ui/Button';

interface QuickSelectButtonsProps {
  options: { value: string; label: string }[];
  selectedValues: string[];
}

const QuickSelectButtons: React.FC<QuickSelectButtonsProps> = ({ options, selectedValues }) => {
  return (
    <div className="flex flex-wrap gap-1 pointer-events-none opacity-70">
      {options.map((option) => (
        <Button
          key={option.value}
          size="sm"
          variant={selectedValues.includes(option.value) ? 'default' : 'outline'}
          className="text-xs h-7 px-2"
        >
          {option.label}
        </Button>
      ))}
    </div>
  );
};

export default QuickSelectButtons; 


###############################################################################
### FILE: components/form-builder/previews/SelectedItemTags.tsx
###############################################################################
import React from 'react';
import { PiX } from 'react-icons/pi';
import { cn } from '@/lib/utils';

interface SelectedItemTagsProps {
  items: { value: string; label: string }[];
  noItemsText?: string;
}

const SelectedItemTags: React.FC<SelectedItemTagsProps> = ({ items, noItemsText = "No items selected." }) => {
  if (items.length === 0) {
    return <div className="text-xs text-muted-foreground p-2">{noItemsText}</div>;
  }

  return (
    <div className="flex flex-wrap gap-1 p-2 border rounded-md min-h-[40px] pointer-events-none opacity-70">
      {items.map((item) => (
        <div
          key={item.value}
          className="flex items-center gap-1 bg-secondary text-secondary-foreground rounded-full px-2 py-0.5 text-xs"
        >
          <span>{item.label}</span>
          <PiX className="w-3 h-3" />
        </div>
      ))}
    </div>
  );
};

export default SelectedItemTags; 


###############################################################################
### FILE: components/form-builder/previews/ToggledInputPreview.tsx
###############################################################################
import React from 'react';
import { Checkbox } from '@/components/ui/Checkbox';
import { InputField } from '@/components/ui/InputField';
import { cn } from '@/lib/utils';

interface ToggledInputPreviewProps {
    fieldId: string;
    fieldSchema: any;
}

const ToggledInputPreview: React.FC<ToggledInputPreviewProps> = ({ fieldId, fieldSchema }) => {
    return (
        <div className="flex items-center gap-2 pointer-events-none p-2 opacity-70">
            <Checkbox id={`preview-toggle-${fieldId}`} defaultChecked readOnly disabled />
            <div className="flex-grow">
                <InputField
                    id={`preview-input-${fieldId}`}
                    type={fieldSchema.type === 'string' ? 'text' : 'number'}
                    label={fieldSchema.title}
                    containerClassName='gap-0'
                    className='h-8'
                    value={fieldSchema.type === 'number' ? '123' : '...'}
                    disabled
                />
            </div>
        </div>
    );
};

export default ToggledInputPreview; 


###############################################################################
### FILE: components/forms/DraftStatusBar.tsx
###############################################################################
// src/components/forms/DraftStatusBar.tsx
import React from 'react';
import { useSubmissionStore } from '@/stores/submissionStore';
import { PiCheckCircleDuotone } from 'react-icons/pi';

const DraftStatusBar: React.FC = () => {
  const { lastUpdateTimestamp, isEncounterActive } = useSubmissionStore();

  if (!isEncounterActive || !lastUpdateTimestamp) {
    return null;
  }

  const lastSavedTime = new Date(lastUpdateTimestamp).toLocaleTimeString();

  return (
    <div className="fixed bottom-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-lg border-t border-border">
      <div className="container mx-auto px-4 py-2 flex items-center justify-center text-sm">
        <PiCheckCircleDuotone className="w-5 h-5 mr-2 text-green-500" />
        <span className="text-muted-foreground">Draft automatically saved at {lastSavedTime}</span>
      </div>
    </div>
  );
};

export default DraftStatusBar;


###############################################################################
### FILE: components/forms/DynamicFormRenderer.tsx
###############################################################################
// src/components/forms/DynamicFormRenderer.tsx
import React from 'react';
import { FormSchema, FormUiSchema } from '@/stores/formBuilderStore';
import NumberWidget from './widgets/NumberWidget';
// Other widgets will be imported here

interface DynamicFormRendererProps {
  schema: FormSchema;
  uiSchema: FormUiSchema;
  formData: any;
  onFormDataChange: (updatedData: any) => void;
  fieldOrder?: string[];
}

const widgetRegistry: { [key: string]: React.ComponentType<any> } = {
  NumberWidget,
  // TextWidget, ChoiceWidget, etc.
};

const UnhandledWidget = ({ widgetName, fieldId }: { widgetName: string, fieldId: string }) => (
  <div className="p-2 border-dashed border-destructive bg-destructive/10 text-destructive text-xs rounded-md">
    Unhandled Widget: <strong>{widgetName || 'N/A'}</strong> for field <strong>{fieldId}</strong>
  </div>
);

const DynamicFormRenderer: React.FC<DynamicFormRendererProps> = ({
  schema,
  uiSchema,
  formData,
  onFormDataChange,
  fieldOrder,
}) => {
  const fieldsToRender = fieldOrder || Object.keys(schema.properties);

  const handleFieldChange = (fieldId: string, newValue: any) => {
    onFormDataChange({
      ...formData,
      [fieldId]: newValue,
    });
  };

  return (
    <form className="space-y-6">
      {fieldsToRender.map(fieldId => {
        const fieldSchema = schema.properties[fieldId];
        const fieldUiSchema = uiSchema[fieldId];
        const WidgetComponent = widgetRegistry[fieldUiSchema?.['ui:widget']];

        if (!WidgetComponent) {
          return <UnhandledWidget key={fieldId} fieldId={fieldId} widgetName={fieldUiSchema?.['ui:widget']} />;
        }

        return (
          <div key={fieldId}>
            <WidgetComponent
              label={fieldSchema.title}
              value={formData[fieldId]}
              onChange={(newValue: any) => handleFieldChange(fieldId, newValue)}
              options={fieldUiSchema['ui:options'] || {}}
              schema={fieldSchema} // Pass schema properties like min/max
            />
          </div>
        );
      })}
    </form>
  );
};

export default DynamicFormRenderer;


###############################################################################
### FILE: components/forms/PatientRegistrationModal.tsx
###############################################################################
import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/Dialog';
import { Button } from '@/components/ui/Button';
import { InputField } from '@/components/ui/InputField';
import { Checkbox } from '@/components/ui/Checkbox';
import { useSubmissionStore } from '@/stores/submissionStore';

interface PatientRegistrationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onStartEncounter: () => void;
}

const PatientRegistrationModal: React.FC<PatientRegistrationModalProps> = ({ isOpen, onClose, onStartEncounter }) => {
  const { patientData, updatePatientData } = useSubmissionStore();

  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value, type, checked } = e.target;
    updatePatientData({ [id]: type === 'checkbox' ? checked : value });
  };

  const canStart = patientData?.initials && patientData?.gender && patientData?.dob && patientData.projectConsent;

  const handleStartClick = () => {
    if (canStart) {
      onStartEncounter();
      onClose();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Start New Encounter</DialogTitle>
          <DialogDescription>
            Enter the patient's information below to begin data collection.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <InputField label="Patient Initials" id="initials" type="text" value={patientData?.initials || ''} onChange={handleFieldChange} required />
            <InputField label="Gender" id="gender" type="text" value={patientData?.gender || ''} onChange={handleFieldChange} required />
            <InputField label="Date of Birth" id="dob" type="date" value={patientData?.dob || ''} onChange={handleFieldChange} required />
          </div>
          <div className="flex items-start space-x-3 pt-4 border-t">
            <Checkbox id="projectConsent" checked={patientData?.projectConsent || false} onChange={handleFieldChange} className="mt-1" />
            <label htmlFor="projectConsent" className="text-sm text-muted-foreground">
              I confirm that project-specific consent has been obtained from the patient or their legal guardian.
              <span className="text-destructive"> *</span>
            </label>
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>Cancel</Button>
          <Button onClick={handleStartClick} disabled={!canStart}>
            Start Data Collection
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default PatientRegistrationModal; 


###############################################################################
### FILE: components/forms/widgets/NumberWidget.tsx
###############################################################################
// src/components/forms/widgets/NumberWidget.tsx
import React from 'react';
import { InputField } from '@/components/ui/InputField';
import { Slider } from '@/components/ui/Slider';
import Stepper from '@/components/ui/Stepper';

interface NumberWidgetProps {
  label: string;
  value: number | undefined;
  onChange: (newValue: number | undefined) => void;
  options: {
    unit?: string;
    enabledInputs: ('inputBox' | 'slider' | 'stepper')[];
  };
  schema: {
    minimum?: number;
    maximum?: number;
  };
}

const NumberWidget: React.FC<NumberWidgetProps> = ({ label, value, onChange, options, schema }) => {
  const { unit, enabledInputs = ['inputBox'] } = options;
  const { minimum, maximum } = schema;

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const num = e.target.valueAsNumber;
    if (!isNaN(num)) {
      onChange(num);
    } else if (e.target.value === '') {
      onChange(undefined); // Allow clearing the input
    }
  };

  const handleSliderChange = (values: number[]) => {
    onChange(values[0]);
  };

  return (
    <div className="space-y-4">
      <label className="text-sm font-medium">{label}</label>
      <div className="flex flex-col sm:flex-row sm:items-center gap-4">
      {enabledInputs.includes('inputBox') && (
          <InputField
            id={`input-${label}`}
            type="number"
            label=""
              containerClassName='w-full sm:w-40'
            value={value || ''}
            onChange={handleInputChange}
            min={minimum}
            max={maximum}
              addon={unit}
        />
      )}
      {enabledInputs.includes('stepper') && (
        <Stepper
          value={value || 0}
          onValueChange={onChange}
          min={minimum}
          max={maximum}
          />
        )}
      </div>

      {enabledInputs.includes('slider') && (
        <Slider
          value={[value || minimum || 0]}
          onValueChange={handleSliderChange}
          min={minimum}
          max={maximum}
          step={1}
          className='pt-2'
        />
      )}
    </div>
  );
};

export default NumberWidget;


###############################################################################
### FILE: components/layout/ContextSwitcher.tsx
###############################################################################
// src/components/layout/ContextSwitcher.tsx
import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { PiCaretUpDownDuotone, PiGaugeDuotone, PiCheck, PiPlus } from 'react-icons/pi';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/Button';

const ContextSwitcher: React.FC = () => {
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const { availableProjects, activeProjectId, activeProjectDetails, setActiveProject } = useProjectStore();
  const { user } = useAuthStore();
  const switcherRef = useRef<HTMLDivElement>(null);

  const handleSelect = (id: string | null) => {
    setIsOpen(false);
    if (id) {
      setActiveProject(id);
      navigate(`/project/${id}`);
    } else {
      setActiveProject(""); // Clear the active project
      navigate('/');
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (switcherRef.current && !switcherRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const currentContextName = activeProjectDetails?.name || "Global Dashboard";
  const userProjects = user ? availableProjects.filter(p => p.members.some(m => m.userId === user.id)) : [];

  return (
    <div className="relative mb-4" ref={switcherRef}>
      <Button
        variant="outline"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full justify-between"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="truncate">{currentContextName}</span>
        <PiCaretUpDownDuotone className="ml-2 h-4 w-4 shrink-0 opacity-50" />
      </Button>
      {isOpen && (
        <div className="absolute z-10 mt-1 w-full rounded-md border bg-popover text-popover-foreground shadow-lg">
          <ul className="max-h-60 overflow-y-auto p-1" role="listbox">
            {/* Global Dashboard Option */}
            <li
              className={cn("flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent", !activeProjectId && "bg-accent")}
              onClick={() => handleSelect(null)}
              role="option"
              aria-selected={!activeProjectId}
            >
              <PiGaugeDuotone className="mr-2 h-4 w-4" />
              Global Dashboard
              {!activeProjectId && <PiCheck className="ml-auto h-4 w-4" />}
            </li>

            {/* Project Options */}
            <div className="my-1 h-px bg-border" />
            <h4 className="px-2 text-xs font-semibold text-muted-foreground">Projects</h4>
            {userProjects.map((project) => (
              <li
                key={project.id}
                className={cn("flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent", project.id === activeProjectId && "bg-accent")}
                onClick={() => handleSelect(project.id)}
                role="option"
                aria-selected={project.id === activeProjectId}
              >
                {project.name}
                {project.id === activeProjectId && <PiCheck className="ml-auto h-4 w-4" />}
              </li>
            ))}
             <div className="my-1 h-px bg-border" />
             {/* Create New Project - Placeholder Action */}
             <li className="flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm text-muted-foreground outline-none hover:bg-accent">
                <PiPlus className="mr-2 h-4 w-4"/>
                Create Project
             </li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default ContextSwitcher;


###############################################################################
### FILE: components/layout/NavMenu.tsx
###############################################################################
// src/components/layout/NavMenu.tsx
import React from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { IconType } from 'react-icons';
import { cn } from '@/lib/utils';

export interface NavItem {
  id: string;
  label: string;
  path?: string;
  icon?: IconType;
  isHeader?: boolean;
  children?: NavItem[];
  roles?: string[];
}

const NavMenu: React.FC<{ items: NavItem[] }> = ({ items }) => {
  const location = useLocation();

  const isChildActive = (item: NavItem): boolean => {
    if (!item.children) return false;
    return item.children.some(child => 
      child.path && location.pathname.startsWith(child.path)
    );
  };

  return (
    <nav>
      <ul className="space-y-1">
        {items.map((item) => (
          <li key={item.id}>
            {item.isHeader ? (
              <h3 className={cn("px-3 pt-4 pb-1 text-xs font-semibold uppercase text-muted-foreground/80 tracking-wider", isChildActive(item) && 'text-primary')}>
                {item.label}
              </h3>
            ) : (
              item.path && (
                <NavLink
                  to={item.path}
                  end // + Add the 'end' prop here
                  className={({ isActive }) =>
                    cn(
                      'flex items-center p-2.5 text-sm rounded-lg hover:bg-accent transition-all duration-200 group relative',
                      isActive 
                        ? 'font-semibold text-primary bg-primary/10 dark:shadow-glow-primary-md' 
                        : 'font-medium text-foreground/80 hover:text-foreground'
                    )
                  }
                >
                  {item.icon && <item.icon className="w-5 h-5 mr-3 shrink-0" />}
                  <span className="flex-1">{item.label}</span>
                </NavLink>
              )
            )}
            {item.children && (
              <ul className="pl-4 mt-1 space-y-1 border-l-2 border-border/50 ml-3">
                <NavMenu items={item.children} />
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default NavMenu;


###############################################################################
### FILE: components/layout/Sidebar.tsx
###############################################################################
// src/components/layout/Sidebar.tsx
import React, { useEffect } from 'react';
import { useParams, NavLink } from 'react-router-dom';
import ContextSwitcher from '@/components/layout/ContextSwitcher';
import NavMenu, { NavItem } from '@/components/layout/NavMenu';
import useAuthStore from '@/stores/authStore';
import { useProjectStore } from '@/stores/projectStore';
import { useUiStore } from '@/stores/uiStore';
import { cn } from '@/lib/utils';
//prettier-ignore
import { PiHouseDuotone, PiListChecksDuotone, PiSquaresFourDuotone, PiUsersThreeDuotone, PiGearSixDuotone, PiChartBarDuotone, PiX } from 'react-icons/pi';

const Sidebar: React.FC = () => {
    const { projectId } = useParams<{ projectId: string }>();
    const { user, activeProjectRoles, setProjectRoles } = useAuthStore();
    const { activeProjectDetails, setActiveProject } = useProjectStore();
    const { isSidebarOpen, setSidebarOpen } = useUiStore();

    useEffect(() => {
        // Ensure the active project in the store matches the URL param
        if (projectId && (!activeProjectDetails || activeProjectDetails.id !== projectId)) {
            setActiveProject(projectId);
        }
    }, [projectId, activeProjectDetails, setActiveProject]);

    useEffect(() => {
        if (user && activeProjectDetails) {
            const memberInfo = activeProjectDetails.members.find(m => m.userId === user.id);
            setProjectRoles(memberInfo ? memberInfo.roles : []);
        } else {
            setProjectRoles([]);
        }
    }, [activeProjectDetails, user, setProjectRoles]);

    // Close sidebar when clicking outside on mobile
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (isSidebarOpen && window.innerWidth < 1024) {
                const sidebar = document.getElementById('mobile-sidebar');
                if (sidebar && !sidebar.contains(event.target as Node)) {
                    setSidebarOpen(false);
                }
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [isSidebarOpen, setSidebarOpen]);

    const projectNavItems: NavItem[] = [
        { id: 'overview', path: `/project/${projectId}/overview`, label: 'Overview', icon: PiHouseDuotone },
        { id: 'submissions', path: `/project/${projectId}/submissions`, label: 'Data Submissions', icon: PiListChecksDuotone, roles: ['DataEntry', 'Researcher', 'ProjectLead'] },
        { id: 'builder', path: `/project/${projectId}/builder`, label: 'Form Builder', icon: PiSquaresFourDuotone, roles: ['FormDesigner', 'ProjectLead'] },
        { id: 'members', path: `/project/${projectId}/members`, label: 'Members & Roles', icon: PiUsersThreeDuotone, roles: ['ProjectLead'] },
        { id: 'reports', path: `/project/${projectId}/reports`, label: 'Data & Reports', icon: PiChartBarDuotone, roles: ['Researcher', 'ProjectLead'] },
        { id: 'settings', path: `/project/${projectId}/settings`, label: 'Project Settings', icon: PiGearSixDuotone, roles: ['ProjectLead'] },
    ];

    const visibleNavItems = projectNavItems.filter(item =>
        !item.roles || item.roles.some(role => activeProjectRoles.includes(role))
    );

    return (
        <>
            {/* Mobile Overlay */}
            {isSidebarOpen && (
                <div 
                    className="fixed inset-0 bg-black/50 z-30 lg:hidden"
                    onClick={() => setSidebarOpen(false)}
                />
            )}

            {/* Sidebar */}
            <aside 
                id="mobile-sidebar"
                className={cn(
                    "fixed top-0 left-0 z-40 h-screen bg-card/95 backdrop-blur-xl border-r transition-transform duration-300 ease-in-out",
                    "pt-[var(--header-height)]",
                    // Mobile: slide in from left, Desktop: always visible
                    "w-64 lg:w-64",
                    isSidebarOpen ? "translate-x-0" : "-translate-x-full"
                )}
            >
                {/* Mobile Close Button */}
                <button
                    onClick={() => setSidebarOpen(false)}
                    className="absolute top-4 right-4 p-2 rounded-lg hover:bg-accent lg:hidden z-10"
                    aria-label="Close sidebar"
                >
                    <PiX className="h-5 w-5" />
                </button>

                <div className="h-full overflow-y-auto scrollbar-hide">
                    <div className="px-3 py-4">
                        <ContextSwitcher />
                        <NavMenu items={visibleNavItems} />
                    </div>
                </div>
            </aside>
        </>
    );
};

export default Sidebar;


###############################################################################
### FILE: components/layout/SidebarLayout.tsx
###############################################################################
// src/components/layout/SidebarLayout.tsx
import React from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from '@/components/layout/Sidebar';
import { useUiStore } from '@/stores/uiStore';
import { cn } from '@/lib/utils';

const SidebarLayout: React.FC = () => {
  const { isSidebarOpen } = useUiStore();

  return (
    <div className="relative flex">
      <Sidebar />
      <div className={cn(
          "flex-1 transition-all duration-300 ease-in-out min-h-screen",
          // On desktop, add padding when sidebar is open, remove it when closed
          isSidebarOpen ? "lg:pl-64" : "lg:pl-0"
      )}>
        <div className="p-4 sm:p-6 lg:p-8">
          <Outlet />
        </div>
      </div>
    </div>
  );
};

export default SidebarLayout;


###############################################################################
### FILE: components/layout/TopBar.tsx
###############################################################################
// src/components/layout/TopBar.tsx
import React, { useState, useEffect, useRef } from 'react';
import { Link, NavLink, useMatch, useNavigate } from 'react-router-dom';
//prettier-ignore
import { PiCompassDuotone, PiBellDuotone, PiSunDuotone, PiMoonDuotone, PiSignOutDuotone, PiCaretDownDuotone, PiGearDuotone, PiList } from 'react-icons/pi';
import useAuthStore, { mockLogin } from '@/stores/authStore';
import { useUiStore } from '@/stores/uiStore';
import { Button } from '@/components/ui/Button';
import { cn } from '@/lib/utils';

const TopBar: React.FC = () => {
    const navigate = useNavigate();
    const { isAuthenticated, user } = useAuthStore();
    const { toggleSidebar } = useUiStore();
    const [isDarkMode, setIsDarkMode] = useState(() => document.documentElement.classList.contains('dark'));
    const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const userMenuRef = useRef<HTMLDivElement>(null);
    const mobileMenuRef = useRef<HTMLDivElement>(null);
    
    // Check if the current route is within a project workspace
    const inProjectWorkspace = useMatch('/project/:projectId/*');

    useEffect(() => {
        if (!isAuthenticated) mockLogin('userLead123');
    }, [isAuthenticated]);

    const toggleDarkMode = () => {
        setIsDarkMode(prev => {
            const newMode = !prev;
            document.documentElement.classList.toggle('dark', newMode);
            localStorage.setItem('theme', newMode ? 'dark' : 'light');
            return newMode;
        });
    };

    const handleLogout = () => {
        useAuthStore.getState().logout();
        navigate('/');
    };

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {
                setIsUserMenuOpen(false);
            }
            if (mobileMenuRef.current && !mobileMenuRef.current.contains(event.target as Node)) {
                setIsMobileMenuOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);
    
    const navLinkClasses = ({ isActive }: { isActive: boolean }) =>
        cn(
            "flex items-center gap-2 px-3 py-2 text-sm font-medium rounded-md transition-colors",
            isActive ? 'text-primary bg-primary/10' : 'text-muted-foreground hover:bg-accent hover:text-foreground'
        );

    const mobileNavLinkClasses = ({ isActive }: { isActive: boolean }) =>
        cn(
            "block w-full text-left px-4 py-3 text-base font-medium rounded-md transition-colors",
            isActive ? 'text-primary bg-primary/10' : 'text-foreground hover:bg-accent'
        );

    return (
        <header className="fixed top-0 left-0 right-0 z-50 bg-card/80 backdrop-blur-lg border-b" style={{ height: 'var(--header-height)' }}>
            <div className="flex items-center justify-between h-full px-4 sm:px-6 mx-auto">
                {/* Left Side: Logo & Conditional Sidebar Toggle */}
                <div className="flex items-center gap-2">
                    {inProjectWorkspace && (
                        <Button variant="ghost" size="icon" className="lg:inline-flex" onClick={toggleSidebar}>
                            <PiList className="h-5 w-5" />
                        </Button>
                    )}
                    <Link to="/" className="flex items-center gap-2 text-xl font-bold text-foreground transition-transform hover:scale-105">
                        <PiCompassDuotone className="w-8 h-8 text-primary" />
                        <span className="hidden sm:inline text-gradient-primary">CREST</span>
                    </Link>
                </div>

                {/* Center: Desktop Navigation */}
                <div className="hidden lg:flex items-center justify-center gap-2">
                    <NavLink to="/" end className={navLinkClasses}>Dashboard</NavLink>
                    <NavLink to="/projects" className={navLinkClasses}>Projects</NavLink>
                    <NavLink to="/forms" className={navLinkClasses}>Forms Library</NavLink>
                    <NavLink to="/settings" className={navLinkClasses}>Settings</NavLink>
                </div>

                {/* Right Side: User Controls */}
                <div className="flex items-center gap-2 sm:gap-3">
                    {/* Mobile Menu Button */}
                    <Button 
                        variant="ghost" 
                        size="icon" 
                        className="lg:hidden" 
                        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                        aria-label="Toggle mobile menu"
                    >
                        <PiList className="h-5 w-5" />
                    </Button>

                    <Button variant="ghost" size="icon" aria-label="Notifications"><PiBellDuotone className="h-5 w-5" /></Button>
                    <Button variant="ghost" size="icon" onClick={toggleDarkMode} aria-label="Toggle theme">{isDarkMode ? <PiSunDuotone className="h-5 w-5" /> : <PiMoonDuotone className="h-5 w-5" />}</Button>
                    <div className="w-px h-6 bg-border mx-2"></div>
                    {user && (
                        <div className="relative" ref={userMenuRef}>
                            <button onClick={() => setIsUserMenuOpen(!isUserMenuOpen)} className="flex items-center gap-2 p-1 rounded-full transition-colors hover:bg-accent">
                                <img src={`https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=10b981&color=fff&size=32&font-size=0.40&bold=true&rounded=true`} alt={user.name} className="w-8 h-8" />
                                <div className="hidden sm:flex items-center gap-1">
                                    <span className="text-sm font-medium">{user.name}</span>
                                    <PiCaretDownDuotone className={`w-4 h-4 text-muted-foreground transition-transform ${isUserMenuOpen ? 'rotate-180' : ''}`} />
                                </div>
                            </button>
                            {isUserMenuOpen && (
                                <div className="absolute right-0 mt-2 w-60 rounded-lg shadow-lg bg-popover text-popover-foreground border z-50 p-2 animate-fade-in">
                                    <div className="p-2 border-b"><p className="text-sm font-semibold truncate">{user.name}</p><p className="text-xs text-muted-foreground truncate">{user.email}</p></div>
                                    <div className="mt-1 space-y-1">
                                        <button onClick={() => { setIsUserMenuOpen(false); navigate('/settings'); }} className="w-full text-left flex items-center px-2 py-2 text-sm rounded-md hover:bg-accent"><PiGearDuotone className="w-4 h-4 mr-2" /> Settings</button>
                                        <button onClick={handleLogout} className="w-full text-left flex items-center px-2 py-2 text-sm rounded-md text-destructive hover:bg-destructive/10"><PiSignOutDuotone className="w-4 h-4 mr-2" /> Sign out</button>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>

            {/* Mobile Navigation Menu */}
            {isMobileMenuOpen && (
                <div ref={mobileMenuRef} className="lg:hidden absolute top-full left-0 right-0 bg-card/95 backdrop-blur-xl border-b shadow-lg z-40">
                    <div className="p-4 space-y-2">
                        <NavLink 
                            to="/" 
                            end 
                            className={mobileNavLinkClasses}
                            onClick={() => setIsMobileMenuOpen(false)}
                        >
                            Dashboard
                        </NavLink>
                        <NavLink 
                            to="/projects" 
                            className={mobileNavLinkClasses}
                            onClick={() => setIsMobileMenuOpen(false)}
                        >
                            Projects
                        </NavLink>
                        <NavLink 
                            to="/forms" 
                            className={mobileNavLinkClasses}
                            onClick={() => setIsMobileMenuOpen(false)}
                        >
                            Forms Library
                        </NavLink>
                        <NavLink 
                            to="/settings" 
                            className={mobileNavLinkClasses}
                            onClick={() => setIsMobileMenuOpen(false)}
                        >
                            Settings
                        </NavLink>
                    </div>
                </div>
            )}
        </header>
    );
};

export default TopBar;


###############################################################################
### FILE: components/project/InfoWidget.tsx
###############################################################################
// src/components/project/InfoWidget.tsx
import React from 'react';
import { IconType } from 'react-icons';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';
import { cn } from '@/lib/utils';

interface InfoWidgetProps {
  title: string;
  icon: IconType;
  children: React.ReactNode;
  className?: string;
}

const InfoWidget: React.FC<InfoWidgetProps> = ({ title, icon: Icon, children, className }) => {
  return (
    <Card className={cn("h-full", className)}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        {children}
      </CardContent>
    </Card>
  );
};

export default InfoWidget;


###############################################################################
### FILE: components/ui/Button.tsx
###############################################################################
// src/components/ui/Button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 transform-gpu hover:-translate-y-px active:translate-y-0 active:scale-[0.98]",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg dark:shadow-primary/20",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-lg",
        outline: "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        gradient: "bg-gradient-to-r from-brand-blue via-brand-indigo to-brand-purple text-white shadow-lg shadow-primary/20 hover:shadow-xl hover:shadow-primary/30 transition-shadow",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8 text-base",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


###############################################################################
### FILE: components/ui/Card.tsx
###############################################################################
import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div 
    ref={ref} 
    className={cn(
        "rounded-xl border bg-card/70 text-card-foreground shadow-sm backdrop-blur-sm",
        // Subtle gradient overlay for depth
        "relative after:absolute after:inset-0 after:rounded-xl after:bg-gradient-to-br after:from-primary/5 after:to-transparent after:opacity-20 dark:after:from-primary/10",
        className
        )} 
    {...props} 
  />
));
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6 z-10 relative", className)} {...props} />
));
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(({ className, ...props }, ref) => (
  <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
));
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (
  <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0 z-10 relative", className)} {...props} />
));
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center p-6 pt-0 z-10 relative", className)} {...props} />
));
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


###############################################################################
### FILE: components/ui/Checkbox.tsx
###############################################################################
// src/components/ui/Checkbox.tsx
import * as React from 'react';
import { cn } from '@/lib/utils';

export interface CheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(
  ({ className, ...props }, ref) => {
    return (
      <input
        type="checkbox"
        className={cn(
          'h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Checkbox.displayName = 'Checkbox';

export { Checkbox };


###############################################################################
### FILE: components/ui/Combobox.tsx
###############################################################################
"use client"

import * as React from "react"
import { PiCheck, PiCaretUpDownDuotone } from "react-icons/pi"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/Button"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from "@/components/ui/Command"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/Popover"

interface ComboboxProps {
  options: { value: string; label: string }[];
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  searchPlaceholder?: string;
  notFoundText?: string;
}

export function Combobox({ options, value, onChange, placeholder, searchPlaceholder, notFoundText }: ComboboxProps) {
  const [open, setOpen] = React.useState(false)

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
        >
          {value
            ? options.find((option) => option.value === value)?.label
            : placeholder || "Select option..."}
          <PiCaretUpDownDuotone className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
        <Command
          onKeyDown={(e: React.KeyboardEvent) => {
            if (e.key === "Enter" && !e.nativeEvent.isComposing) {
              const list = e.currentTarget.querySelector("[cmdk-list]");
              if (list?.children.length === 1) {
                (list.children[0] as HTMLElement).click();
                e.preventDefault();
              }
            }
          }}
        >
          <CommandInput placeholder={searchPlaceholder || "Search..."} />
          <CommandEmpty>{notFoundText || "No option found."}</CommandEmpty>
          <CommandGroup>
            {options.map((option) => (
              <CommandItem
                key={option.value}
                value={option.value}
                onSelect={(currentValue: string) => {
                  onChange(currentValue === value ? "" : currentValue)
                  setOpen(false)
                }}
              >
                <PiCheck
                  className={cn(
                    "mr-2 h-4 w-4",
                    value === option.value ? "opacity-100" : "opacity-0"
                  )}
                />
                {option.label}
              </CommandItem>
            ))}
          </CommandGroup>
        </Command>
      </PopoverContent>
    </Popover>
  )
} 


###############################################################################
### FILE: components/ui/Command.tsx
###############################################################################
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { PiMagnifyingGlassDuotone } from "react-icons/pi"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/Dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command>{children}</Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <PiMagnifyingGlassDuotone className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
} 


###############################################################################
### FILE: components/ui/Dialog.tsx
###############################################################################
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { PiX } from "react-icons/pi"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <PiX className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
} 


###############################################################################
### FILE: components/ui/Input.tsx
###############################################################################
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input } 


###############################################################################
### FILE: components/ui/InputField.tsx
###############################################################################
// src/components/ui/InputField.tsx
import * as React from "react"
import { cn } from "@/lib/utils"
import { Input, InputProps } from "@/components/ui/Input"

export interface InputFieldProps extends InputProps {
    label: string;
    id: string;
  subtitle?: string;
    containerClassName?: string;
  addon?: React.ReactNode;
}

const InputField = React.forwardRef<HTMLInputElement, InputFieldProps>(
  ({ label, id, subtitle, containerClassName, addon, ...props }, ref) => {
        return (
            <div className={cn("grid w-full items-center gap-1.5", containerClassName)}>
        <div className="flex items-center justify-between">
                <label htmlFor={id} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    {label}
                </label>
          {props.required && (
            <div className="text-xs font-semibold uppercase bg-destructive/10 text-destructive rounded-full px-2 py-0.5">
              Required
            </div>
          )}
        </div>
        {subtitle && (
          <p className={cn("text-xs text-muted-foreground", label && "-mt-1")}>{subtitle}</p>
        )}
        <div className="relative">
          <Input id={id} ref={ref} className={cn(addon ? "pr-12" : "", props.className)} {...props} />
          {addon && (
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
              <span className="text-muted-foreground sm:text-sm">{addon}</span>
            </div>
          )}
        </div>
            </div>
        )
    }
)
InputField.displayName = "InputField"

export { InputField }


###############################################################################
### FILE: components/ui/Label.tsx
###############################################################################
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label } 


###############################################################################
### FILE: components/ui/MultiAutocompleteInput.tsx
###############################################################################
import React, { useState, useRef, useEffect, KeyboardEvent } from 'react';
import { PiCheck, PiX } from 'react-icons/pi';
import { Button } from './Button';
import { Input } from './Input';
import { Popover, PopoverContent, PopoverTrigger } from './Popover';
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from './Command';
import { cn } from '@/lib/utils';

// This is a completely new, more robust component for handling multiple selections with custom additions.
// It will be used for the 'autocomplete' variant of the Text field and the 'textFallback' of Choice fields.

interface MultiAutocompleteInputProps {
  options: { value: string; label: string }[];
  value: {
    selected: string[];
    custom: string[];
  };
  onChange: (value: { selected: string[]; custom: string[] }) => void;
  placeholder?: string;
  color?: string; // For styling the tags
}

const TAG_COLOR_MAP: { [key: string]: string } = {
  primary: 'bg-primary/20 text-primary-foreground',
  secondary: 'bg-slate-500/20 text-slate-800 dark:text-slate-200',
  accent: 'bg-amber-500/20 text-amber-800 dark:text-amber-200',
  success: 'bg-emerald-500/20 text-emerald-800 dark:text-emerald-200',
  warning: 'bg-orange-500/20 text-orange-800 dark:text-orange-200',
  danger: 'bg-red-500/20 text-red-800 dark:text-red-200',
  blue: 'bg-blue-500/20 text-blue-800 dark:text-blue-200',
  indigo: 'bg-indigo-500/20 text-indigo-800 dark:text-indigo-200',
  purple: 'bg-purple-500/20 text-purple-800 dark:text-purple-200',
  pink: 'bg-pink-500/20 text-pink-800 dark:text-pink-200',
  teal: 'bg-teal-500/20 text-teal-800 dark:text-teal-200',
  cyan: 'bg-cyan-500/20 text-cyan-800 dark:text-cyan-200',
};

export const MultiAutocompleteInput: React.FC<MultiAutocompleteInputProps> = ({
  options,
  value,
  onChange,
  placeholder = 'Select or create...',
  color = 'primary',
}) => {
  const inputRef = useRef<HTMLInputElement>(null);
  const [inputValue, setInputValue] = useState('');
  const [isOpen, setIsOpen] = useState(false);

  // Ensure value is always in the correct format
  const safeValue = {
    selected: Array.isArray(value?.selected) ? value.selected : [],
    custom: Array.isArray(value?.custom) ? value.custom : [],
  };

  const selectedValues = new Set(safeValue.selected);

  const handleUnselect = (optionValue: string) => {
    onChange({ ...safeValue, selected: safeValue.selected.filter(v => v !== optionValue) });
  };
  
  const handleRemoveCustom = (customValue: string) => {
    onChange({ ...safeValue, custom: safeValue.custom.filter(v => v !== customValue) });
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && inputValue.trim()) {
      e.preventDefault();
      const newCustomValue = inputValue.trim();
      if (!safeValue.custom.includes(newCustomValue) && !options.some(opt => opt.label.toLowerCase() === newCustomValue.toLowerCase())) {
        onChange({ ...safeValue, custom: [...safeValue.custom, newCustomValue] });
        setInputValue('');
      }
    } else if (e.key === 'Backspace' && !inputValue) {
      if (safeValue.custom.length > 0) {
        handleRemoveCustom(safeValue.custom[safeValue.custom.length - 1]);
      } else if (safeValue.selected.length > 0) {
        handleUnselect(safeValue.selected[safeValue.selected.length - 1]);
      }
    }
  };

  const selectedOptions = options.filter(opt => selectedValues.has(opt.value));
  const displayedItems = [
    ...selectedOptions.map(opt => ({ type: 'selected' as const, ...opt })),
    ...safeValue.custom.map(val => ({ type: 'custom' as const, value: val, label: val }))
  ];

  const getTagStyle = (itemType: 'selected' | 'custom'): React.CSSProperties => {
    if (color.startsWith('#') && itemType === 'selected') {
      return { backgroundColor: `${color}33`, color: color };
    }
    return {};
  }
  
  const getTagClassName = (itemType: 'selected' | 'custom'): string => {
    if (itemType === 'custom') return 'bg-secondary text-secondary-foreground';
    if (color.startsWith('#')) return 'border border-current';
    return TAG_COLOR_MAP[color] || TAG_COLOR_MAP.primary;
  }

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <div className="group w-full rounded-md border border-input bg-background text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2">
          <div className="flex flex-wrap gap-1.5 p-2 items-center">
            {displayedItems.map((item) => (
              <div
                key={`${item.type}-${item.value}`}
                className={cn(
                  "flex items-center gap-1.5 rounded-full px-2.5 py-1 text-xs font-medium",
                  getTagClassName(item.type)
                )}
                style={getTagStyle(item.type)}
              >
                {item.label}
                <button
                  onClick={() => item.type === 'selected' ? handleUnselect(item.value) : handleRemoveCustom(item.value)}
                  className="rounded-full hover:bg-black/10 p-0.5"
                >
                  <PiX className="h-3 w-3" aria-hidden="true" />
                  <span className="sr-only">Remove {item.label}</span>
                </button>
              </div>
            ))}
            <Command>
              <CommandInput
                ref={inputRef}
                value={inputValue}
                onValueChange={setInputValue}
                onKeyDown={handleKeyDown}
                placeholder={displayedItems.length > 0 ? '' : placeholder}
                className="flex-1 bg-transparent border-none shadow-none h-auto p-0 focus-visible:ring-0 min-w-[120px]"
                onFocus={() => setIsOpen(true)}
              />
            </Command>
          </div>
        </div>
      </PopoverTrigger>

      <PopoverContent className="w-[--radix-popover-trigger-width] p-0" align="start">
        <Command>
          <CommandList>
            <CommandEmpty>
                {inputValue.trim() ? `Press Enter to add "${inputValue.trim()}"` : 'No results found.'}
            </CommandEmpty>
            <CommandGroup>
              {options.map((option) => {
                const isSelected = selectedValues.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => {
                      if (isSelected) {
                        handleUnselect(option.value);
                      } else {
                        onChange({ ...safeValue, selected: [...safeValue.selected, option.value] });
                      }
                      setInputValue('');
                    }}
                    className="cursor-pointer"
                  >
                     <PiCheck className={cn("mr-2 h-4 w-4", isSelected ? "opacity-100" : "opacity-0")} />
                    {option.label}
                  </CommandItem>
                );
              })}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}; 


###############################################################################
### FILE: components/ui/PageHeader.tsx
###############################################################################
// src/components/ui/PageHeader.tsx
import React from 'react';
import { IconType } from 'react-icons';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const pageHeaderVariants = cva(
  "relative overflow-hidden bg-card border-b shadow-md mb-6",
  {
    variants: {
      gradient: {
        primary: "[--gradient-from:theme(colors.blue.500)] [--gradient-to:theme(colors.indigo.600)]",
        secondary: "[--gradient-from:theme(colors.emerald.500)] [--gradient-to:theme(colors.cyan.500)]",
        accent: "[--gradient-from:theme(colors.orange.500)] [--gradient-to:theme(colors.pink.500)]",
      }
    },
    defaultVariants: {
      gradient: "primary",
    },
  }
);

const iconWrapperVariants = cva(
  "p-2 rounded-lg bg-background/80 shadow-md",
  {
    variants: {
      gradient: {
        primary: "text-blue-500 dark:text-blue-400",
        secondary: "text-emerald-500 dark:text-emerald-400",
        accent: "text-orange-500 dark:text-orange-400",
      }
    },
    defaultVariants: {
      gradient: "primary",
    },
  }
)

export interface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof pageHeaderVariants> {
  title: string;
  subtitle?: string;
  icon?: IconType;
}

const PageHeader = React.forwardRef<HTMLDivElement, PageHeaderProps>(
  ({ className, gradient, title, subtitle, icon: Icon, children, ...props }, ref) => {
    return (
      <div className={cn(pageHeaderVariants({ gradient, className }))} ref={ref} {...props}>
        <div className="absolute inset-0 opacity-10 dark:opacity-[0.07] bg-gradient-to-r from-[--gradient-from] to-[--gradient-to]"></div>
        
        <div className="relative z-10 px-4 sm:px-6 py-6 sm:py-8">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-1">
                {Icon && (
                  <div className={cn(iconWrapperVariants({ gradient }))}>
                    <Icon className="w-6 h-6" />
                  </div>
                )}
                <h1 className="text-2xl sm:text-3xl font-bold text-foreground">
                  {title}
                </h1>
              </div>
              {subtitle && (
                <p className="text-muted-foreground text-lg max-w-2xl pl-12 -mt-1">
                  {subtitle}
                </p>
              )}
            </div>
            
            {children && (
              <div className="flex-shrink-0">
                {children}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
)
PageHeader.displayName = "PageHeader"

export { PageHeader };


###############################################################################
### FILE: components/ui/Popover.tsx
###############################################################################
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent } 


###############################################################################
### FILE: components/ui/RadioGroup.tsx
###############################################################################
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { PiCircleFill } from "react-icons/pi"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <PiCircleFill className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem } 


###############################################################################
### FILE: components/ui/Select.tsx
###############################################################################
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { PiCheck, PiCaretDownDuotone, PiCaretUpDuotone } from 'react-icons/pi'

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <PiCaretDownDuotone className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <PiCheck className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
} 


###############################################################################
### FILE: components/ui/Slider.tsx
###############################################################################
// src/components/ui/Slider.tsx
import * as React from 'react'
import * as SliderPrimitive from '@radix-ui/react-slider'
import { cn } from '@/lib/utils'

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { min = 0, max = 100, value = [0] } = props;
  const currentValue = value[0];
  const isBipolar = min < 0 && max > 0;

  // This function calculates the correct 'left' and 'right' CSS properties 
  // for the slider's range to ensure it always fills from the '0' point.
  const getRangeStyle = (): React.CSSProperties => {
    // For a standard unipolar slider (e.g., 0-100), no special styles are needed.
    // The range will automatically fill from the start.
    if (!isBipolar) {
      return {};
    }

    // For a bipolar slider (e.g., -100 to 100), we calculate positions as percentages.
    const totalRange = max - min;
    if (totalRange <= 0) return {}; // Avoid division by zero

    // Find the position of '0' on the track.
    const zeroPositionPercent = (-min / totalRange) * 100;
    // Find the position of the current value on the track.
    const valuePositionPercent = ((currentValue - min) / totalRange) * 100;

    // If the value is positive, the range fills from '0' to the current value.
    if (currentValue >= 0) {
      return {
        left: `${zeroPositionPercent}%`,
        right: `${100 - valuePositionPercent}%`,
      };
    } 
    // If the value is negative, the range fills from the current value to '0'.
    else {
      return {
        left: `${valuePositionPercent}%`,
        right: `${100 - zeroPositionPercent}%`,
      };
    }
  };

  return (
    <SliderPrimitive.Root
      ref={ref}
      className={cn('relative flex w-full touch-none select-none items-center', className)}
      {...props}
    >
      <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
        <SliderPrimitive.Range 
          className={cn(
            "absolute h-full",
            currentValue < 0 ? "bg-destructive" : "bg-primary"
          )} 
          style={getRangeStyle()} 
        />
      </SliderPrimitive.Track>
      <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
    </SliderPrimitive.Root>
  );
});
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }


###############################################################################
### FILE: components/ui/Stepper.tsx
###############################################################################
// src/components/ui/Stepper.tsx
import React from 'react';
import { Button } from './Button';
import { PiPlus, PiMinus } from 'react-icons/pi';

interface StepperProps {
  value: number;
  onValueChange: (newValue: number) => void;
  min?: number;
  max?: number;
  step?: number;
}

const Stepper: React.FC<StepperProps> = ({ value, onValueChange, min = 0, max = 100, step = 1 }) => {
  const handleDecrement = () => {
    onValueChange(Math.max(min, value - step));
  };
  const handleIncrement = () => {
    onValueChange(Math.min(max, value + step));
  };

  return (
    <div className="flex items-center">
      <Button variant="outline" size="icon" className="h-9 w-9" onClick={handleDecrement} disabled={value <= min}>
        <PiMinus />
      </Button>
      <Button variant="outline" size="icon" className="h-9 w-9" onClick={handleIncrement} disabled={value >= max}>
        <PiPlus />
      </Button>
    </div>
  );
};

export default Stepper;


###############################################################################
### FILE: components/ui/Switch.tsx
###############################################################################
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch } 


###############################################################################
### FILE: components/ui/Textarea.tsx
###############################################################################
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea } 


###############################################################################
### FILE: components/ui/TextareaField.tsx
###############################################################################
// src/components/ui/TextareaField.tsx
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = 'Textarea'

export interface TextareaFieldProps extends TextareaProps {
  label: string;
  id: string;
  containerClassName?: string;
}

const TextareaField = React.forwardRef<HTMLTextAreaElement, TextareaFieldProps>(
  ({ label, id, required, containerClassName, className, ...props }, ref) => {
    return (
      <div className={cn('grid w-full items-center gap-1.5', containerClassName)}>
        <label htmlFor={id} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
          {label}
          {required && <span className="text-destructive ml-1">*</span>}
        </label>
        <Textarea id={id} ref={ref} required={required} className={className} {...props} />
      </div>
    )
  }
)
TextareaField.displayName = "TextareaField"

export { TextareaField, Textarea }


###############################################################################
### FILE: config/formBuilder.config.ts
###############################################################################
// src/config/formBuilder.config.ts
import { PiTextT, PiNumberCircleOne, PiToggleLeft, PiListDashes, PiListNumbers, PiColumnsDuotone, PiPaintBrushBroadDuotone } from 'react-icons/pi';

export type FieldPrimitiveType = 'text' | 'number' | 'boolean' | 'singleChoice' | 'multipleChoice' | 'date' | 'section';
export type FieldColor = 'primary' | 'secondary' | 'accent' | 'success' | 'warning' | 'danger';

export const FIELD_COLORS: { name: FieldColor, className: string }[] = [
    { name: 'primary', className: 'border-primary/50 bg-primary/5 text-primary' },
    { name: 'secondary', className: 'border-slate-500/50 bg-slate-500/5 text-slate-600 dark:text-slate-300' },
    { name: 'accent', className: 'border-amber-500/50 bg-amber-500/5 text-amber-600 dark:text-amber-400' },
    { name: 'success', className: 'border-emerald-500/50 bg-emerald-500/5 text-emerald-600 dark:text-emerald-400' },
    { name: 'warning', className: 'border-orange-500/50 bg-orange-500/5 text-orange-600 dark:text-orange-400' },
    { name: 'danger', className: 'border-red-500/50 bg-red-500/5 text-red-600 dark:text-red-400' },
];

export interface FieldPrimitive {
  type: FieldPrimitiveType;
  label: string;
  icon: React.ComponentType<any>;
  defaultSchema: any;
  defaultUiSchema: any;
}

export const FORM_BUILDER_PRIMITIVES: FieldPrimitive[] = [
  {
    type: 'section',
    label: 'Section',
    icon: PiColumnsDuotone,
    defaultSchema: {
      type: 'object',
      title: 'Untitled Section',
      description: '',
      properties: {},
    },
    defaultUiSchema: {
      'ui:widget': 'SectionWidget',
      'ui:order': [],
      'ui:options': {
        columns: 1,
        color: 'secondary',
      },
    },
  },
  {
    type: 'text',
    label: 'Text',
    icon: PiTextT,
    defaultSchema: {
      type: 'string',
      title: 'Untitled Text Field',
      description: '',
    },
    defaultUiSchema: {
      'ui:widget': 'TextWidget',
      'ui:options': {
        placeholder: 'Enter text...',
        color: 'primary',
      },
    },
  },
  {
    type: 'number',
    label: 'Number',
    icon: PiNumberCircleOne,
    defaultSchema: {
      type: 'number',
      title: 'Untitled Number Field',
      description: '',
    },
    defaultUiSchema: {
      'ui:widget': 'NumberWidget',
      'ui:options': {
        unit: '',
        enabledInputs: ['inputBox'],
        color: 'primary',
      },
    },
  },
  {
    type: 'boolean',
    label: 'Boolean',
    icon: PiToggleLeft,
    defaultSchema: {
      type: 'boolean',
      title: 'Untitled Boolean Field',
      description: '',
    },
    defaultUiSchema: {
      'ui:widget': 'BooleanWidget',
      'ui:options': {
        displayAs: 'checkbox', // or 'toggle'
        trueLabel: 'Yes',
        falseLabel: 'No',
        color: 'primary',
      },
    },
  },
    {
    type: 'singleChoice',
    label: 'Single Choice',
    icon: PiListNumbers,
    defaultSchema: {
      type: 'string',
      title: 'Untitled Single Choice',
      description: '',
      enum: ['option1', 'option2'],
      enumNames: ['Option 1', 'Option 2'],
    },
    defaultUiSchema: {
      'ui:widget': 'ChoiceWidget',
      'ui:options': {
        displayAs: 'radio', // or 'dropdown'
        color: 'primary',
      },
    },
  },
    {
    type: 'multipleChoice',
    label: 'Multiple Choice',
    icon: PiListDashes,
    defaultSchema: {
      type: 'array',
      title: 'Untitled Multiple Choice',
      description: '',
      items: {
        type: 'string',
        enum: ['option1', 'option2'],
        enumNames: ['Option 1', 'Option 2'],
      },
      uniqueItems: true,
    },
    defaultUiSchema: {
      'ui:widget': 'ChoiceWidget',
      'ui:options': {
        displayAs: 'checkboxGroup',
        color: 'primary',
      },
    },
  },
];


###############################################################################
### FILE: data/index.ts
###############################################################################
export * from './mockData';
export * as preAnestesiaOptions from './preAnestesiaOptions';
export * as intraoperatoriaOptions from './intraoperatoriaOptions';


###############################################################################
### FILE: data/intraoperatoriaOptions.ts
###############################################################################
// src/data/intraoperatoriaOptions.ts
export interface OptionInfo { value: string; label: string; }

export const procedimentoOptions: OptionInfo[] = [
    { value: 'broncoscopia_flexivel', label: 'Broncoscopia flexível' },
    { value: 'broncoscopia_rigida', label: 'Broncoscopia rígida' },
];


###############################################################################
### FILE: data/mockData.ts
###############################################################################
import { Project } from '@/types';

export const mockProjects: Project[] = [
  {
    id: 'proj_crest_001',
    name: 'CREST - Estudo Piloto Alagoas',
    description: 'Coleta de dados para o projeto Respirar em cirurgias pediátricas de via aérea no estado de Alagoas.',
    goals: 'Desenvolver um protocolo ERAS específico para cirurgia de via aérea pediátrica, visando reduzir complicações e tempo de internação.',
    members: [
      { userId: 'userLead123', roles: ['ProjectLead', 'Researcher', 'FormDesigner', 'DataEntry'] },
      { userId: 'user456', roles: ['DataEntry', 'Researcher'] },
    ],
  },
  {
    id: 'proj_eras_002',
    name: 'ERAS Pediátrico - Hospital Central',
    description: 'Implementação e avaliação de protocolos ERAS em cirurgia torácica pediátrica no Hospital Central.',
    goals: 'Avaliar a eficácia do protocolo ERAS em reduzir o tempo de recuperação e complicações em pacientes pediátricos submetidos a cirurgia torácica.',
    members: [
      { userId: 'userLead123', roles: ['Researcher'] },
      { userId: 'anotherLeadUser', roles: ['ProjectLead'] },
    ],
  },
];


###############################################################################
### FILE: data/mockForms.ts
###############################################################################
import { FormSchema, FormUiSchema } from "@/stores/formBuilderStore";

export interface SavedForm {
    id: string;
    projectId: string;
    name: string;
    schema: FormSchema;
    uiSchema: FormUiSchema;
}

const preAnestesiaForm: SavedForm = {
    id: 'form_pre_anestesia_001',
    projectId: 'proj_crest_001',
    name: 'Avaliação Pré-Anestésica',
    schema: {
        title: 'Avaliação Pré-Anestésica',
        description: 'Formulário para coleta de dados do paciente antes do procedimento.',
        type: 'object',
        properties: {
            "section_basic_info": {
                type: "object",
                title: "Informações Básicas",
                properties: {
                    idade: { type: 'number', title: 'Idade (anos)' },
                    peso: { type: 'number', title: 'Peso (kg)' },
                    sexo: { type: 'string', title: 'Sexo', enum: ['F', 'M'], enumNames: ['Feminino', 'Masculino'] }
                }
            },
            "section_history": {
                type: "object",
                title: "Histórico Clínico",
                properties: {
                    diagnosticos: {
                        type: 'array', title: 'Diagnóstico(s)',
                        items: { type: 'string', enum: ['laringomalacia', 'estenose_subglotica_congenita', 'fistula_traqueoesofagica', 'cleft_laringeo', 'paralisia_bilateral_cordas_vocais', 'estenose_traqueal_pos_intubacao', 'colapso_traqueal_congenito', 'fibroma_epifaringeo', 'estreitamento_arvore_bronquica', 'anel_vascular', 'cisto_broncogenico', 'cisto_paravalecular', 'fistula_traqueopleural', 'papilomatose_respiratoria_recorrente', 'hemangioma_subglotico', 'corpo_estranho'] },
                        uniqueItems: true
                    },
                    comorbidades: {
                        type: 'array', title: 'Comorbidade(s)',
                        items: { type: 'string', enum: ['prematuridade', 'cardiopatia_congenita', 'asma', 'sindrome_pierre_robin', 'doenca_neurologica', 'fibrose_cistica', 'tuberculose', 'malformacao_pulmonar', 'imunodeficiencia', 'disturbio_metabolico'] },
                        uniqueItems: true
                    },
                    queixas: {
                        type: 'array', title: 'Queixa(s)',
                        items: { type: 'string', enum: ['tosse_cronica', 'estridor', 'infeccoes_respiratorias_recorrentes', 'sibilancia', 'sangramento', 'atelectasia'] },
                        uniqueItems: true
                    }
                }
            }
        }
    },
    uiSchema: {
        'ui:root': { 'ui:order': ['section_basic_info', 'section_history'] },
        'section_basic_info': { 'ui:widget': 'SectionWidget', 'ui:order': ['idade', 'peso', 'sexo'], 'ui:options': { columns: 3 } },
        'idade': { 'ui:widget': 'NumberWidget' },
        'peso': { 'ui:widget': 'NumberWidget' },
        'sexo': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'dropdown' } },
        'section_history': { 'ui:widget': 'SectionWidget', 'ui:order': ['diagnosticos', 'comorbidades', 'queixas'], 'ui:options': { columns: 3 } },
        'diagnosticos': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'autocompleteTags', quickOptions: ['laringomalacia', 'estenose_subglotica_congenita', 'fistula_traqueoesofagica'] } },
        'comorbidades': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'autocompleteTags', quickOptions: ['prematuridade', 'cardiopatia_congenita', 'asma'] } },
        'queixas': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'autocompleteTags', quickOptions: ['tosse_cronica', 'estridor', 'sibilancia'] } },
    }
};

const intraoperatoriaForm: SavedForm = {
    id: 'form_intraoperatoria_001',
    projectId: 'proj_crest_001',
    name: 'Formulário Intraoperatório',
    schema: {
        title: 'Formulário Intraoperatório',
        description: "Coleta de dados durante o procedimento cirúrgico.",
        type: 'object',
        properties: {
            "section_proc": { type: "object", title: "Procedimento", properties: {
                procedimento: { type: 'string', title: 'Procedimento', enum: ['broncoscopia_flexivel', 'broncoscopia_rigida', 'traqueoscopia', 'dilatacao_traqueal', 'traqueoplastia'], enumNames: ['Broncoscopia flexível', 'Broncoscopia rígida', 'Traqueoscopia', 'Dilatação Traqueal', 'Traqueoplastia'] },
                anestesia: { type: 'string', title: 'Anestesia', enum: ['geral', 'sedacao_profunda'], enumNames: ['Geral', 'Sedação Profunda'] }
            }},
            "section_inducao": { type: "object", title: "Fármacos para Indução", properties: {
                lido: { type: 'number', title: 'Lidocaína (mg)' }, fenta: { type: 'number', title: 'Fentanil (mcg)' }, sufenta: { type: 'number', title: 'Sufentanil (mcg)' }, dexme_ind: { type: 'number', title: 'Dexmedetomidina (mcg)' }, keta: { type: 'number', title: 'Cetamina (mg)' }, mida: { type: 'number', title: 'Midazolam (mg)' }, propo_ind: { type: 'number', title: 'Propofol (mg)' }, etomi: { type: 'number', title: 'Etomidato (mg)' }, sevo_ind: { type: 'string', title: 'Sevoflurano (%)' },
            }},
            "section_manutencao": { type: "object", title: "Fármacos para Manutenção", properties: {
                remi: { type: 'number', title: 'Remifentanil (mcg/kg/min)' }, propo_maint: { type: 'number', title: 'Propofol (mcg/kg/min)' }, dexme_maint: { type: 'number', title: 'Dexmedetomidina (mcg/kg/h)' }, sevo_maint: { type: 'string', title: 'Sevoflurano (%)' },
            }},
            "section_adjuvantes": { type: "object", title: "Fármacos Adjuvantes", properties: {
                clon: { type: 'number', title: 'Clonidina (mcg)' }, mgso4: { type: 'number', title: 'Sulfato de Magnésio (mg)' }
            }},
            "section_sintomaticos": { type: "object", title: "Sintomáticos", properties: {
                dipi: { type: 'number', title: 'Dipirona (mg)' }, onda: { type: 'number', title: 'Ondansentrona (mg)' }, salbu: { type: 'number', title: 'Salbutamol (puffs)' }, dexa: { type: 'number', title: 'Dexametasona (mg)' },
            }},
            "section_suporte": { type: "object", title: "Suporte e Intercorrências", properties: {
                suporte_oxigenio: { type: 'array', title: 'Suporte de Oxigênio', items: { type: 'string', enum: ['cateter_nasal', 'sonda_aspiracao_periglotica'], enumNames: ['Cateter nasal', 'Sonda de aspiração periglótica'] }, uniqueItems: true },
                suporte_ventilatorio: { type: 'array', title: 'Suporte Ventilatório', items: { type: 'string', enum: ['mascara_laringea', 'tubo_orotraqueal'], enumNames: ['Máscara laríngea', 'Tubo orotraqueal'] }, uniqueItems: true },
                "section_intercorrencias": { type: "object", title: "Intercorrências", properties: {
                    dessaturacao: { type: 'string', title: 'Nível de Dessaturação', enum: ['none', 'dessaturacao_85_92', 'dessaturacao_75_85', 'dessaturacao_lt_70'], enumNames: ['Não ocorreu', 'Dessaturação (85-92%)', 'Dessaturação (75-85%)', 'Dessaturação (<70%)'] },
                    outras_intercorrencias: { type: 'array', title: 'Outras Intercorrências', items: { type: 'string', enum: ['broncoespasmo', 'laringoespasmo', 'sangramento', 'reflexo_tosse_nao_abolido'], enumNames: ['Broncoespasmo', 'Laringoespasmo', 'Sangramento', 'Reflexo de tosse não abolido'] }, uniqueItems: true }
                }}
            }},
        }
    },
    uiSchema: {
        'ui:root': { 'ui:order': ['section_proc', 'section_inducao', 'section_manutencao', 'section_adjuvantes', 'section_sintomaticos', 'section_suporte'] },
        'section_proc': { 'ui:widget': 'SectionWidget', 'ui:order': ['procedimento', 'anestesia'], 'ui:options': { columns: 2 } },
        'procedimento': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'dropdown' } },
        'anestesia': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'dropdown' } },
        'section_inducao': { 'ui:widget': 'SectionWidget', 'ui:order': ['lido', 'fenta', 'sufenta', 'dexme_ind', 'keta', 'mida', 'propo_ind', 'etomi', 'sevo_ind'], 'ui:options': { columns: 3 } },
        'lido': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'fenta': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'sufenta': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'dexme_ind': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'keta': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'mida': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'propo_ind': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'etomi': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'sevo_ind': { 'ui:widget': 'TextWidget', 'ui:options': { toggled: true } },
        'section_manutencao': { 'ui:widget': 'SectionWidget', 'ui:order': ['remi', 'propo_maint', 'dexme_maint', 'sevo_maint'], 'ui:options': { columns: 3 } },
        'remi': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'propo_maint': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'dexme_maint': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'sevo_maint': { 'ui:widget': 'TextWidget', 'ui:options': { toggled: true } },
        'section_adjuvantes': { 'ui:widget': 'SectionWidget', 'ui:order': ['clon', 'mgso4'], 'ui:options': { columns: 3 } },
        'clon': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'mgso4': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } },
        'section_sintomaticos': { 'ui:widget': 'SectionWidget', 'ui:order': ['dipi', 'onda', 'salbu', 'dexa'], 'ui:options': { columns: 3 } },
        'dipi': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'onda': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'salbu': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } }, 'dexa': { 'ui:widget': 'NumberWidget', 'ui:options': { toggled: true } },
        'section_suporte': { 'ui:widget': 'SectionWidget', 'ui:order': ['suporte_oxigenio', 'suporte_ventilatorio', 'section_intercorrencias'], 'ui:options': { columns: 2 } },
        'suporte_oxigenio': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'checkboxGroup' } },
        'suporte_ventilatorio': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'checkboxGroup' } },
        'section_intercorrencias': { 'ui:widget': 'SectionWidget', 'ui:order': ['dessaturacao', 'outras_intercorrencias'], 'ui:options': { columns: 1 } },
        'dessaturacao': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'radio' } },
        'outras_intercorrencias': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'checkboxGroup' } }
    }
};

const recuperacaoForm: SavedForm = {
    id: 'form_recuperacao_001',
    projectId: 'proj_crest_001',
    name: 'Recuperação Pós-Anestésica',
    schema: {
        title: 'Recuperação Pós-Anestésica',
        description: 'Dados da recuperação do paciente.',
        type: 'object',
        properties: {
            "section_main": { type: "object", title: "Recuperação", properties: {
                tempo_recuperacao: { type: 'string', title: 'Tempo de Recuperação (Aldrette > 9)', enum: ['ate_30', 'ate_45', 'entre_45_60', 'mais_60'], enumNames: ['Até 30 minutos', 'Até 45 minutos', 'Entre 45-60 minutos', '> 60 minutos'] },
                "section_intercorrencias": { type: "object", title: "Intercorrências / Queixas", properties: {
                    dessaturacao_pos: { type: 'string', title: 'Nível de Dessaturação (se ocorrido)', enum: ['none', 'dessaturacao_85_92', 'dessaturacao_75_85', 'dessaturacao_lt_70'], enumNames: ['Não ocorreu', 'Dessaturação (85-92%)', 'Dessaturação (75-85%)', 'Dessaturação (<70%)'] },
                    outras_queixas_pos: { type: 'array', title: 'Outras', items: { type: 'string', enum: ['broncoespasmo', 'laringoespasmo', 'sangramento', 'tosse', 'dor', 'vomitos', 'prurido', 'sialorreia'], enumNames: ['Broncoespasmo', 'Laringoespasmo', 'Sangramento', 'Tosse', 'Dor', 'Vômitos', 'Prurido', 'Sialorreia'] }, uniqueItems: true }
                }}
            }}
        }
    },
    uiSchema: {
        'ui:root': { 'ui:order': ['section_main'] },
        'section_main': { 'ui:widget': 'SectionWidget', 'ui:order': ['tempo_recuperacao', 'section_intercorrencias'], 'ui:options': { columns: 2 } },
        'tempo_recuperacao': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'radio' } },
        'section_intercorrencias': { 'ui:widget': 'SectionWidget', 'ui:order': ['dessaturacao_pos', 'outras_queixas_pos'] },
        'dessaturacao_pos': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'radio' } },
        'outras_queixas_pos': { 'ui:widget': 'ChoiceWidget', 'ui:options': { displayAs: 'checkboxGroup' } }
    }
};

export const mockProjectForms: SavedForm[] = [
    preAnestesiaForm,
    intraoperatoriaForm,
    recuperacaoForm,
]; 


###############################################################################
### FILE: data/preAnestesiaOptions.ts
###############################################################################
// src/data/preAnestesiaOptions.ts
import { AutocompleteOption } from '@/types';

export const commonDiagnoses: AutocompleteOption[] = [
  { value: 'laringomalacia', label: 'Laringomalácia', icd10: 'J38.5' },
  { value: 'estenose_subglotica_congenita', label: 'Estenose subglótica congênita', icd10: 'Q31.1' },
];
export const allDiagnosesSample: AutocompleteOption[] = [
  ...commonDiagnoses,
  { value: 'estenose_traqueal_pos_intubacao', label: 'Estenose traqueal pós intubação', icd10: 'J95.5' }, 
];


###############################################################################
### FILE: index.css
###############################################################################
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --header-height: 64px;
    --radius: 0.75rem;

    /* Light Mode Palette */
    --background: 220 20% 98%;
    --foreground: 224 71.4% 4.1%;
    --card: 255 100% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 255 100% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 221.2 83.2% 53.3%;
  }

  .dark {
    /* Dark Mode Palette - Richer, deeper colors */
    --background: 225 25% 6%;
    --foreground: 210 20% 98%;
    --card: 225 25% 9%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 210 20% 98%;
    --secondary: 215 28% 17%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 28% 17%;
    --muted-foreground: 218 11% 65%;
    --accent: 215 28% 17%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 28% 17%;
    --input: 215 28% 17%;
    --ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  /* Sophisticated Static Gradient Mesh Background */
  body::before {
    content: '';
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    width: 100vw; height: 100vh;
    background: 
      radial-gradient(ellipse at 10% 15%, hsl(var(--primary) / 0.08), transparent 50%),
      radial-gradient(ellipse at 80% 20%, hsl(270 90% 55% / 0.08), transparent 50%),
      radial-gradient(ellipse at 20% 80%, hsl(200 90% 55% / 0.08), transparent 50%),
      radial-gradient(ellipse at 90% 85%, hsl(var(--primary) / 0.08), transparent 50%);
    z-index: -1;
    pointer-events: none;
  }
}

/* Utilities for gradient text effects */
@layer utilities {
    .text-gradient-primary {
      @apply bg-gradient-to-r from-brand-blue via-brand-indigo to-brand-purple text-transparent bg-clip-text;
    }
    .text-gradient-cool {
      @apply bg-gradient-to-r from-brand-emerald via-brand-teal to-brand-cyan text-transparent bg-clip-text;
    }
}


###############################################################################
### FILE: lib/utils.ts
###############################################################################
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


###############################################################################
### FILE: main.tsx
###############################################################################
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)


###############################################################################
### FILE: pages/CreateProjectPage.tsx
###############################################################################
// src/pages/CreateProjectPage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { PageHeader } from '@/components/ui/PageHeader';
import { Card, CardContent, CardFooter } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { InputField } from '@/components/ui/InputField';
import { TextareaField } from '@/components/ui/TextareaField';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import { PiPlus, PiArrowLeft } from 'react-icons/pi';

const CreateProjectPage: React.FC = () => {
  const navigate = useNavigate();
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [goals, setGoals] = useState('');
  const [error, setError] = useState('');
  const addProject = useProjectStore(state => state.addProject);
  const setActiveProject = useProjectStore(state => state.setActiveProject);
  const user = useAuthStore(state => state.user);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (!name.trim()) {
      setError('Project name is required.');
      return;
    }
    if (!user) {
      setError('You must be logged in to create a project.');
      return;
    }
    setError('');

    const newProject = {
      id: `proj_${new Date().getTime()}`,
      name,
      description,
      goals,
      members: [{ userId: user.id, roles: ['ProjectLead', 'Researcher'] }],
    };
    
    addProject(newProject);
    setActiveProject(newProject.id);
    navigate(`/project/${newProject.id}`);
  };

  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-4xl mx-auto space-y-6">
      <Button variant="ghost" onClick={() => navigate(-1)} className="self-start">
        <PiArrowLeft className="mr-2" />
        Back
      </Button>
      <PageHeader
        title="Create New Project"
        subtitle="Define the scope and goals of your new research initiative."
        icon={PiPlus}
      />
      <Card>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-6 pt-6">
            <InputField
              id="projectName"
              label="Project Name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="e.g., ERAS Protocol for Pediatric Thoracic Surgery"
              required
            />
            <TextareaField
              id="projectDescription"
              label="Project Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="A brief summary of the project's main purpose and scope."
              rows={4}
            />
            <TextareaField
              id="projectGoals"
              label="Project Goals"
              value={goals}
              onChange={(e) => setGoals(e.target.value)}
              placeholder="List the primary objectives and aims of this research project."
              rows={4}
            />
            {error && <p className="text-sm text-destructive">{error}</p>}
          </CardContent>
          <CardFooter>
            <Button type="submit" className="ml-auto">
              <PiPlus className="mr-2" />
              Create Project
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};

export default CreateProjectPage;


###############################################################################
### FILE: pages/DashboardPage.tsx
###############################################################################
// src/pages/DashboardPage.tsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import ProjectCard from '@/components/dashboard/ProjectCard';
import DashboardGreetingCard from '@/components/dashboard/DashboardGreetingCard';
import { Button } from '@/components/ui/Button';
import { PiUsersDuotone } from 'react-icons/pi';
import { Project } from '@/types';

const DashboardPage: React.FC = () => {
  const { availableProjects, fetchAvailableProjects, isLoading } = useProjectStore();
  const { user, isAuthenticated } = useAuthStore();
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated) {
      fetchAvailableProjects();
    }
  }, [isAuthenticated, fetchAvailableProjects]);
  
  const userProjects = user
    ? availableProjects.filter((p: Project) => p.members.some((m) => m.userId === user.id))
    : [];

  const handleCreateNewProject = () => navigate('/create-project');

  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto space-y-8 animate-fade-in">
      <DashboardGreetingCard onCreateNewProject={handleCreateNewProject} />

      <section>
        <h2 className="text-2xl font-bold text-foreground mb-4">My Projects</h2>
        {isLoading && userProjects.length === 0 && (
            <p className="text-muted-foreground">Loading projects...</p>
        )}
        {!isLoading && userProjects.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {userProjects.map((project: Project) => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
        ) : (
          !isLoading && (
            <div className="text-center py-16 bg-card border-2 border-dashed rounded-xl">
              <PiUsersDuotone className="text-5xl text-muted-foreground mx-auto mb-4" />
              <h3 className="text-xl font-semibold">No Projects Yet</h3>
              <p className="text-muted-foreground mt-2 mb-6">Get started by creating your first research project.</p>
              <Button onClick={handleCreateNewProject} size="lg" variant="gradient">Create a Project</Button>
            </div>
          )
        )}
      </section>
    </div>
  );
};

export default DashboardPage;


###############################################################################
### FILE: pages/DataSubmissionPage.tsx
###############################################################################
// src/pages/project/DataSubmissionsHubPage.tsx
import React from 'react';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiListChecksDuotone, PiPlusCircleDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/Card';
import { useNavigate, useParams } from 'react-router-dom'; // + Import hooks

const DataSubmissionsHubPage: React.FC = () => {
    const navigate = useNavigate(); // + Get navigation function
    const { projectId } = useParams(); // + Get projectId from URL

    // In the future, this will fetch a list of encounters from a store
    const mockEncounters = [
        { id: 'enc-001', patient: 'JS / M / 2017-02-04', status: 'In Progress', step: 'Intraoperative', updated: '5m ago' },
        { id: 'enc-002', patient: 'AB / F / 2018-05-10', status: 'Completed', step: 'N/A', updated: '2h ago' },
        { id: 'enc-003', patient: 'CD / M / 2016-11-22', status: 'Flagged for Review', step: 'Post-Op', updated: '1d ago' },
    ];

    const handleStartNew = () => {
        // + Navigate to the new encounter page
        navigate(`/project/${projectId}/submissions/new`);
    }
    
    const handleResume = (encounterId: string) => {
        // + Navigate to the specific encounter page
        navigate(`/project/${projectId}/submissions/${encounterId}`);
    }

    return (
        <div className="space-y-6">
            <PageHeader
                title="Data Submissions"
                subtitle="Manage ongoing patient encounters or start a new data submission."
                icon={PiListChecksDuotone}
            >
                <Button onClick={handleStartNew}>
                    <PiPlusCircleDuotone className="mr-2 h-5 w-5" />
                    Start New Encounter
                </Button>
            </PageHeader>
            <Card>
                <CardHeader>
                    <CardTitle>Submission Queue</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="border rounded-lg">
                        <table className="w-full text-sm text-left">
                            <thead className="text-xs text-muted-foreground uppercase bg-muted/50">
                                <tr>
                                    <th className="px-6 py-3">Patient</th>
                                    <th className="px-6 py-3">Status</th>
                                    <th className="px-6 py-3">Current Step</th>
                                    <th className="px-6 py-3">Last Updated</th>
                                    <th className="px-6 py-3 text-right">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {mockEncounters.map(enc => (
                                    <tr key={enc.id} className="border-b">
                                        <td className="px-6 py-4 font-medium">{enc.patient}</td>
                                        <td className="px-6 py-4">{enc.status}</td>
                                        <td className="px-6 py-4">{enc.step}</td>
                                        <td className="px-6 py-4">{enc.updated}</td>
                                        <td className="px-6 py-4 text-right">
                                            {/* + Add onClick handler */}
                                            <Button variant="outline" size="sm" onClick={() => handleResume(enc.id)}>
                                                {enc.status === 'In Progress' ? 'Resume' : 'View'}
                                            </Button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </CardContent>
                <CardFooter>
                    <p className="text-xs text-muted-foreground">Showing {mockEncounters.length} encounters.</p>
                </CardFooter>
            </Card>
        </div>
    );
};

export default DataSubmissionsHubPage;


###############################################################################
### FILE: pages/FormsLibraryPage.tsx
###############################################################################
// src/pages/FormsLibraryPage.tsx
import React from 'react';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiArchiveDuotone } from 'react-icons/pi';

const FormsLibraryPage: React.FC = () => {
  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto space-y-6">
      <PageHeader
        title="Forms Library"
        subtitle="Browse, manage, and import reusable form templates across your projects."
        icon={PiArchiveDuotone}
        gradient="accent"
      />
      <div className="text-center py-16 bg-card border-2 border-dashed rounded-xl">
        <h3 className="text-xl font-semibold">Feature In Development</h3>
        <p className="text-muted-foreground mt-2">This area will allow you to manage a global library of forms.</p>
      </div>
    </div>
  );
};

export default FormsLibraryPage;


###############################################################################
### FILE: pages/NotFoundPage.tsx
###############################################################################
// src/pages/NotFoundPage.tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/Button';

const NotFoundPage: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-center h-[calc(100vh-var(--header-height))] text-center p-4">
      <h1 className="text-6xl font-bold text-primary">404</h1>
      <h2 className="text-2xl font-semibold mt-4 mb-2 text-foreground">Page Not Found</h2>
      <p className="text-muted-foreground mb-6">Sorry, the page you are looking for does not exist.</p>
      <Button asChild>
        <Link to="/">Go to Homepage</Link>
      </Button>
    </div>
  );
};

export default NotFoundPage;


###############################################################################
### FILE: pages/ProjectDetailsPage.tsx
###############################################################################
import React, { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore';
import InfoWidget from '@/components/project/InfoWidget';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiUsersDuotone, PiFlagDuotone, PiHourglassSimpleDuotone, PiChartBarDuotone, PiFileTextDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { ProjectMember } from '@/types';

const ProjectDetailsPage: React.FC = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  const { setActiveProject, activeProjectDetails, isLoading } = useProjectStore();

  useEffect(() => {
    if (projectId && (!activeProjectDetails || activeProjectDetails.id !== projectId)) {
      setActiveProject(projectId);
    }
  }, [projectId, activeProjectDetails, setActiveProject]);
  
  if (isLoading && !activeProjectDetails) {
    return <div className="text-center"><p className="text-muted-foreground">Loading project details...</p></div>;
  }
  
  if (!activeProjectDetails) {
    return (
      <div className="text-center">
        <h1 className="text-xl font-semibold text-destructive">Project Not Found</h1>
        <p className="text-muted-foreground mt-2">Could not load details for project ID '{projectId}'.</p>
        <Button variant="outline" onClick={() => navigate('/')} className="mt-6">Back to Dashboard</Button>
      </div>
    );
  }

  const { name, description, members, goals } = activeProjectDetails;

  return (
    <div className="space-y-6">
      <PageHeader
        title={name}
        subtitle={description}
        icon={PiFileTextDuotone}
        gradient="secondary"
      />
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <InfoWidget title="Data Status" icon={PiChartBarDuotone}>
          <div className="text-2xl font-bold">1,234</div>
          <p className="text-xs text-muted-foreground">Total Submissions (Mock)</p>
        </InfoWidget>
        <InfoWidget title="Team Members" icon={PiUsersDuotone}>
           <div className="text-2xl font-bold">{members.length}</div>
           <p className="text-xs text-muted-foreground">Active Collaborators</p>
        </InfoWidget>
        <InfoWidget title="Project Phase" icon={PiHourglassSimpleDuotone}>
            <div className="text-2xl font-bold">Data Collection</div>
           <p className="text-xs text-muted-foreground">Current Status (Mock)</p>
        </InfoWidget>
         <InfoWidget title="Goals" icon={PiFlagDuotone}>
            <div className="text-2xl font-bold">3</div>
           <p className="text-xs text-muted-foreground">Primary Objectives (Mock)</p>
        </InfoWidget>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2">
           <InfoWidget title="Project Goals" icon={PiFlagDuotone}>
             <p className="text-sm text-foreground whitespace-pre-wrap">{goals || 'No goals specified for this project.'}</p>
           </InfoWidget>
        </div>
        <div className="lg:col-span-1">
          <InfoWidget title="Team Members" icon={PiUsersDuotone}>
            <div className="space-y-3">
              {/* FIX: Added type annotation for 'member' */}
              {members.map((member: ProjectMember) => (
                <div key={member.userId} className="flex items-center">
                  <img src={`https://ui-avatars.com/api/?name=${encodeURIComponent(member.userId)}&background=random&size=32&color=fff&font-size=0.40&bold=true`} alt={member.userId} className="w-8 h-8 rounded-full mr-3"/>
                  <div>
                    <p className="text-sm font-medium">{member.userId}</p>
                    <p className="text-xs text-muted-foreground">{member.roles.join(', ')}</p>
                  </div>
                </div>
              ))}
            </div>
          </InfoWidget>
        </div>
      </div>
    </div>
  );
};

export default ProjectDetailsPage; 


###############################################################################
### FILE: pages/ProjectsListPage.tsx
###############################################################################
// src/pages/ProjectsListPage.tsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore';
import useAuthStore from '@/stores/authStore';
import ProjectCard from '@/components/dashboard/ProjectCard';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiListMagnifyingGlassDuotone, PiPlusCircleDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { Project } from '@/types';

const ProjectsListPage: React.FC = () => {
  const { availableProjects, fetchAvailableProjects, isLoading } = useProjectStore();
  const { user, isAuthenticated } = useAuthStore();
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated) {
      fetchAvailableProjects();
    }
  }, [isAuthenticated, fetchAvailableProjects]);

  const userProjects = user
    ? availableProjects.filter((p: Project) => p.members.some((m) => m.userId === user.id))
    : [];

  return (
    <div className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto space-y-6 animate-fade-in">
      <PageHeader
        title="My Projects"
        subtitle="Select a project to enter its workspace or create a new one."
        icon={PiListMagnifyingGlassDuotone}
        gradient="secondary"
      >
        <Button onClick={() => navigate('/create-project')}>
          <PiPlusCircleDuotone className="mr-2 h-5 w-5" />
          Create New Project
        </Button>
      </PageHeader>
      
      {isLoading && <p className="text-muted-foreground">Loading projects...</p>}
      
      {!isLoading && userProjects.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {userProjects.map((project: Project) => (
            <ProjectCard key={project.id} project={project} />
          ))}
        </div>
      ) : (
        !isLoading && <p className="text-muted-foreground">You are not a member of any projects yet.</p>
      )}
    </div>
  );
};

export default ProjectsListPage;


###############################################################################
### FILE: pages/SettingsPage.tsx
###############################################################################
import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';

const SettingsPage: React.FC = () => {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Settings</h1>
        <p className="text-muted-foreground mt-1">Manage your account and preferences.</p>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Profile</CardTitle>
        </CardHeader>
        <CardContent>
          <p>User profile settings will be here.</p>
        </CardContent>
      </Card>
    </div>
  );
};

export default SettingsPage;


###############################################################################
### FILE: pages/project/DataSubmissionsHubPage.tsx
###############################################################################
// src/pages/project/DataSubmissionsHubPage.tsx
import React, { useState } from 'react';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiListChecksDuotone, PiPlusCircleDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/Card';
import { useNavigate, useParams } from 'react-router-dom'; // + Import hooks
import PatientRegistrationModal from '@/components/forms/PatientRegistrationModal';
import { useSubmissionStore } from '@/stores/submissionStore';
import { mockProjectForms, SavedForm } from '@/data/mockForms';
import { FormDefinition } from '@/stores/submissionStore';

const DataSubmissionsHubPage: React.FC = () => {
    const navigate = useNavigate(); // + Get navigation function
    const { projectId } = useParams(); // + Get projectId from URL
    const [isModalOpen, setIsModalOpen] = useState(false);
    const { startNewEncounter, patientData } = useSubmissionStore();

    // In the future, this will fetch a list of encounters from a store
    const mockEncounters = [
        { id: 'enc-001', patient: 'JS / M / 2017-02-04', status: 'In Progress', step: 'Intraoperative', updated: '5m ago' },
        { id: 'enc-002', patient: 'AB / F / 2018-05-10', status: 'Completed', step: 'N/A', updated: '2h ago' },
        { id: 'enc-003', patient: 'CD / M / 2016-11-22', status: 'Flagged for Review', step: 'Post-Op', updated: '1d ago' },
    ];

    const handleStartNew = () => {
        setIsModalOpen(true);
    };
    
    const handleStartEncounter = () => {
        if (patientData) {
             const projectForms = mockProjectForms.filter(f => f.projectId === projectId);
             const formSequence: FormDefinition[] = projectForms.map((f: SavedForm) => ({
                key: f.id,
                name: f.name,
                version: '1.0', // placeholder
                schema: f.schema,
                uiSchema: f.uiSchema
             }));
            startNewEncounter(patientData, formSequence);
            navigate(`/project/${projectId}/submissions/new`);
        }
    };

    const handleResume = (encounterId: string) => {
        // + Navigate to the specific encounter page
        navigate(`/project/${projectId}/submissions/${encounterId}`);
    }

    return (
        <div className="space-y-6">
            <PageHeader
                title="Data Submissions"
                subtitle="Manage ongoing patient encounters or start a new data submission."
                icon={PiListChecksDuotone}
            >
                <Button onClick={handleStartNew}>
                    <PiPlusCircleDuotone className="mr-2 h-5 w-5" />
                    Start New Encounter
                </Button>
            </PageHeader>
            <Card>
                <CardHeader>
                    <CardTitle>Submission Queue</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="border rounded-lg">
                        <table className="w-full text-sm text-left">
                            <thead className="text-xs text-muted-foreground uppercase bg-muted/50">
                                <tr>
                                    <th className="px-6 py-3">Patient</th>
                                    <th className="px-6 py-3">Status</th>
                                    <th className="px-6 py-3">Current Step</th>
                                    <th className="px-6 py-3">Last Updated</th>
                                    <th className="px-6 py-3 text-right">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {mockEncounters.map(enc => (
                                    <tr key={enc.id} className="border-b">
                                        <td className="px-6 py-4 font-medium">{enc.patient}</td>
                                        <td className="px-6 py-4">{enc.status}</td>
                                        <td className="px-6 py-4">{enc.step}</td>
                                        <td className="px-6 py-4">{enc.updated}</td>
                                        <td className="px-6 py-4 text-right">
                                            {/* + Add onClick handler */}
                                            <Button variant="outline" size="sm" onClick={() => handleResume(enc.id)}>
                                                {enc.status === 'In Progress' ? 'Resume' : 'View'}
                                            </Button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </CardContent>
                <CardFooter>
                    <p className="text-xs text-muted-foreground">Showing {mockEncounters.length} encounters.</p>
                </CardFooter>
            </Card>

            <PatientRegistrationModal 
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onStartEncounter={handleStartEncounter}
            />
        </div>
    );
};

export default DataSubmissionsHubPage;


###############################################################################
### FILE: pages/project/EncounterPage.tsx
###############################################################################
// src/pages/project/EncounterPage.tsx
// This file contains the complete, working logic from the original DataSubmissionPage.

import React, { useState, useEffect } from 'react';
import { useSubmissionStore } from '@/stores/submissionStore';
import { PageHeader } from '@/components/ui/PageHeader';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/Card';
import { InputField } from '@/components/ui/InputField';
import DraftStatusBar from '@/components/forms/DraftStatusBar';
import DynamicFormRenderer from '@/components/forms/DynamicFormRenderer';
import { PiListChecksDuotone, PiArrowLeft, PiArrowRight, PiPaperPlaneTilt } from 'react-icons/pi';
import { cn } from '@/lib/utils';
import { useNavigate, useParams } from 'react-router-dom'; // Import useNavigate

// This component will be used for the Stepper UI
const SubmissionStepper: React.FC = () => {
    const { currentFormIndex, formSequence } = useSubmissionStore();
    const steps = [
        { key: 'patient', label: 'Patient Info' },
        ...formSequence.map(f => ({ key: f.key, label: f.name })),
        { key: 'review', label: 'Review & Submit' }
    ];
    const activeIndex = currentFormIndex + 1;

    return (
        <div className="mb-8 p-4 bg-muted/50 rounded-lg">
            <ol className="flex items-center w-full">
                {steps.map((step, index) => {
                    const isCompleted = index < activeIndex;
                    const isCurrent = index === activeIndex;
                    return (
                        <li key={step.key} className={cn(
                            "flex w-full items-center",
                            isCompleted ? 'text-primary' : 'text-muted-foreground',
                            index < steps.length - 1 ? "after:content-[''] after:w-full after:h-0.5 after:border-b after:border-border after:mx-4" : ""
                        )}>
                            <span className={cn(
                                "flex items-center justify-center w-8 h-8 rounded-full text-sm shrink-0",
                                isCurrent ? 'bg-primary text-primary-foreground' : isCompleted ? 'bg-primary/20' : 'bg-muted'
                            )}>
                                {index + 1}
                            </span>
                        </li>
                    );
                })}
            </ol>
        </div>
    );
};

// Renamed the component to EncounterPage
const EncounterPage: React.FC = () => {
    const navigate = useNavigate(); // Hook for navigation
    const { projectId } = useParams();
    const { 
        patientData, 
        updatePatientData, 
        isEncounterActive, 
        startNewEncounter,
        allFormsData,
        saveCurrentForm,
        completeAndClearEncounter,
        currentFormIndex,
        setCurrentFormIndex,
        formSequence,
    } = useSubmissionStore();

    const [currentStepFormData, setCurrentStepFormData] = useState({});

    // Get the current form definition, which includes the schema and uiSchema
    const currentFormDef = (currentFormIndex >= 0 && currentFormIndex < formSequence.length)
        ? formSequence[currentFormIndex]
        : null;

    useEffect(() => {
        if (isEncounterActive && currentFormDef) {
            setCurrentStepFormData(allFormsData[currentFormDef.key] || {});
        }
    }, [currentFormDef, isEncounterActive, allFormsData]);

    const handleStart = () => {
        if (patientData?.initials && patientData?.gender && patientData?.dob && patientData.projectConsent) {
            startNewEncounter(patientData, formSequence);
        } else {
            alert("Please fill all required patient fields and provide consent.");
        }
    };
    
    const handlePatientFieldChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { id, value, type, checked } = e.target;
        updatePatientData({ [id]: type === 'checkbox' ? checked : value });
    };

    const handleNavigate = (direction: 'next' | 'previous') => {
        if (currentFormDef) {
            saveCurrentForm(currentFormDef.key, currentStepFormData);
        }
        setCurrentFormIndex(currentFormIndex + (direction === 'next' ? 1 : -1));
    };
    
    const handleSubmitAndExit = () => {
        // Save the final form state before submitting
        if (currentFormDef) {
            saveCurrentForm(currentFormDef.key, currentStepFormData);
        }
        alert('Submitting all data to the backend (see console).');
        console.log({ patientData, allFormsData: useSubmissionStore.getState().allFormsData });
        completeAndClearEncounter();
        
        navigate(`/project/${projectId}/submissions`);
    }

    const renderPatientInput = () => (
        <Card>
            <CardHeader><CardTitle>Patient Identification & Consent</CardTitle></CardHeader>
            <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <InputField label="Patient Initials" id="initials" type="text" value={patientData?.initials || ''} onChange={handlePatientFieldChange} required />
                    <InputField label="Gender" id="gender" type="text" value={patientData?.gender || ''} onChange={handlePatientFieldChange} required />
                    <InputField label="Date of Birth" id="dob" type="date" value={patientData?.dob || ''} onChange={handlePatientFieldChange} required />
                </div>
                <div className="flex items-start space-x-2 pt-4 border-t">
                    <input type="checkbox" id="projectConsent" checked={patientData?.projectConsent || false} onChange={handlePatientFieldChange} className="h-4 w-4 mt-1 accent-primary" />
                    <label htmlFor="projectConsent" className="text-sm text-muted-foreground">Confirm project-specific consent has been obtained. <span className="text-destructive">*</span></label>
                </div>
            </CardContent>
            <CardFooter>
                <Button onClick={handleStart} className="ml-auto">Start Data Collection</Button>
            </CardFooter>
        </Card>
    );

    const renderFormStep = () => {
        if (!currentFormDef) return null;
        
        return (
            <Card>
                <CardHeader><CardTitle>{currentFormDef.name}</CardTitle></CardHeader>
                <CardContent>
                    <DynamicFormRenderer
                        schema={currentFormDef.schema}
                        uiSchema={currentFormDef.uiSchema}
                        formData={currentStepFormData}
                        onFormDataChange={setCurrentStepFormData}
                        fieldOrder={currentFormDef.uiSchema['ui:root']?.['ui:order']}
                    />
                </CardContent>
                <CardFooter className="justify-between">
                    <Button variant="outline" onClick={() => handleNavigate('previous')} disabled={currentFormIndex === 0}>
                        <PiArrowLeft className="mr-2" /> Previous
                    </Button>
                    <Button onClick={() => handleNavigate('next')}>
                        {currentFormIndex === formSequence.length - 1 ? 'Review' : 'Next'} <PiArrowRight className="ml-2" />
                    </Button>
                </CardFooter>
            </Card>
        );
    };

    const renderReviewStep = () => (
        <Card>
            <CardHeader><CardTitle>Review & Submit</CardTitle></CardHeader>
            <CardContent className="space-y-4">
                <div>
                    <h3 className="font-semibold mb-2">Patient Information</h3>
                    <pre className="text-xs bg-muted p-3 rounded-md overflow-x-auto">{JSON.stringify(patientData, null, 2)}</pre>
                </div>
                {formSequence.map(formDef => (
                    <div key={formDef.key}>
                        <h3 className="font-semibold mb-2">{formDef.name}</h3>
                        <pre className="text-xs bg-muted p-3 rounded-md overflow-x-auto">{JSON.stringify(allFormsData[formDef.key] || { message: "No data entered for this form." }, null, 2)}</pre>
                    </div>
                ))}
            </CardContent>
            <CardFooter className="justify-between">
                <Button variant="outline" onClick={() => handleNavigate('previous')}><PiArrowLeft className="mr-2" /> Back to Edit</Button>
                <Button onClick={handleSubmitAndExit}>
                    <PiPaperPlaneTilt className="mr-2" /> Submit Encounter
                </Button>
            </CardFooter>
        </Card>
    );

    const renderContent = () => {
        if (!isEncounterActive) {
            return renderPatientInput();
        }
        if (currentFormIndex >= 0 && currentFormIndex < formSequence.length) {
            return renderFormStep();
        }
        if (currentFormIndex === formSequence.length) {
            return renderReviewStep();
        }
        return null; // Should not happen
    };

    return (
        <div className="space-y-6">
            <PageHeader
                title="Data Submission"
                subtitle="Collect and submit clinical research data for your active project."
                icon={PiListChecksDuotone}
            />
            {isEncounterActive && <SubmissionStepper />}
            {renderContent()}
            <DraftStatusBar />
        </div>
    );
};

export default EncounterPage;


###############################################################################
### FILE: pages/project/MembersAndRolesPage.tsx
###############################################################################
// src/pages/project/MembersAndRolesPage.tsx
import React from 'react';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiUsersThreeDuotone, PiPlus, PiShieldDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';
import { InputField } from '@/components/ui/InputField';
import { Checkbox } from '@/components/ui/Checkbox';

// Mock Data based on UI/UX Plan
const mockMembers = [
    { id: 'userLead123', name: 'Dr. User Lead', email: 'dr.lead@example.com', roles: ['ProjectLead', 'Researcher'] },
    { id: 'user456', name: 'Alex Researcher', email: 'alex.r@example.com', roles: ['Researcher', 'DataEntry'] },
    { id: 'user789', name: 'Casey Data-Clerk', email: 'casey.d@example.com', roles: ['DataEntry'] },
];

const mockRoles = [
    { id: 'ProjectLead', name: 'Project Lead', description: 'Full access to project settings, members, and forms.' },
    { id: 'Researcher', name: 'Researcher', description: 'Can view data, reports, and submit data.' },
    { id: 'DataEntry', name: 'Data Entry', description: 'Can only enter and submit data via assigned forms.' },
];

const MembersAndRolesPage: React.FC = () => {
    // For now, we can just mock a selected user
    const selectedMember = mockMembers[0];

  return (
    <div className="space-y-6">
      <PageHeader
        title="Members & Roles"
        subtitle="Manage project access and define custom roles with granular permissions."
        icon={PiUsersThreeDuotone}
      >
        <Button>
            <PiPlus className="mr-2" />
            Invite New Member
        </Button>
      </PageHeader>
      
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
        {/* Left Panel: Lists */}
        <div className="lg:col-span-4 space-y-6">
            <Card>
                <CardHeader><CardTitle>Project Members</CardTitle></CardHeader>
                <CardContent>
                    <div className="space-y-2">
                        {mockMembers.map(member => (
                            <div key={member.id} className="flex items-center p-2 rounded-lg hover:bg-accent cursor-pointer">
                                <img src={`https://ui-avatars.com/api/?name=${encodeURIComponent(member.name)}&background=random&size=32&color=fff&font-size=0.40&bold=true`} alt={member.name} className="w-8 h-8 rounded-full mr-3"/>
                                <div>
                                    <p className="text-sm font-medium">{member.name}</p>
                                    <p className="text-xs text-muted-foreground">{member.email}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Project Roles</CardTitle></CardHeader>
                <CardContent>
                    <div className="space-y-2">
                        {mockRoles.map(role => (
                            <div key={role.id} className="flex items-start p-2 rounded-lg hover:bg-accent cursor-pointer">
                                <PiShieldDuotone className="w-5 h-5 mr-3 mt-1 text-primary"/>
                                <div>
                                    <p className="text-sm font-medium">{role.name}</p>
                                    <p className="text-xs text-muted-foreground">{role.description}</p>
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>
        </div>

        {/* Right Panel: Editor/Details */}
        <div className="lg:col-span-8">
            <Card>
                <CardHeader>
                    <CardTitle>{selectedMember.name}</CardTitle>
                    <CardDescription>Assign or un-assign roles for this member.</CardDescription>
                </CardHeader>
                <CardContent>
                    <form className="space-y-4">
                        <InputField id="email" label="Email" type="email" value={selectedMember.email} disabled />
                        <div>
                            <label className="text-sm font-medium">Roles</label>
                            <div className="mt-2 space-y-2 p-3 border rounded-lg bg-background/50">
                                {mockRoles.map(role => (
                                    <label key={role.id} className="flex items-center gap-2">
                                        <Checkbox 
                                            id={`role-${role.id}`} 
                                            checked={selectedMember.roles.includes(role.id)} 
                                        />
                                        <span>{role.name}</span>
                                    </label>
                                ))}
                            </div>
                        </div>
                        <Button className="w-full">Save Changes</Button>
                    </form>
                </CardContent>
            </Card>
        </div>
      </div>
    </div>
  );
};

export default MembersAndRolesPage;


###############################################################################
### FILE: pages/project/ProjectFormBuilderPage.tsx
###############################################################################
// src/pages/project/ProjectFormBuilderPage.tsx
import React, { useState } from 'react';
import { PageHeader } from '@/components/ui/PageHeader';
import Toolbox from '@/components/form-builder/Toolbox';
import Canvas from '@/components/form-builder/Canvas';
import Inspector from '@/components/form-builder/Inspector';
import JsonEditor from '@/components/form-builder/JsonEditor';
import { Button } from '@/components/ui/Button';
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { PiSquaresFourDuotone, PiFloppyDiskDuotone, PiPlus, PiWrench, PiCode, PiEye } from 'react-icons/pi';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { cn } from '@/lib/utils';
import { mockProjectForms } from '@/data/mockForms'; // Import the mock forms

type MobileTab = 'toolbox' | 'canvas' | 'inspector';

const ProjectFormBuilderPage: React.FC = () => {
    const { schema, uiSchema, setRawSchema, setRawUiSchema, loadForm } = useFormBuilderStore();
    const [activeTab, setActiveTab] = useState<MobileTab>('canvas');
    const [activeFormId, setActiveFormId] = useState<string>(mockProjectForms[0]?.id || '');
    const [isCodeDrawerOpen, setIsCodeDrawerOpen] = useState(false);

    // Set the initial form on first load
    React.useEffect(() => {
        const initialForm = mockProjectForms.find(f => f.id === activeFormId);
        if (initialForm) {
            loadForm({ schema: initialForm.schema, uiSchema: initialForm.uiSchema });
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // Run only once

    const handleFormSelect = (formId: string) => {
        const formToLoad = mockProjectForms.find(f => f.id === formId);
        if (formToLoad) {
            setActiveFormId(formId);
            loadForm({ schema: formToLoad.schema, uiSchema: formToLoad.uiSchema });
        }
    };
    
    const schemaString = JSON.stringify(schema, null, 2);
    const uiSchemaString = JSON.stringify(uiSchema, null, 2);

    const tabs = [
        { id: 'toolbox' as MobileTab, label: 'Tools', icon: PiWrench },
        { id: 'canvas' as MobileTab, label: 'Canvas', icon: PiEye },
        { id: 'inspector' as MobileTab, label: 'Inspector', icon: PiSquaresFourDuotone },
    ];
    
    const formsList = (
        <Card>
            <CardHeader>
                <CardTitle>Project Forms</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
                {mockProjectForms.map(form => (
                     <div 
                        key={form.id}
                        onClick={() => handleFormSelect(form.id)}
                        className={cn(
                            "p-3 rounded-lg text-sm font-semibold cursor-pointer transition-colors",
                            activeFormId === form.id 
                                ? "bg-accent border border-primary" 
                                : "hover:bg-accent"
                        )}
                     >
                        {form.name}
                    </div>
                ))}
                <Button variant="outline" className="w-full mt-4">
                    <PiPlus className="mr-2" />
                    Create New Form
                </Button>
            </CardContent>
        </Card>
    );

    return (
        <div className="space-y-6 flex flex-col min-h-0">
            <PageHeader
                title="Form Builder"
                subtitle="Design and configure your dynamic data collection forms for this project."
                icon={PiSquaresFourDuotone}
            >
                <Button variant="gradient">
                    <PiFloppyDiskDuotone className="mr-2" />
                    Save Form
                </Button>
                <Button variant="outline" onClick={() => setIsCodeDrawerOpen(!isCodeDrawerOpen)}>
                    <PiCode className="mr-2" />
                    {isCodeDrawerOpen ? 'Hide' : 'Show'} Code
                </Button>
            </PageHeader>

            {/* Mobile Tabs (shown on mobile and tablet) */}
            <div className="lg:hidden">
                <div className="flex space-x-1 bg-muted p-1 rounded-lg mb-4">
                    {tabs.map((tab) => (
                        <button
                            key={tab.id}
                            onClick={() => setActiveTab(tab.id)}
                            className={cn(
                                "flex-1 flex flex-col items-center gap-1 py-2 px-3 rounded-md text-xs font-medium transition-colors",
                                activeTab === tab.id
                                    ? "bg-background text-primary shadow-sm"
                                    : "text-muted-foreground hover:text-foreground"
                            )}
                        >
                            <tab.icon className="h-4 w-4" />
                            {tab.label}
                        </button>
                    ))}
                </div>

                {/* Mobile Tab Content */}
                <div className="min-h-[60vh]">
                    {activeTab === 'toolbox' && (
                        <div className="space-y-4">
                            <Toolbox />
                            {formsList}
                        </div>
                    )}
                    {activeTab === 'canvas' && <Canvas />}
                    {activeTab === 'inspector' && <Inspector />}
                </div>
            </div>

            {/* Desktop Layout (hidden on mobile) */}
            <div className="hidden lg:flex flex-col flex-grow min-h-0">
                {/* Main Builder UI with Responsive Layout */}
                <div className="grid grid-cols-12 gap-6 flex-grow min-h-0">
                    {/* Left Panel: Forms List + Toolbox */}
                    <div className="col-span-3 flex flex-col gap-6 h-full min-h-0">
                        <div className="flex-shrink-0">
                            {formsList}
                        </div>
                        <div className="flex-grow min-h-0">
                            <Toolbox />
                        </div>
                    </div>

                    {/* Center Panel: Canvas */}
                    <div className="col-span-6 h-full min-h-0">
                        <Canvas />
                    </div>

                    {/* Right Panel: Inspector */}
                    <div className="col-span-3 h-full min-h-0">
                        <Inspector />
                    </div>
                </div>
            </div>

             {/* JSON Editors (Collapsible Drawer for all screen sizes) */}
             <div className={cn(
                "mt-6 transition-all duration-500 ease-in-out overflow-hidden",
                isCodeDrawerOpen ? "max-h-[1000px] opacity-100 py-4" : "max-h-0 opacity-0"
             )}>
                <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
                    <Card className="min-h-[400px]">
                        <CardHeader><CardTitle>Data Schema (schema.json)</CardTitle></CardHeader>
                        <CardContent><JsonEditor jsonString={schemaString} onJsonChange={setRawSchema} /></CardContent>
                    </Card>
                    <Card className="min-h-[400px]">
                        <CardHeader><CardTitle>UI Schema (uiSchema.json)</CardTitle></CardHeader>
                        <CardContent><JsonEditor jsonString={uiSchemaString} onJsonChange={setRawUiSchema} /></CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
};

export default ProjectFormBuilderPage;


###############################################################################
### FILE: pages/project/ProjectFormBuilderPageV2.tsx
###############################################################################
import React, { useState, useEffect } from 'react';
import { PageHeader } from '@/components/ui/PageHeader';
import ToolboxV2 from '@/components/form-builder-v2/ToolboxV2';
import CanvasV2 from '@/components/form-builder-v2/CanvasV2';
import InspectorV2 from '@/components/form-builder-v2/InspectorV2';
import { Button } from '@/components/ui/Button';
import { useFormBuilderStoreV2, Form } from '@/stores/formBuilderStore.v2';
import { PiSquaresFourDuotone, PiFloppyDiskDuotone, PiPlus, PiWrench, PiEye, PiCode } from 'react-icons/pi';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { cn } from '@/lib/utils';
import { InputField } from '@/components/ui/InputField';
import { TextareaField } from '@/components/ui/TextareaField';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/Dialog';
import JsonEditor from '@/components/form-builder/JsonEditor';
import { AnimatePresence, motion } from 'framer-motion';

type MobileTab = 'canvas' | 'inspector';

const ProjectFormBuilderPageV2: React.FC = () => {
  const { 
    currentForm, 
    projectForms, 
    createNewForm, 
    loadForm, 
    saveForm, 
    updateFormMetadata, 
    isSaving,
    errors,
    setRawForm
  } = useFormBuilderStoreV2();
  
  const [activeTab, setActiveTab] = useState<MobileTab>('canvas');
  const [isFormSettingsOpen, setIsFormSettingsOpen] = useState(false);
  const [isJsonEditorOpen, setIsJsonEditorOpen] = useState(false);
  const [activeFormId, setActiveFormId] = useState<string | null>(null);
  const [jsonString, setJsonString] = useState("");

  useEffect(() => {
    if (!activeFormId && projectForms.length > 0) {
      setActiveFormId(projectForms[0].id);
    }
  }, [projectForms, activeFormId]);

  useEffect(() => {
    if (activeFormId && (!currentForm || currentForm.id !== activeFormId)) {
      loadForm(activeFormId);
    }
  }, [activeFormId, loadForm, currentForm]);

  useEffect(() => {
    if (currentForm) {
      setJsonString(JSON.stringify(currentForm, null, 2));
    }
  }, [currentForm]);

  const handleCreateNew = () => {
    createNewForm('proj_crest_001');
    const newFormId = useFormBuilderStoreV2.getState().currentForm?.id;
    if(newFormId) setActiveFormId(newFormId);
  };

  const handleSave = async () => {
    try {
      await saveForm();
    } catch (error) {
      console.error('Failed to save form:', error);
    }
  };

  const handleFormSelect = (formId: string) => {
    setActiveFormId(formId);
  };

  const handleApplyJson = () => {
    if (setRawForm(jsonString)) {
      // Optionally close editor on successful apply
      // setIsJsonEditorOpen(false);
    }
  };
  
  const handleResetJson = () => {
    if (currentForm) {
      setJsonString(JSON.stringify(currentForm, null, 2));
    }
  };

  const tabs = [
    { id: 'canvas' as MobileTab, label: 'Canvas', shortLabel: 'Canvas', icon: PiEye },
    { id: 'inspector' as MobileTab, label: 'Inspector', shortLabel: 'Edit', icon: PiSquaresFourDuotone },
  ];

  return (
    <div className="flex flex-col h-full">
      <PageHeader
        title="Form Builder V2"
        subtitle={currentForm ? currentForm.name : 'Design and configure your dynamic data collection forms for this project.'}
        icon={PiSquaresFourDuotone}
      >
        <div className="mb-4">
          <p className="text-muted-foreground text-lg">
            <span className="hidden sm:inline">Design and configure your dynamic data collection forms for this project.</span>
            <span className="sm:hidden">Design your forms</span>
          </p>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            onClick={() => setIsFormSettingsOpen(!isFormSettingsOpen)}
            size="sm"
            className="hidden sm:flex"
          >
            <span className="hidden lg:inline">Form Settings</span>
            <span className="lg:hidden">Settings</span>
          </Button>
          <Button onClick={handleCreateNew} variant="outline" size="sm">
            <PiPlus className="w-4 h-4 sm:mr-2" />
            <span className="hidden sm:inline">New Form</span>
          </Button>
          <Button variant="outline" onClick={() => setIsJsonEditorOpen(!isJsonEditorOpen)} disabled={!currentForm}>
            <PiCode className="mr-2" />
            {isJsonEditorOpen ? 'Hide' : 'View'} JSON
          </Button>
          <Button onClick={handleSave} disabled={isSaving || !currentForm}>
            <PiFloppyDiskDuotone className="mr-2" />
            {isSaving ? 'Saving...' : 'Save Form'}
          </Button>
        </div>
      </PageHeader>

      {/* Error Display */}
      {errors.length > 0 && (
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-3 sm:p-4">
          <h4 className="font-medium text-destructive mb-2">
            <span className="hidden sm:inline">Form Builder Errors</span>
            <span className="sm:hidden">Errors</span>
          </h4>
          <ul className="text-sm text-destructive space-y-1">
            {errors.map((error) => (
              <li key={error.id}>• {error.message}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Form Settings Card (Collapsible) */}
      {isFormSettingsOpen && currentForm && (
        <Card>
          <CardHeader className="p-4 sm:p-6">
            <CardTitle className="text-lg sm:text-xl">
              <span className="hidden sm:inline">Form Settings</span>
              <span className="sm:hidden">Settings</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4 sm:p-6 pt-0">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <InputField
                id="form-name"
                label="Form Name"
                value={currentForm.name}
                onChange={(e) => updateFormMetadata({ name: e.target.value })}
              />
              <div className="lg:col-span-2">
                <TextareaField
                  id="form-description"
                  label="Description"
                  value={currentForm.description}
                  onChange={(e) => updateFormMetadata({ description: e.target.value })}
                  rows={2}
                />
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Main Builder UI */}
      <div className="grid grid-cols-12 gap-x-6 px-6 pb-6 flex-grow items-start min-h-0">
        
        {/* Left Column: Toolbox + Canvas */}
        <div className="col-span-12 lg:col-span-8 xl:col-span-9 h-full flex flex-col gap-6">
          <div className="sticky top-[calc(var(--header-height)+1.5rem)] z-20 -mx-6 px-6">
            <ToolboxV2 />
          </div>
          <div className="flex-grow min-h-0">
             <CanvasV2 />
          </div>
        </div>
        
        {/* Right Column: Inspector */}
        <div className="hidden lg:block lg:col-span-4 xl:col-span-3 h-full">
          <div className="sticky top-[calc(var(--header-height)+1.5rem)] z-10 h-[calc(100vh-var(--header-height)-3rem)] overflow-y-auto">
            <InspectorV2 />
          </div>
        </div>

      </div>

      <AnimatePresence>
      {isJsonEditorOpen && (
        <motion.div
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: 'auto', opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
          transition={{ duration: 0.3 }}
          className="flex-shrink-0 overflow-hidden"
        >
          <div className="mt-6 border-t pt-4">
            <div className="flex justify-between items-center mb-2">
              <h3 className="text-lg font-semibold">Live JSON Editor</h3>
              <div className="flex gap-2">
                <Button size="sm" variant="outline" onClick={handleResetJson}>Reset</Button>
                <Button size="sm" onClick={handleApplyJson}>Apply JSON</Button>
              </div>
            </div>
            <div className="h-96">
              <JsonEditor
                jsonString={jsonString}
                onJsonChange={setJsonString}
                readOnly={false}
              />
            </div>
          </div>
        </motion.div>
      )}
      </AnimatePresence>
    </div>
  );
};

export default ProjectFormBuilderPageV2; 


###############################################################################
### FILE: pages/project/ProjectOverviewPage.tsx
###############################################################################
// src/pages/project/ProjectOverviewPage.tsx
import React, { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useProjectStore } from '@/stores/projectStore';
import InfoWidget from '@/components/project/InfoWidget';
import { PageHeader } from '@/components/ui/PageHeader';
import { PiUsersDuotone, PiFlagDuotone, PiHourglassSimpleDuotone, PiChartBarDuotone, PiFileTextDuotone } from 'react-icons/pi';
import { Button } from '@/components/ui/Button';
import { ProjectMember } from '@/types';

const ProjectOverviewPage: React.FC = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  const { setActiveProject, activeProjectDetails, isLoading } = useProjectStore();

  useEffect(() => {
    if (projectId && (!activeProjectDetails || activeProjectDetails.id !== projectId)) {
      setActiveProject(projectId);
    }
  }, [projectId, activeProjectDetails, setActiveProject]);
  
  if (isLoading && !activeProjectDetails) {
    return <div className="text-center"><p className="text-muted-foreground">Loading project details...</p></div>;
  }
  
  if (!activeProjectDetails) {
    return (
      <div className="text-center">
        <h1 className="text-xl font-semibold text-destructive">Project Not Found</h1>
        <p className="text-muted-foreground mt-2">Could not load details for project ID '{projectId}'.</p>
        <Button variant="outline" onClick={() => navigate('/')} className="mt-6">Back to Dashboard</Button>
      </div>
    );
  }

  const { name, description, members, goals } = activeProjectDetails;

  return (
    <div className="space-y-6">
      <PageHeader
        title={name}
        subtitle={description}
        icon={PiFileTextDuotone}
        gradient="secondary"
      />
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <InfoWidget title="Total Submissions" icon={PiChartBarDuotone}>
          <div className="text-2xl font-bold">1,234</div>
          <p className="text-xs text-muted-foreground">(Mock Data)</p>
        </InfoWidget>
        <InfoWidget title="Active Encounters" icon={PiHourglassSimpleDuotone}>
           <div className="text-2xl font-bold">12</div>
           <p className="text-xs text-muted-foreground">(Mock Data)</p>
        </InfoWidget>
        <InfoWidget title="Pending Invites" icon={PiUsersDuotone}>
            <div className="text-2xl font-bold">3</div>
           <p className="text-xs text-muted-foreground">For Project Leads (Mock)</p>
        </InfoWidget>
         <InfoWidget title="Data Quality Flags" icon={PiFlagDuotone}>
            <div className="text-2xl font-bold">7</div>
           <p className="text-xs text-muted-foreground">For Project Leads (Mock)</p>
        </InfoWidget>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2">
           <InfoWidget title="Project Goals" icon={PiFlagDuotone}>
             <p className="text-sm text-foreground whitespace-pre-wrap">{goals || 'No goals specified for this project.'}</p>
           </InfoWidget>
        </div>
        <div className="lg:col-span-1">
          <InfoWidget title="Team Members" icon={PiUsersDuotone}>
            <div className="space-y-3">
              {members.map((member: ProjectMember) => (
                <div key={member.userId} className="flex items-center">
                  <img src={`https://ui-avatars.com/api/?name=${encodeURIComponent(member.userId)}&background=random&size=32&color=fff&font-size=0.40&bold=true`} alt={member.userId} className="w-8 h-8 rounded-full mr-3"/>
                  <div>
                    <p className="text-sm font-medium">{member.userId}</p>
                    <p className="text-xs text-muted-foreground">{member.roles.join(', ')}</p>
                  </div>
                </div>
              ))}
            </div>
          </InfoWidget>
        </div>
      </div>
    </div>
  );
};

export default ProjectOverviewPage;


###############################################################################
### FILE: stores/authStore.ts
###############################################################################
import { create } from 'zustand';
import { User } from '@/types';
import { useProjectStore } from '@/stores/projectStore';

interface AuthState {
  isAuthenticated: boolean;
  user: User | null;
  activeProjectRoles: string[];
  login: (userData: User) => void;
  logout: () => void;
  setProjectRoles: (roles: string[]) => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  isAuthenticated: false,
  user: null,
  activeProjectRoles: [],
  login: (userData) => set({ isAuthenticated: true, user: userData, activeProjectRoles: [] }),
  logout: () => {
    set({ isAuthenticated: false, user: null, activeProjectRoles: [] });
    useProjectStore.getState().clearActiveProject();
  },
  setProjectRoles: (roles) => set({ activeProjectRoles: roles }),
}));

// Mock actions for development
export const mockLogin = (userId: string) => {
  const user: User = {
    id: userId,
    name: userId === 'userLead123' ? 'Dr. User Lead' : 'Mock User',
    email: userId === 'userLead123' ? 'dr.lead@example.com' : 'mock.user@example.com',
  };
  useAuthStore.getState().login(user);
};

export const mockLogout = () => useAuthStore.getState().logout();

export default useAuthStore;


###############################################################################
### FILE: stores/formBuilderStore.ts
###############################################################################
// src/stores/formBuilderStore.ts
import { create } from 'zustand';
import { produce } from 'immer';
import { FieldPrimitiveType, FORM_BUILDER_PRIMITIVES } from '@/config/formBuilder.config';

export interface FormSchema {
  title: string;
  description: string;
  type: 'object';
  properties: { [key: string]: any };
  required?: string[];
}

export interface FormUiSchema {
  [key: string]: {
    'ui:widget'?: string;
    'ui:order'?: string[];
    'ui:options'?: { [key:string]: any };
    [key: string]: any;
  };
}

export interface FormBuilderState {
  schema: FormSchema;
  uiSchema: FormUiSchema;
  selectedFieldId: string | null;
}

interface FormBuilderActions {
  setForm: (form: { schema: FormSchema; uiSchema: FormUiSchema }) => void;
  setMetadata: (data: { title?: string; description?: string }) => void;
  addField: (primitiveType: FieldPrimitiveType, parentId?: string | null) => void;
  removeField: (fieldId: string) => void;
  updateFieldSchema: (fieldId: string, newSchemaProps: any) => void;
  updateFieldUiOptions: (fieldId: string, newUiOptions: any) => void;
  setSelectedFieldId: (fieldId: string | null) => void;
  setOrder: (newOrder: string[], parentId?: string | null) => void;
  setRawSchema: (schemaString: string) => void;
  setRawUiSchema: (uiSchemaString: string) => void;
  findFieldParent: (state: FormBuilderState, fieldId: string) => { parentSchema: any, parentUiSchema: any, parentId: string | null };
  loadForm: (form: { schema: FormSchema, uiSchema: FormUiSchema }) => void;
  moveField: (fieldId: string, oldParentId: string | null, newParentId: string | null, newIndex: number) => void;
}

const initialSchema: FormSchema = {
  title: 'Untitled Form',
  description: 'This is a new form created with the CREST Form Builder.',
  type: 'object',
  properties: {},
};

const initialUiSchema: FormUiSchema = {
    'ui:root': {
        'ui:order': [],
    }
};

const findFieldParent = (state: FormBuilderState, fieldId: string) => {
    let parentSchema: any = state.schema;
    let parentUiSchema: any = state.uiSchema['ui:root'];
    let parentId: string | null = null;

    const search = (currentSchema: any, currentUiSchema: any, currentId: string | null): boolean => {
      const order = currentUiSchema?.['ui:order'] || [];
      if (order.includes(fieldId)) {
        parentSchema = currentSchema;
        parentUiSchema = currentUiSchema;
        parentId = currentId;
        return true;
      }

      for (const id of order) {
        const childSchema = currentSchema.properties?.[id];
        const childUiSchema = state.uiSchema[id];
        if (childSchema?.type === 'object' && childUiSchema) {
          if (search(childSchema, childUiSchema, id)) {
            return true;
          }
        }
      }
      return false;
    };
    
    search(state.schema, state.uiSchema['ui:root'], null);
    return { parentSchema, parentUiSchema, parentId };
};

export const useFormBuilderStore = create<FormBuilderState & FormBuilderActions>((set) => ({
  schema: initialSchema,
  uiSchema: initialUiSchema,
  selectedFieldId: null,

  findFieldParent: (state, fieldId) => findFieldParent(state, fieldId),

  loadForm: (form) => {
    set({
      schema: structuredClone(form.schema),
      uiSchema: structuredClone(form.uiSchema),
      selectedFieldId: null,
    });
  },

  setForm: (form) => {
    set({
      schema: structuredClone(form.schema),
      uiSchema: structuredClone(form.uiSchema),
      selectedFieldId: null,
    });
  },

  setMetadata: ({ title, description }) => {
    set(produce((state: FormBuilderState) => {
      if (title !== undefined) state.schema.title = title;
      if (description !== undefined) state.schema.description = description;
    }));
  },

  addField: (primitiveType, parentId = null) => {
    const primitive = FORM_BUILDER_PRIMITIVES.find(p => p.type === primitiveType);
    if (!primitive) return;
    
    const newFieldId = `${primitiveType}_${Date.now()}`;
    
    set(produce((state: FormBuilderState) => {
        let targetSchema = state.schema;
        let targetUiOrder = state.uiSchema['ui:root']['ui:order']!;

        if (parentId) {
            targetSchema = state.schema.properties[parentId];
            if (!state.uiSchema[parentId]) state.uiSchema[parentId] = {};
            if (!state.uiSchema[parentId]['ui:order']) state.uiSchema[parentId]['ui:order'] = [];
            targetUiOrder = state.uiSchema[parentId]['ui:order']!;
        }
        
        if (targetSchema?.properties && targetUiOrder) {
            targetSchema.properties[newFieldId] = structuredClone(primitive.defaultSchema);
            state.uiSchema[newFieldId] = structuredClone(primitive.defaultUiSchema);
            targetUiOrder.push(newFieldId);
            state.selectedFieldId = newFieldId;
        }
    }));
  },

  removeField: (fieldId) => {
    set(produce((state: FormBuilderState) => {
      const { parentSchema, parentUiSchema } = findFieldParent(state, fieldId);

      if (!parentSchema?.properties || !parentUiSchema?.['ui:order']) return;

      const toDelete: string[] = [fieldId];
      const queue: string[] = [fieldId];

      while(queue.length > 0) {
          const currentId = queue.shift()!;
          const childUiSchema = state.uiSchema[currentId];
          if(childUiSchema && childUiSchema['ui:order']) {
              for(const childId of childUiSchema['ui:order']) {
                  toDelete.push(childId);
                  queue.push(childId);
              }
          }
      }

      for(const id of toDelete) {
          delete parentSchema.properties[id];
          delete state.uiSchema[id];
      }
      
      parentUiSchema['ui:order'] = parentUiSchema['ui:order'].filter((id: string) => id !== fieldId);
      
      if (state.selectedFieldId === fieldId) {
        state.selectedFieldId = null;
      }
    }));
  },

  updateFieldSchema: (fieldId, newSchemaProps) => {
    set(produce((state: FormBuilderState) => {
      const { parentSchema } = findFieldParent(state, fieldId);
      if (parentSchema?.properties?.[fieldId]) {
        Object.assign(parentSchema.properties[fieldId], newSchemaProps);
      }
    }));
  },

  updateFieldUiOptions: (fieldId, newUiOptions) => {
    set(produce((state: FormBuilderState) => {
      if (state.uiSchema[fieldId]) {
        if (!state.uiSchema[fieldId]['ui:options']) {
          state.uiSchema[fieldId]['ui:options'] = {};
        }
        Object.assign(state.uiSchema[fieldId]['ui:options'], newUiOptions);
      }
    }));
  },
  
  setSelectedFieldId: (fieldId) => set({ selectedFieldId: fieldId }),
  
  setOrder: (newOrder, parentId = null) => {
    set(produce((state: FormBuilderState) => {
        if (parentId) {
          if(state.uiSchema[parentId]) {
              state.uiSchema[parentId]['ui:order'] = newOrder;
          }
        } else {
          state.uiSchema['ui:root']['ui:order'] = newOrder;
        }
    }));
  },

  setRawSchema: (schemaString) => {
    try {
      const parsedSchema = JSON.parse(schemaString);
      set({ schema: structuredClone(parsedSchema) });
    } catch (e) {
      console.error("Invalid Schema JSON:", e);
    }
  },

  setRawUiSchema: (uiSchemaString) => {
    try {
      const parsedUiSchema = JSON.parse(uiSchemaString);
      set({ uiSchema: structuredClone(parsedUiSchema) });
    } catch (e) {
      console.error("Invalid UI Schema JSON:", e);
    }
  },

  moveField: (fieldId, oldParentId, newParentId, newIndex) => {
    set(produce((state: FormBuilderState) => {
      const { parentSchema: oldParentSchema, parentUiSchema: oldParentUiSchema } = findFieldParent(state, fieldId);
      
      let newParentSchema: any;
      let newParentUiSchema: any;

      if (newParentId === null) {
          newParentSchema = state.schema;
          newParentUiSchema = state.uiSchema['ui:root'];
      } else {
          newParentSchema = state.schema.properties[newParentId];
          newParentUiSchema = state.uiSchema[newParentId];
      }
      
      if (!oldParentSchema?.properties || !oldParentUiSchema?.['ui:order'] || !newParentSchema?.properties || !newParentUiSchema) return;

      const fieldSchema = oldParentSchema.properties[fieldId];
      if(!fieldSchema) return;

      // 1. Add to new parent
      newParentSchema.properties[fieldId] = fieldSchema;
      if (!newParentUiSchema['ui:order']) newParentUiSchema['ui:order'] = [];
      newParentUiSchema['ui:order'].splice(newIndex, 0, fieldId);

      // 2. Remove from old parent
      delete oldParentSchema.properties[fieldId];
      oldParentUiSchema['ui:order'] = oldParentUiSchema['ui:order'].filter((id: string) => id !== fieldId);
    }));
  },
}));


###############################################################################
### FILE: stores/formBuilderStore.v2.ts
###############################################################################
// src/stores/formBuilderStore.v2.ts
// New simplified form builder store based on the specification
import { create } from 'zustand';
import { produce } from 'immer';

// Simplified data model from specification
export type FieldType = 
  | 'text'
  | 'number' 
  | 'boolean'
  | 'single-choice'
  | 'multiple-choice'
  | 'date';

export interface ValidationRule {
  type: 'required' | 'min' | 'max' | 'pattern';
  value?: any;
  message: string;
}

export interface FieldOptions {
  unit?: string;
  choices?: { value: string; label: string; color?: string }[];
  displayAs?: 'radio' | 'dropdown' | 'checkboxGroup' | 'slider' | 'stepper' | 'checkbox' | 'switch' | 'button-group';
  variant?: 'text' | 'autocomplete'; // For text fields
  enabledInputs?: string[];
  layout?: {
    style: 'auto' | 'columns';
    columns?: number;
  };
  togglable?: boolean;
  textFallback?: boolean;
  textFallbackLabel?: string;
  [key: string]: any;
}

export interface FieldStyling {
  color: string;
  width?: 'compact' | 'normal' | 'wide';
  size?: 'sm' | 'md' | 'lg';
  [key: string]: any;
}

export interface Field {
  id: string;
  type: FieldType;
  label: string;
  description?: string;
  required: boolean;
  defaultValue?: any;
  validation?: ValidationRule[];
  options: FieldOptions;
  styling: FieldStyling;
}

export interface SectionStyling {
  color: string;
  background?: string;
  fontSize?: 'sm' | 'base' | 'lg';
  [key: string]: any;
}

export interface Section {
  id: string;
  title: string;
  fields: string[]; // Field IDs
  collapsed: boolean;
  styling: SectionStyling;
}

export interface LayoutConfig {
  sections: Section[];
}

export interface Form {
  id: string;
  projectId: string;
  name: string;
  description: string;
  version: string;
  fields: Field[];
  layout: LayoutConfig;
  createdAt: Date;
  updatedAt: Date;
}

export interface FormBuilderError {
  id: string;
  type: 'validation' | 'save' | 'load';
  message: string;
  fieldId?: string;
}

// State interface
export interface FormBuilderState {
  // Current form being edited
  currentForm: Form | null;
  
  // UI state
  selectedFieldId: string | null;
  draggedFieldId: string | null;
  previewMode: boolean;
  
  // Available forms in project
  projectForms: Form[];
  
  // Loading states
  isLoading: boolean;
  isSaving: boolean;
  
  // Error handling
  errors: FormBuilderError[];
}

// Actions interface
export interface FormBuilderActions {
  // Form management
  createNewForm: (projectId: string) => void;
  loadForm: (formId: string) => void;
  saveForm: () => Promise<void>;
  deleteForm: (formId: string) => void;
  updateFormMetadata: (updates: { name?: string; description?: string }) => void;
  
  // Field operations
  addField: (type: FieldType, sectionId?: string) => void;
  removeField: (fieldId: string) => void;
  updateField: (fieldId: string, updates: Partial<Field>) => void;
  updateFieldDefaultValue: (fieldId: string, value: any) => void;
  moveField: (fieldId: string, targetSectionId: string, index: number) => void;
  duplicateField: (fieldId: string) => void;
  
  // Section operations
  addSection: () => void;
  removeSection: (sectionId: string) => void;
  updateSection: (sectionId: string, updates: Partial<Section>) => void;
  moveSections: (oldIndex: number, newIndex: number) => void;
  toggleSectionCollapse: (sectionId: string) => void;
  
  // UI operations
  selectField: (fieldId: string | null) => void;
  togglePreview: () => void;
  setDraggedField: (fieldId: string | null) => void;
  
  // Error handling
  addError: (error: Omit<FormBuilderError, 'id'>) => void;
  removeError: (errorId: string) => void;
  clearErrors: () => void;
  setRawForm: (jsonString: string) => boolean;
  
  // Utility functions
  getField: (fieldId: string) => Field | null;
  getSection: (sectionId: string) => Section | null;
  validateForm: () => FormBuilderError[];
}

// Default field templates
const createDefaultField = (type: FieldType, label: string): Omit<Field, 'id'> => {
  const base = {
    type,
    label,
    description: '',
    required: false,
    validation: [],
    options: {
      togglable: false,
      textFallback: false,
    },
    styling: { color: 'primary', width: 'normal' as const }
  };

  switch (type) {
    case 'text':
      return { ...base, defaultValue: '', options: { ...base.options, variant: 'text', placeholder: '' } };
    case 'number':
      return { ...base, options: { ...base.options, unit: '', enabledInputs: ['input'] }, defaultValue: { toggled: false, value: 0 } };
    case 'boolean':
      return { ...base, options: { ...base.options, displayAs: 'checkbox' }, defaultValue: false };
    case 'single-choice':
      return {
        ...base,
        options: { 
          choices: [
            { value: 'option_1', label: 'Option 1' },
            { value: 'option_2', label: 'Option 2' }
          ],
          displayAs: 'radio',
          layout: { style: 'auto' },
          togglable: false,
          textFallback: false
        },
        defaultValue: { toggled: false, value: 'option_1' }
      };
    case 'multiple-choice':
      return {
        ...base,
        options: { 
          choices: [
            { value: 'option_1', label: 'Option 1' },
            { value: 'option_2', label: 'Option 2' }
          ],
          displayAs: 'checkboxGroup',
          layout: { style: 'auto' },
          togglable: false,
          textFallback: false
        },
        defaultValue: { toggled: false, value: ['option_1'] }
      };
    case 'date':
      return { ...base, defaultValue: '' };
    default:
      return { ...base, defaultValue: null };
  }
};

// Generate unique IDs
const generateId = (prefix: string): string => {
  return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

// Initial state
const initialState: FormBuilderState = {
  currentForm: null,
  selectedFieldId: null,
  draggedFieldId: null,
  previewMode: false,
  projectForms: [],
  isLoading: false,
  isSaving: false,
  errors: []
};

// Create the store
export const useFormBuilderStoreV2 = create<FormBuilderState & FormBuilderActions>((set, get) => ({
  ...initialState,

  // Form management
  createNewForm: (projectId: string) => {
    const newForm: Form = {
      id: generateId('form'),
      projectId,
      name: 'Untitled Form',
      description: 'A new form created with the CREST Form Builder',
      version: '1.0.0',
      fields: [],
      layout: { sections: [] },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    set(produce((state: FormBuilderState) => {
      state.currentForm = newForm;
      state.selectedFieldId = null;
      state.previewMode = false;
      state.errors = [];
    }));
  },

  loadForm: (formId: string) => {
    set(produce((state: FormBuilderState) => {
      state.isLoading = true;
    }));

    // Simulate async loading
    setTimeout(() => {
      const form = get().projectForms.find(f => f.id === formId);
      if (form) {
        set(produce((state: FormBuilderState) => {
          state.currentForm = structuredClone(form);
          state.selectedFieldId = null;
          state.previewMode = false;
          state.isLoading = false;
          state.errors = [];
        }));
      } else {
        set(produce((state: FormBuilderState) => {
          state.isLoading = false;
          state.errors.push({
            id: generateId('error'),
            type: 'load',
            message: `Form with ID ${formId} not found`
          });
        }));
      }
    }, 100);
  },

  saveForm: async () => {
    const { currentForm } = get();
    if (!currentForm) return;

    set(produce((state: FormBuilderState) => {
      state.isSaving = true;
    }));

    try {
      // Validate form before saving
      const errors = get().validateForm();
      if (errors.length > 0) {
        set(produce((state: FormBuilderState) => {
          state.errors = errors;
          state.isSaving = false;
        }));
        return;
      }

      // Simulate async save
      await new Promise(resolve => setTimeout(resolve, 500));

      set(produce((state: FormBuilderState) => {
        if (state.currentForm) {
          state.currentForm.updatedAt = new Date();
          
          // Update or add to project forms
          const existingIndex = state.projectForms.findIndex(f => f.id === state.currentForm!.id);
          if (existingIndex >= 0) {
            state.projectForms[existingIndex] = structuredClone(state.currentForm);
          } else {
            state.projectForms.push(structuredClone(state.currentForm));
          }
        }
        state.isSaving = false;
        state.errors = [];
      }));
    } catch (error) {
      set(produce((state: FormBuilderState) => {
        state.isSaving = false;
        state.errors.push({
          id: generateId('error'),
          type: 'save',
          message: 'Failed to save form'
        });
      }));
    }
  },

  deleteForm: (formId: string) => {
    set(produce((state: FormBuilderState) => {
      state.projectForms = state.projectForms.filter(f => f.id !== formId);
      if (state.currentForm?.id === formId) {
        state.currentForm = null;
        state.selectedFieldId = null;
      }
    }));
  },

  updateFormMetadata: (updates) => {
    set(produce((state: FormBuilderState) => {
      if (state.currentForm) {
        if (updates.name !== undefined) state.currentForm.name = updates.name;
        if (updates.description !== undefined) state.currentForm.description = updates.description;
        state.currentForm.updatedAt = new Date();
      }
    }));
  },

  // Field operations
  addField: (type: FieldType, sectionId?: string) => {
    const fieldTemplate = createDefaultField(type, `New ${type} field`);
    const newField: Field = {
      ...fieldTemplate,
      id: generateId('field')
    };

    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      // Add field to form's main list
      state.currentForm.fields.push(newField);

      let targetSectionId = sectionId;

      // If no sectionId is provided, figure it out from the selection
      if (!targetSectionId && state.selectedFieldId) {
        // Is the selection a section?
        let section = state.currentForm.layout.sections.find(s => s.id === state.selectedFieldId);
        if (section) {
          targetSectionId = section.id;
        } else {
          // Is the selection a field inside a section?
          const parentSection = state.currentForm.layout.sections.find(s => s.fields.includes(state.selectedFieldId!));
          if (parentSection) {
            targetSectionId = parentSection.id;
          }
        }
      }
      
      if (targetSectionId) {
        // Add to specific section
        const section = state.currentForm.layout.sections.find(s => s.id === targetSectionId);
        if (section) {
          section.fields.push(newField.id);
        }
      } else {
        // Add to first section or create one if none exist
        if (state.currentForm.layout.sections.length === 0) {
          const defaultSection: Section = {
            id: generateId('section'),
            title: 'Main Section',
            fields: [newField.id],
            collapsed: false,
            styling: { color: 'secondary' }
          };
          state.currentForm.layout.sections.push(defaultSection);
        } else {
          state.currentForm.layout.sections[0].fields.push(newField.id);
        }
      }

      // After adding, select the new field
      state.selectedFieldId = newField.id;
      state.currentForm.updatedAt = new Date();
    }));
  },

  removeField: (fieldId: string) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      // Check if this is a section being removed
      const isSection = state.currentForm.layout.sections.some(s => s.id === fieldId);
      
      if (isSection) {
        // Remove the section and all its fields
        const section = state.currentForm.layout.sections.find(s => s.id === fieldId);
        if (section) {
          // Remove all fields in the section
          section.fields.forEach(fId => {
            state.currentForm!.fields = state.currentForm!.fields.filter(f => f.id !== fId);
          });
          
          // Remove the section itself
          state.currentForm.layout.sections = state.currentForm.layout.sections.filter(s => s.id !== fieldId);
        }
      } else {
        // Remove field from fields array
        state.currentForm.fields = state.currentForm.fields.filter(f => f.id !== fieldId);

        // Remove field from all sections
        state.currentForm.layout.sections.forEach(section => {
          section.fields = section.fields.filter(id => id !== fieldId);
        });
      }

      // Clear selection if deleted field was selected
      if (state.selectedFieldId === fieldId) {
        state.selectedFieldId = null;
      }

      state.currentForm.updatedAt = new Date();
    }));
  },

  updateField: (fieldId: string, updates: Partial<Field>) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      const field = state.currentForm.fields.find(f => f.id === fieldId);
      if (field) {
        Object.assign(field, updates);
        state.currentForm.updatedAt = new Date();
      }
    }));
  },

  updateFieldDefaultValue: (fieldId: string, value: any) => {
    set(produce((state: FormBuilderState) => {
        if (!state.currentForm) return;

        const field = state.currentForm.fields.find(f => f.id === fieldId);
        if (field) {
            field.defaultValue = value;
            state.currentForm.updatedAt = new Date();
        }
    }));
  },

  moveField: (fieldId: string, targetSectionId: string, index: number) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      // Remove field from current section
      state.currentForm.layout.sections.forEach(section => {
        section.fields = section.fields.filter(id => id !== fieldId);
      });

      // Add to target section at specified index
      const targetSection = state.currentForm.layout.sections.find(s => s.id === targetSectionId);
      if (targetSection) {
        targetSection.fields.splice(index, 0, fieldId);
      }

      state.currentForm.updatedAt = new Date();
    }));
  },

  duplicateField: (fieldId: string) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      const { fields, layout: { sections } } = state.currentForm;

      const fieldToDuplicate = fields.find((f: Field) => f.id === fieldId);
      const sectionContainingField = sections.find((s: Section) => s.fields.includes(fieldId));

      if (!fieldToDuplicate || !sectionContainingField) return;

      const newField: Field = {
        ...fieldToDuplicate,
        id: generateId(fieldToDuplicate.type),
      };

      // Add new field to the main fields array
      fields.push(newField);

      // Add new field to the section, right after the original
      const originalFieldIndex = sectionContainingField.fields.indexOf(fieldId);
      sectionContainingField.fields.splice(originalFieldIndex + 1, 0, newField.id);
      
      // Select the new field
      state.selectedFieldId = newField.id;
    }));
  },

  // Section operations
  addSection: () => {
    const newSection: Section = {
      id: generateId('section'),
      title: 'New Section',
      fields: [],
      collapsed: false,
      styling: { color: 'secondary', fontSize: 'base' }
    };

    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      state.currentForm.layout.sections.push(newSection);
      state.selectedFieldId = newSection.id;
      state.currentForm.updatedAt = new Date();
    }));
  },

  removeSection: (sectionId: string) => {
    get().removeField(sectionId);
  },

  updateSection: (sectionId: string, updates: Partial<Section>) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      const section = state.currentForm.layout.sections.find(s => s.id === sectionId);
      if (section) {
        Object.assign(section, updates);
        
        // Also update the corresponding field if title changed
        if (updates.title) {
          const field = state.currentForm.fields.find(f => f.id === sectionId);
          if (field) {
            field.label = updates.title;
          }
        }
        
        state.currentForm.updatedAt = new Date();
      }
    }));
  },

  moveSections: (oldIndex: number, newIndex: number) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      const sections = state.currentForm.layout.sections;
      const [movedSection] = sections.splice(oldIndex, 1);
      sections.splice(newIndex, 0, movedSection);
      
      state.currentForm.updatedAt = new Date();
    }));
  },

  toggleSectionCollapse: (sectionId: string) => {
    set(produce((state: FormBuilderState) => {
      if (!state.currentForm) return;

      const section = state.currentForm.layout.sections.find(s => s.id === sectionId);
      if (section) {
        section.collapsed = !section.collapsed;
        state.currentForm.updatedAt = new Date();
      }
    }));
  },

  // UI operations
  selectField: (fieldId: string | null) => {
    set({ selectedFieldId: fieldId });
  },

  togglePreview: () => {
    set(produce((state: FormBuilderState) => {
      state.previewMode = !state.previewMode;
    }));
  },

  setRawForm: (jsonString: string): boolean => {
    try {
      const form = JSON.parse(jsonString) as Form;
      // Basic validation
      if (form && form.id && form.name && Array.isArray(form.fields) && form.layout?.sections) {
        set({ currentForm: form, selectedFieldId: null, errors: [] });
        return true;
      }
      throw new Error("Invalid form structure.");
    } catch(e: any) {
      get().addError({ type: 'load', message: `Invalid JSON: ${e.message}` });
      return false;
    }
  },

  setDraggedField: (fieldId: string | null) => {
    set({ draggedFieldId: fieldId });
  },

  // Error handling
  addError: (error) => {
    set(produce((state: FormBuilderState) => {
      state.errors.push({
        ...error,
        id: generateId('error')
      });
    }));
  },

  removeError: (errorId: string) => {
    set(produce((state: FormBuilderState) => {
      state.errors = state.errors.filter(e => e.id !== errorId);
    }));
  },

  clearErrors: () => {
    set({ errors: [] });
  },

  // Utility functions
  getField: (fieldId: string) => {
    const { currentForm } = get();
    return currentForm?.fields.find(f => f.id === fieldId) || null;
  },

  getSection: (sectionId: string) => {
    const { currentForm } = get();
    return currentForm?.layout.sections.find(s => s.id === sectionId) || null;
  },

  validateForm: () => {
    const { currentForm } = get();
    const errors: FormBuilderError[] = [];

    if (!currentForm) {
      errors.push({
        id: generateId('error'),
        type: 'validation',
        message: 'No form to validate'
      });
      return errors;
    }

    // Validate form metadata
    if (!currentForm.name.trim()) {
      errors.push({
        id: generateId('error'),
        type: 'validation',
        message: 'Form name is required'
      });
    }

    // Validate fields
    currentForm.fields.forEach(field => {
      if (!field.label.trim()) {
        errors.push({
          id: generateId('error'),
          type: 'validation',
          message: 'Field label is required',
          fieldId: field.id
        });
      }

      // Validate choice fields have options
      if ((field.type === 'single-choice' || field.type === 'multiple-choice') && 
          (!field.options.choices || field.options.choices.length === 0)) {
        errors.push({
          id: generateId('error'),
          type: 'validation',
          message: 'Choice fields must have at least one option',
          fieldId: field.id
        });
      }
    });

    return errors;
  }
})); 


###############################################################################
### FILE: stores/projectStore.ts
###############################################################################
// src/stores/projectStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { Project } from '@/types';
import { mockProjects } from '@/data/mockData';

interface ProjectState {
  availableProjects: Project[];
  activeProjectId: string | null;
  activeProjectDetails: Project | null;
  isLoading: boolean;
  error: string | null;
}

interface ProjectActions {
  fetchAvailableProjects: () => Promise<void>;
  setActiveProject: (projectId: string) => void;
  clearActiveProject: () => void;
  addProject: (newProject: Project) => void;
}

export const useProjectStore = create<ProjectState & ProjectActions>()(
  persist(
    (set, get) => ({
      // Initial state
      availableProjects: [],
      activeProjectId: null,
      activeProjectDetails: null,
      isLoading: false,
      error: null,

      // Actions
      fetchAvailableProjects: async () => {
        set({ isLoading: true, error: null });
        try {
          // Simulate API call
          await new Promise(resolve => setTimeout(resolve, 300)); 
          set({ availableProjects: mockProjects, isLoading: false });
        } catch (err) {
          const errorMessage = err instanceof Error ? err.message : 'Failed to fetch projects';
          set({ error: errorMessage, isLoading: false });
          console.error("Error fetching projects:", errorMessage);
        }
      },
      setActiveProject: (projectId) => {
        const project = get().availableProjects.find(p => p.id === projectId);
        if (project) {
          set({ activeProjectId: projectId, activeProjectDetails: project, error: null });
        } else {
          set({ error: `Project with ID ${projectId} not found.`, activeProjectId: null, activeProjectDetails: null });
        }
      },
      clearActiveProject: () => {
        set({ activeProjectId: null, activeProjectDetails: null });
      },
      addProject: (newProject) => {
        set(state => ({
          availableProjects: [...state.availableProjects, newProject]
        }));
      },
    }),
    {
      name: 'crest-project-storage', 
      storage: createJSONStorage(() => localStorage), 
      partialize: (state) => ({ activeProjectId: state.activeProjectId }), // Only persist activeProjectId
    }
  )
);


###############################################################################
### FILE: stores/submissionStore.ts
###############################################################################
// src/stores/submissionStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { PatientInputData } from '@/types';
import { FormSchema, FormUiSchema } from './formBuilderStore';

export interface FormDefinition {
  key: string; 
  name: string;
  version: string;
  schema: FormSchema;
  uiSchema: FormUiSchema;
}

interface SubmissionState {
  isEncounterActive: boolean;
  patientData: PatientInputData | null;
  formSequence: FormDefinition[];
  currentFormIndex: number; // -1: patient input, 0 to n-1: forms, n: review
  allFormsData: { [formKey: string]: any };
  lastUpdateTimestamp: number | null;
}

interface SubmissionActions {
  startNewEncounter: (patientData: PatientInputData, sequence: FormDefinition[]) => void;
  saveCurrentForm: (formKey: string, data: any) => void;
  setCurrentFormIndex: (index: number) => void;
  updatePatientData: (patientData: Partial<PatientInputData>) => void;
  completeAndClearEncounter: () => void;
}

const initialPatientState: PatientInputData = {
    initials: '',
    gender: '',
    dob: '',
    projectConsent: false,
}

const initialState: SubmissionState = {
  isEncounterActive: false,
  patientData: initialPatientState,
  formSequence: [],
  currentFormIndex: -1,
  allFormsData: {},
  lastUpdateTimestamp: null,
};

export const useSubmissionStore = create<SubmissionState & SubmissionActions>()(
  persist(
    (set, get) => ({
      ...initialState,
      startNewEncounter: (patientData, sequence) => {
        set({
          isEncounterActive: true,
          patientData,
          formSequence: sequence,
          currentFormIndex: 0,
          allFormsData: {},
          lastUpdateTimestamp: Date.now(),
        });
      },
      saveCurrentForm: (formKey, data) => {
        set(state => ({
          allFormsData: { ...state.allFormsData, [formKey]: data },
          lastUpdateTimestamp: Date.now(),
        }));
      },
      setCurrentFormIndex: (index) => {
        const sequenceLength = get().formSequence.length;
        if (index >= -1 && index <= sequenceLength) {
          set({ currentFormIndex: index, lastUpdateTimestamp: Date.now() });
        }
      },
      updatePatientData: (updatedPatientData) => {
        set(state => ({
            patientData: { ...state.patientData!, ...updatedPatientData },
            lastUpdateTimestamp: Date.now(), // This was the only necessary change.
        }));
      },
      completeAndClearEncounter: () => {
        set({ ...initialState, patientData: initialPatientState });
      },
    }),
    {
      name: 'crest-submission-storage',
      storage: createJSONStorage(() => localStorage),
    }
  )
);


###############################################################################
### FILE: stores/uiStore.ts
###############################################################################
// src/stores/uiStore.ts
import { create } from 'zustand';

interface UiState {
  isSidebarOpen: boolean;
  toggleSidebar: () => void;
  setSidebarOpen: (isOpen: boolean) => void;
}

export const useUiStore = create<UiState>((set) => ({
  isSidebarOpen: true, // Default to open on desktop
  toggleSidebar: () => set((state) => ({ isSidebarOpen: !state.isSidebarOpen })),
  setSidebarOpen: (isOpen) => set({ isSidebarOpen: isOpen }),
}));


###############################################################################
### FILE: types/index.ts
###############################################################################
// src/types/index.ts
export interface User {
  id: string;
  name: string;
  email: string;
}

export interface ProjectMember {
  userId: string;
  roles: string[];
}

export interface Project {
  id: string;
  name: string;
  description: string;
  goals?: string; // <-- FIX: Added optional goals property
  members: ProjectMember[];
}

// Types for Dynamic Forms
export interface AutocompleteOption {
  value: string;
  label: string;
  [key: string]: any;
}

export interface SelectedItem {
  value: string;
  label: string;
  [key: string]: any;
}

export interface PatientInputData {
  initials: string;
  gender: string;
  dob: string;
  projectConsent: boolean;
}


###############################################################################
### FILE: vite-env.d.ts
###############################################################################
/// <reference types="vite/client" />



